{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ERR_TOPIC_VALIDATOR_IGNORE = exports.ERR_TOPIC_VALIDATOR_REJECT = exports.TimeCacheDuration = exports.GossipsubIWantFollowupTime = exports.GossipsubMaxIHaveMessages = exports.GossipsubMaxIHaveLength = exports.GossipsubGraftFloodThreshold = exports.GossipsubOpportunisticGraftPeers = exports.GossipsubOpportunisticGraftTicks = exports.GossipsubDirectConnectInitialDelay = exports.GossipsubDirectConnectTicks = exports.GossipsubConnectionTimeout = exports.GossipsubMaxPendingConnections = exports.GossipsubConnectors = exports.GossipsubPruneBackoffTicks = exports.GossipsubPruneBackoff = exports.GossipsubPrunePeers = exports.GossipsubFanoutTTL = exports.GossipsubHeartbeatInterval = exports.GossipsubHeartbeatInitialDelay = exports.GossipsubGossipRetransmission = exports.GossipsubGossipFactor = exports.GossipsubDlazy = exports.GossipsubHistoryGossip = exports.GossipsubHistoryLength = exports.GossipsubDout = exports.GossipsubDscore = exports.GossipsubDhi = exports.GossipsubDlo = exports.GossipsubD = exports.GossipsubIDv11 = exports.GossipsubIDv10 = exports.FloodsubID = exports.minute = exports.second = void 0;\nexports.second = 1000;\nexports.minute = 60 * exports.second; // Protocol identifiers\n\nexports.FloodsubID = '/floodsub/1.0.0';\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */\n\nexports.GossipsubIDv10 = '/meshsub/1.0.0';\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */\n\nexports.GossipsubIDv11 = '/meshsub/1.1.0'; // Overlay parameters\n\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */\n\nexports.GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */\n\nexports.GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */\n\nexports.GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */\n\nexports.GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */\n\nexports.GossipsubDout = 2; // Gossip parameters\n\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */\n\nexports.GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */\n\nexports.GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */\n\nexports.GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */\n\nexports.GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */\n\nexports.GossipsubGossipRetransmission = 3; // Heartbeat interval\n\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */\n\nexports.GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */\n\nexports.GossipsubHeartbeatInterval = exports.second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */\n\nexports.GossipsubFanoutTTL = exports.minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */\n\nexports.GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */\n\nexports.GossipsubPruneBackoff = exports.minute;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */\n\nexports.GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */\n\nexports.GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */\n\nexports.GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */\n\nexports.GossipsubConnectionTimeout = 30 * exports.second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */\n\nexports.GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */\n\nexports.GossipsubDirectConnectInitialDelay = exports.second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */\n\nexports.GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */\n\nexports.GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */\n\nexports.GossipsubGraftFloodThreshold = 10 * exports.second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */\n\nexports.GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */\n\nexports.GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */\n\nexports.GossipsubIWantFollowupTime = 3 * exports.second;\nexports.TimeCacheDuration = 120 * 1000;\nexports.ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';\nexports.ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-gossipsub/src/constants.js"],"names":["Object","defineProperty","exports","value","ERR_TOPIC_VALIDATOR_IGNORE","ERR_TOPIC_VALIDATOR_REJECT","TimeCacheDuration","GossipsubIWantFollowupTime","GossipsubMaxIHaveMessages","GossipsubMaxIHaveLength","GossipsubGraftFloodThreshold","GossipsubOpportunisticGraftPeers","GossipsubOpportunisticGraftTicks","GossipsubDirectConnectInitialDelay","GossipsubDirectConnectTicks","GossipsubConnectionTimeout","GossipsubMaxPendingConnections","GossipsubConnectors","GossipsubPruneBackoffTicks","GossipsubPruneBackoff","GossipsubPrunePeers","GossipsubFanoutTTL","GossipsubHeartbeatInterval","GossipsubHeartbeatInitialDelay","GossipsubGossipRetransmission","GossipsubGossipFactor","GossipsubDlazy","GossipsubHistoryGossip","GossipsubHistoryLength","GossipsubDout","GossipsubDscore","GossipsubDhi","GossipsubDlo","GossipsubD","GossipsubIDv11","GossipsubIDv10","FloodsubID","minute","second"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqCF,OAAO,CAACG,0BAAR,GAAqCH,OAAO,CAACI,iBAAR,GAA4BJ,OAAO,CAACK,0BAAR,GAAqCL,OAAO,CAACM,yBAAR,GAAoCN,OAAO,CAACO,uBAAR,GAAkCP,OAAO,CAACQ,4BAAR,GAAuCR,OAAO,CAACS,gCAAR,GAA2CT,OAAO,CAACU,gCAAR,GAA2CV,OAAO,CAACW,kCAAR,GAA6CX,OAAO,CAACY,2BAAR,GAAsCZ,OAAO,CAACa,0BAAR,GAAqCb,OAAO,CAACc,8BAAR,GAAyCd,OAAO,CAACe,mBAAR,GAA8Bf,OAAO,CAACgB,0BAAR,GAAqChB,OAAO,CAACiB,qBAAR,GAAgCjB,OAAO,CAACkB,mBAAR,GAA8BlB,OAAO,CAACmB,kBAAR,GAA6BnB,OAAO,CAACoB,0BAAR,GAAqCpB,OAAO,CAACqB,8BAAR,GAAyCrB,OAAO,CAACsB,6BAAR,GAAwCtB,OAAO,CAACuB,qBAAR,GAAgCvB,OAAO,CAACwB,cAAR,GAAyBxB,OAAO,CAACyB,sBAAR,GAAiCzB,OAAO,CAAC0B,sBAAR,GAAiC1B,OAAO,CAAC2B,aAAR,GAAwB3B,OAAO,CAAC4B,eAAR,GAA0B5B,OAAO,CAAC6B,YAAR,GAAuB7B,OAAO,CAAC8B,YAAR,GAAuB9B,OAAO,CAAC+B,UAAR,GAAqB/B,OAAO,CAACgC,cAAR,GAAyBhC,OAAO,CAACiC,cAAR,GAAyBjC,OAAO,CAACkC,UAAR,GAAqBlC,OAAO,CAACmC,MAAR,GAAiBnC,OAAO,CAACoC,MAAR,GAAiB,KAAK,CAAjmC;AACApC,OAAO,CAACoC,MAAR,GAAiB,IAAjB;AACApC,OAAO,CAACmC,MAAR,GAAiB,KAAKnC,OAAO,CAACoC,MAA9B,C,CACA;;AACApC,OAAO,CAACkC,UAAR,GAAqB,iBAArB;AACA;AACA;AACA;AACA;;AACAlC,OAAO,CAACiC,cAAR,GAAyB,gBAAzB;AACA;AACA;AACA;AACA;AACA;;AACAjC,OAAO,CAACgC,cAAR,GAAyB,gBAAzB,C,CACA;;AACA;AACA;AACA;AACA;AACA;;AACAhC,OAAO,CAAC+B,UAAR,GAAqB,CAArB;AACA;AACA;AACA;AACA;AACA;;AACA/B,OAAO,CAAC8B,YAAR,GAAuB,CAAvB;AACA;AACA;AACA;AACA;;AACA9B,OAAO,CAAC6B,YAAR,GAAuB,EAAvB;AACA;AACA;AACA;AACA;AACA;;AACA7B,OAAO,CAAC4B,eAAR,GAA0B,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA5B,OAAO,CAAC2B,aAAR,GAAwB,CAAxB,C,CACA;;AACA;AACA;AACA;AACA;;AACA3B,OAAO,CAAC0B,sBAAR,GAAiC,CAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1B,OAAO,CAACyB,sBAAR,GAAiC,CAAjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzB,OAAO,CAACwB,cAAR,GAAyB,CAAzB;AACA;AACA;AACA;AACA;AACA;;AACAxB,OAAO,CAACuB,qBAAR,GAAgC,IAAhC;AACA;AACA;AACA;AACA;AACA;;AACAvB,OAAO,CAACsB,6BAAR,GAAwC,CAAxC,C,CACA;;AACA;AACA;AACA;AACA;;AACAtB,OAAO,CAACqB,8BAAR,GAAyC,GAAzC;AACA;AACA;AACA;;AACArB,OAAO,CAACoB,0BAAR,GAAqCpB,OAAO,CAACoC,MAA7C;AACA;AACA;AACA;AACA;AACA;;AACApC,OAAO,CAACmB,kBAAR,GAA6BnB,OAAO,CAACmC,MAArC;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnC,OAAO,CAACkB,mBAAR,GAA8B,EAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAlB,OAAO,CAACiB,qBAAR,GAAgCjB,OAAO,CAACmC,MAAxC;AACA;AACA;AACA;AACA;;AACAnC,OAAO,CAACgB,0BAAR,GAAqC,EAArC;AACA;AACA;AACA;;AACAhB,OAAO,CAACe,mBAAR,GAA8B,CAA9B;AACA;AACA;AACA;;AACAf,OAAO,CAACc,8BAAR,GAAyC,GAAzC;AACA;AACA;AACA;;AACAd,OAAO,CAACa,0BAAR,GAAqC,KAAKb,OAAO,CAACoC,MAAlD;AACA;AACA;AACA;AACA;;AACApC,OAAO,CAACY,2BAAR,GAAsC,GAAtC;AACA;AACA;AACA;;AACAZ,OAAO,CAACW,kCAAR,GAA6CX,OAAO,CAACoC,MAArD;AACA;AACA;AACA;AACA;AACA;AACA;;AACApC,OAAO,CAACU,gCAAR,GAA2C,EAA3C;AACA;AACA;AACA;;AACAV,OAAO,CAACS,gCAAR,GAA2C,CAA3C;AACA;AACA;AACA;AACA;;AACAT,OAAO,CAACQ,4BAAR,GAAuC,KAAKR,OAAO,CAACoC,MAApD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApC,OAAO,CAACO,uBAAR,GAAkC,IAAlC;AACA;AACA;AACA;;AACAP,OAAO,CAACM,yBAAR,GAAoC,EAApC;AACA;AACA;AACA;AACA;AACA;;AACAN,OAAO,CAACK,0BAAR,GAAqC,IAAIL,OAAO,CAACoC,MAAjD;AACApC,OAAO,CAACI,iBAAR,GAA4B,MAAM,IAAlC;AACAJ,OAAO,CAACG,0BAAR,GAAqC,4BAArC;AACAH,OAAO,CAACE,0BAAR,GAAqC,4BAArC","sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERR_TOPIC_VALIDATOR_IGNORE = exports.ERR_TOPIC_VALIDATOR_REJECT = exports.TimeCacheDuration = exports.GossipsubIWantFollowupTime = exports.GossipsubMaxIHaveMessages = exports.GossipsubMaxIHaveLength = exports.GossipsubGraftFloodThreshold = exports.GossipsubOpportunisticGraftPeers = exports.GossipsubOpportunisticGraftTicks = exports.GossipsubDirectConnectInitialDelay = exports.GossipsubDirectConnectTicks = exports.GossipsubConnectionTimeout = exports.GossipsubMaxPendingConnections = exports.GossipsubConnectors = exports.GossipsubPruneBackoffTicks = exports.GossipsubPruneBackoff = exports.GossipsubPrunePeers = exports.GossipsubFanoutTTL = exports.GossipsubHeartbeatInterval = exports.GossipsubHeartbeatInitialDelay = exports.GossipsubGossipRetransmission = exports.GossipsubGossipFactor = exports.GossipsubDlazy = exports.GossipsubHistoryGossip = exports.GossipsubHistoryLength = exports.GossipsubDout = exports.GossipsubDscore = exports.GossipsubDhi = exports.GossipsubDlo = exports.GossipsubD = exports.GossipsubIDv11 = exports.GossipsubIDv10 = exports.FloodsubID = exports.minute = exports.second = void 0;\nexports.second = 1000;\nexports.minute = 60 * exports.second;\n// Protocol identifiers\nexports.FloodsubID = '/floodsub/1.0.0';\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */\nexports.GossipsubIDv10 = '/meshsub/1.0.0';\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */\nexports.GossipsubIDv11 = '/meshsub/1.1.0';\n// Overlay parameters\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */\nexports.GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */\nexports.GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */\nexports.GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */\nexports.GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */\nexports.GossipsubDout = 2;\n// Gossip parameters\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */\nexports.GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */\nexports.GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */\nexports.GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */\nexports.GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */\nexports.GossipsubGossipRetransmission = 3;\n// Heartbeat interval\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */\nexports.GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */\nexports.GossipsubHeartbeatInterval = exports.second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */\nexports.GossipsubFanoutTTL = exports.minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */\nexports.GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */\nexports.GossipsubPruneBackoff = exports.minute;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */\nexports.GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */\nexports.GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */\nexports.GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */\nexports.GossipsubConnectionTimeout = 30 * exports.second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */\nexports.GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */\nexports.GossipsubDirectConnectInitialDelay = exports.second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */\nexports.GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */\nexports.GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */\nexports.GossipsubGraftFloodThreshold = 10 * exports.second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */\nexports.GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */\nexports.GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */\nexports.GossipsubIWantFollowupTime = 3 * exports.second;\nexports.TimeCacheDuration = 120 * 1000;\nexports.ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';\nexports.ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';\n"]},"metadata":{},"sourceType":"script"}
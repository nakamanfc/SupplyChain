{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv(sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources];\n    }\n\n    const res = await api.post('files/mv', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n\n  return mv;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/files/mv.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","mv","sources","destination","options","Array","isArray","res","post","timeout","signal","searchParams","arg","concat","headers","text"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,EAAf,CAAmBC,OAAnB,EAA4BC,WAA5B,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AACrD,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAL,EAA6B;AAC3BA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,UAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OADoB;AAErCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MAFqB;AAGrCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEV,OAAO,CAACW,MAAR,CAAeV,WAAf,CADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHM;AAOrCU,MAAAA,OAAO,EAAEV,OAAO,CAACU;AAPoB,KAArB,CAAlB;AASA,UAAMP,GAAG,CAACQ,IAAJ,EAAN;AACD;;AAED,SAAOd,EAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n"]},"metadata":{},"sourceType":"script"}
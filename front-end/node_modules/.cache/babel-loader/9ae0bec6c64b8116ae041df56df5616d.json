{"ast":null,"code":"'use strict';\n\nconst mafmt = require('mafmt');\n\nconst {\n  CODE_CIRCUIT,\n  CODE_P2P,\n  CODE_TCP,\n  CODE_WS,\n  CODE_WSS\n} = require('./constants');\n\nmodule.exports = {\n  all: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSockets.matches(testMa) || mafmt.WebSocketsSecure.matches(testMa);\n  }),\n  dnsWss: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  }),\n  dnsWsOrWss: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P); // WS\n\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));\n    } // WSS\n\n\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  })\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-websockets/src/filters.js"],"names":["mafmt","require","CODE_CIRCUIT","CODE_P2P","CODE_TCP","CODE_WS","CODE_WSS","module","exports","all","multiaddrs","filter","ma","protoCodes","includes","testMa","decapsulateCode","WebSockets","matches","WebSocketsSecure","dnsWss","DNS","dnsWsOrWss"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AACJC,EAAAA,YADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,OAJI;AAKJC,EAAAA;AALI,IAMFL,OAAO,CAAC,aAAD,CANX;;AAQAM,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAGC,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAQ;AAC7C,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBZ,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMa,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBb,QAAnB,CAAf;AAEA,WAAOH,KAAK,CAACiB,UAAN,CAAiBC,OAAjB,CAAyBH,MAAzB,KACLf,KAAK,CAACmB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,CADF;AAED,GAToB,CADN;AAWfK,EAAAA,MAAM,EAAGV,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAQ;AAChD,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBZ,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMa,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBb,QAAnB,CAAf;AAEA,WAAOH,KAAK,CAACmB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,KACLf,KAAK,CAACqB,GAAN,CAAUH,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBZ,QAAvB,EAAiCY,eAAjC,CAAiDV,QAAjD,CAAlB,CADF;AAED,GATuB,CAXT;AAqBfgB,EAAAA,UAAU,EAAGZ,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAQ;AACpD,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBZ,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMa,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBb,QAAnB,CAAf,CALoD,CAOpD;;AACA,QAAIH,KAAK,CAACiB,UAAN,CAAiBC,OAAjB,CAAyBH,MAAzB,CAAJ,EAAsC;AACpC,aAAOf,KAAK,CAACqB,GAAN,CAAUH,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBZ,QAAvB,EAAiCY,eAAjC,CAAiDX,OAAjD,CAAlB,CAAP;AACD,KAVmD,CAYpD;;;AACA,WAAOL,KAAK,CAACmB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,KACLf,KAAK,CAACqB,GAAN,CAAUH,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBZ,QAAvB,EAAiCY,eAAjC,CAAiDV,QAAjD,CAAlB,CADF;AAED,GAf2B;AArBb,CAAjB","sourcesContent":["'use strict'\n\nconst mafmt = require('mafmt')\nconst {\n  CODE_CIRCUIT,\n  CODE_P2P,\n  CODE_TCP,\n  CODE_WS,\n  CODE_WSS\n} = require('./constants')\n\nmodule.exports = {\n  all: (multiaddrs) => multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSockets.matches(testMa) ||\n      mafmt.WebSocketsSecure.matches(testMa)\n  }),\n  dnsWss: (multiaddrs) => multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  }),\n  dnsWsOrWss: (multiaddrs) => multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    // WS\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS))\n    }\n\n    // WSS\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  })\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst {\n  normalizeCidPath\n} = require('../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  async function* cat(ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath);\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/');\n      preload(CID.parse(pathComponents[0]));\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options); // File may not have unixfs prop if small & imported with rawLeaves true\n\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory');\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content');\n    }\n\n    yield* file.content(options);\n  }\n\n  return withTimeoutOption(cat);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/cat.js"],"names":["exporter","require","normalizeCidPath","withTimeoutOption","CID","module","exports","repo","preload","cat","ipfsPath","options","pathComponents","split","parse","file","blocks","type","Error","content"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAuBD,OAAO,CAAC,UAAD,CAApC;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAUH,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC5C;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,QAAtB,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAC5CD,IAAAA,QAAQ,GAAGR,gBAAgB,CAACQ,QAAD,CAA3B;;AAEA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7B,YAAMI,cAAc,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAvB;AACAL,MAAAA,OAAO,CAACJ,GAAG,CAACU,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;AACD;;AAED,UAAMG,IAAI,GAAG,MAAMf,QAAQ,CAACU,QAAD,EAAWH,IAAI,CAACS,MAAhB,EAAwBL,OAAxB,CAA3B,CAR4C,CAU5C;;AACA,QAAII,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,QAAI,CAACH,IAAI,CAACI,OAAV,EAAmB;AACjB,YAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,WAAQH,IAAI,CAACI,OAAL,CAAaR,OAAb,CAAR;AACD;;AAED,SAAOR,iBAAiB,CAACM,GAAD,CAAxB;AACD,CA3BD","sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst { normalizeCidPath } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"]},"metadata":{},"sourceType":"script"}
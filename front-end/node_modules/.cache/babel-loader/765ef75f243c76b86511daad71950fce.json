{"ast":null,"code":"'use strict';\n\nconst {\n  createRepo\n} = require('ipfs-repo');\n\nconst DatastoreLevel = require('datastore-level');\n\nconst BlockstoreDatastoreAdapter = require('blockstore-datastore-adapter');\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {import('../types').Print} print\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n */\n\n\nmodule.exports = (print, codecs, options) => {\n  const repoPath = options.path || 'ipfs';\n  return createRepo(repoPath, codeOrName => codecs.getCodec(codeOrName), {\n    root: new DatastoreLevel(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(new DatastoreLevel(`${repoPath}/blocks`, {\n      prefix: '',\n      version: 2\n    })),\n    datastore: new DatastoreLevel(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new DatastoreLevel(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new DatastoreLevel(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print\n  });\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/runtime/repo-browser.js"],"names":["createRepo","require","DatastoreLevel","BlockstoreDatastoreAdapter","module","exports","print","codecs","options","repoPath","path","codeOrName","getCodec","root","prefix","version","blocks","datastore","keys","pins","autoMigrate","onMigrationProgress"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,WAAD,CAA9B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAME,0BAA0B,GAAGF,OAAO,CAAC,8BAAD,CAA1C;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,KAA4B;AAC3C,QAAMC,QAAQ,GAAGD,OAAO,CAACE,IAAR,IAAgB,MAAjC;AAEA,SAAOV,UAAU,CAACS,QAAD,EAAYE,UAAD,IAAgBJ,MAAM,CAACK,QAAP,CAAgBD,UAAhB,CAA3B,EAAwD;AACvEE,IAAAA,IAAI,EAAE,IAAIX,cAAJ,CAAmBO,QAAnB,EAA6B;AACjCK,MAAAA,MAAM,EAAE,EADyB;AAEjCC,MAAAA,OAAO,EAAE;AAFwB,KAA7B,CADiE;AAKvEC,IAAAA,MAAM,EAAE,IAAIb,0BAAJ,CACN,IAAID,cAAJ,CAAoB,GAAEO,QAAS,SAA/B,EAAyC;AACvCK,MAAAA,MAAM,EAAE,EAD+B;AAEvCC,MAAAA,OAAO,EAAE;AAF8B,KAAzC,CADM,CAL+D;AAWvEE,IAAAA,SAAS,EAAE,IAAIf,cAAJ,CAAoB,GAAEO,QAAS,YAA/B,EAA4C;AACrDK,MAAAA,MAAM,EAAE,EAD6C;AAErDC,MAAAA,OAAO,EAAE;AAF4C,KAA5C,CAX4D;AAevEG,IAAAA,IAAI,EAAE,IAAIhB,cAAJ,CAAoB,GAAEO,QAAS,OAA/B,EAAuC;AAC3CK,MAAAA,MAAM,EAAE,EADmC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAAvC,CAfiE;AAmBvEI,IAAAA,IAAI,EAAE,IAAIjB,cAAJ,CAAoB,GAAEO,QAAS,OAA/B,EAAuC;AAC3CK,MAAAA,MAAM,EAAE,EADmC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAAvC;AAnBiE,GAAxD,EAuBd;AACDK,IAAAA,WAAW,EAAEZ,OAAO,CAACY,WADpB;AAEDC,IAAAA,mBAAmB,EAAEb,OAAO,CAACa,mBAAR,IAA+Bf;AAFnD,GAvBc,CAAjB;AA2BD,CA9BD","sourcesContent":["'use strict'\n\nconst { createRepo } = require('ipfs-repo')\nconst DatastoreLevel = require('datastore-level')\nconst BlockstoreDatastoreAdapter = require('blockstore-datastore-adapter')\n\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {import('../types').Print} print\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n */\nmodule.exports = (print, codecs, options) => {\n  const repoPath = options.path || 'ipfs'\n\n  return createRepo(repoPath, (codeOrName) => codecs.getCodec(codeOrName), {\n    root: new DatastoreLevel(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(\n      new DatastoreLevel(`${repoPath}/blocks`, {\n        prefix: '',\n        version: 2\n      })\n    ),\n    datastore: new DatastoreLevel(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new DatastoreLevel(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new DatastoreLevel(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print\n  })\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = ({\n  preload,\n  files,\n  options = {}\n}) => {\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  /** @type {any} */\n\n  let timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = stats.cid.toString();\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = stats.cid.toString();\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/mfs-preload.js"],"names":["debug","require","log","Object","assign","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","toString","err","setTimeout","clearTimeout"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,kBAAD,CAAnB,EAAyC;AACnDK,EAAAA,KAAK,EAAEL,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAM,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,OAAO,GAAG;AAA5B,CAAD,KAAsC;AACrDA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBV,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,UAAMW,IAAI,GAAG,YAAY,CAAE,CAA3B;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAED,IAAT;AAAeE,MAAAA,IAAI,EAAEF;AAArB,KAAP;AACD;;AAED,MAAIG,OAAO,GAAG,EAAd;AACA;;AACA,MAAIC,SAAJ;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACA,YAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAApB;;AAEA,UAAIP,OAAO,KAAKK,WAAhB,EAA6B;AAC3BnB,QAAAA,GAAG,CAAE,+BAA8Bc,OAAQ,OAAMG,KAAK,CAACG,GAAI,EAAxD,CAAH;AACA,cAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;AACAN,QAAAA,OAAO,GAAGK,WAAV;AACD;AACF,KATD,CASE,OAAOG,GAAP,EAAY;AACZtB,MAAAA,GAAG,CAACG,KAAJ,CAAU,4BAAV,EAAwCmB,GAAxC;AACD,KAXD,SAWU;AACRP,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD;AACF,GAfD;;AAiBA,SAAO;AACL;AACJ;AACA;AACI,UAAMG,KAAN,GAAe;AACb,YAAMK,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACAJ,MAAAA,OAAO,GAAGG,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAV;AACArB,MAAAA,GAAG,CAAE,uBAAsBiB,KAAK,CAACG,GAAI,EAAlC,CAAH;AACAL,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD,KATI;;AAUL;AACJ;AACA;AACII,IAAAA,IAAI,GAAI;AACNW,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACD;;AAfI,GAAP;AAiBD,CA/CD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
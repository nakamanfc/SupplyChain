{"ast":null,"code":"const Netmask = require('netmask').Netmask;\n\nconst ip_regex = require('ip-regex');\n\nconst PRIVATE_IP_RANGES = ['0.0.0.0/8', '10.0.0.0/8', '100.64.0.0/10', '127.0.0.0/8', '169.254.0.0/16', '172.16.0.0/12', '192.0.0.0/24', '192.0.0.0/29', '192.0.0.8/32', '192.0.0.9/32', '192.0.0.10/32', '192.0.0.170/32', '192.0.0.171/32', '192.0.2.0/24', '192.31.196.0/24', '192.52.193.0/24', '192.88.99.0/24', '192.168.0.0/16', '192.175.48.0/24', '198.18.0.0/15', '198.51.100.0/24', '203.0.113.0/24', '240.0.0.0/4', '255.255.255.255/32'];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new Netmask(ip_range));\n\nfunction ipv4_check(ip_addr) {\n  for (let r of NETMASK_RANGES) {\n    if (r.contains(ip_addr)) return true;\n  }\n\n  return false;\n}\n\nfunction ipv6_check(ip_addr) {\n  return /^::$/.test(ip_addr) || /^::1$/.test(ip_addr) || /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) || /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) || /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);\n}\n\nmodule.exports = ip_addr => {\n  if (ip_regex.v6().test(ip_addr)) return ipv6_check(ip_addr);else if (ip_regex().test(ip_addr) || ip_addr.startsWith('0')) return ipv4_check(ip_addr);\n  return false;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/private-ip/lib/index.js"],"names":["Netmask","require","ip_regex","PRIVATE_IP_RANGES","NETMASK_RANGES","map","ip_range","ipv4_check","ip_addr","r","contains","ipv6_check","test","module","exports","v6","startsWith"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,OAAnC;;AACA,MAAME,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAME,iBAAiB,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,eAA5B,EAA6C,aAA7C,EAA4D,gBAA5D,EAA8E,eAA9E,EAA+F,cAA/F,EAA+G,cAA/G,EAA+H,cAA/H,EAA+I,cAA/I,EAA+J,eAA/J,EAAgL,gBAAhL,EAAkM,gBAAlM,EAAoN,cAApN,EAAoO,iBAApO,EAAuP,iBAAvP,EAA0Q,gBAA1Q,EAA4R,gBAA5R,EAA8S,iBAA9S,EAAiU,eAAjU,EAAkV,iBAAlV,EAAqW,gBAArW,EAAuX,aAAvX,EAAsY,oBAAtY,CAA1B;AAEA,MAAMC,cAAc,GAAGD,iBAAiB,CAACE,GAAlB,CAAsBC,QAAQ,IAAI,IAAIN,OAAJ,CAAYM,QAAZ,CAAlC,CAAvB;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,OAAK,IAAIC,CAAT,IAAcL,cAAd,EAA8B;AAC5B,QAAIK,CAAC,CAACC,QAAF,CAAWF,OAAX,CAAJ,EAAyB,OAAO,IAAP;AAC1B;;AAED,SAAO,KAAP;AACD;;AAED,SAASG,UAAT,CAAoBH,OAApB,EAA6B;AAC3B,SAAQ,OAAOI,IAAP,CAAYJ,OAAZ,KAAwB,QAAQI,IAAR,CAAaJ,OAAb,CAAxB,IAAiD,kEAAkEI,IAAlE,CAAuEJ,OAAvE,CAAjD,IAAoI,oEAAoEI,IAApE,CAAyEJ,OAAzE,CAApI,IAAyN,oEAAoEI,IAApE,CAAyEJ,OAAzE,CAAzN,IAA8S,wFAAwFI,IAAxF,CAA6FJ,OAA7F,CAA9S,IAAuZ,iIAAiII,IAAjI,CAAsIJ,OAAtI,CAAvZ,IAAyiB,6IAA6II,IAA7I,CAAkJJ,OAAlJ,CAAziB,IAAusB,oIAAoII,IAApI,CAAyIJ,OAAzI,CAAvsB,IAA41B,oJAAoJI,IAApJ,CAAyJJ,OAAzJ,CAA51B,IAAigC,8BAA8BI,IAA9B,CAAmCJ,OAAnC,CAAjgC,IAAgjC,8BAA8BI,IAA9B,CAAmCJ,OAAnC,CAAhjC,IAA+lC,0BAA0BI,IAA1B,CAA+BJ,OAA/B,CAAvmC;AAED;;AAEDK,MAAM,CAACC,OAAP,GAAiBN,OAAO,IAAI;AAC1B,MAAIN,QAAQ,CAACa,EAAT,GAAcH,IAAd,CAAmBJ,OAAnB,CAAJ,EAAiC,OAAOG,UAAU,CAACH,OAAD,CAAjB,CAAjC,KAAiE,IAAIN,QAAQ,GAAGU,IAAX,CAAgBJ,OAAhB,KAA4BA,OAAO,CAACQ,UAAR,CAAmB,GAAnB,CAAhC,EAAyD,OAAOT,UAAU,CAACC,OAAD,CAAjB;AAE1H,SAAO,KAAP;AACD,CAJD","sourcesContent":["const Netmask = require('netmask').Netmask;\nconst ip_regex = require('ip-regex');\n\nconst PRIVATE_IP_RANGES = ['0.0.0.0/8', '10.0.0.0/8', '100.64.0.0/10', '127.0.0.0/8', '169.254.0.0/16', '172.16.0.0/12', '192.0.0.0/24', '192.0.0.0/29', '192.0.0.8/32', '192.0.0.9/32', '192.0.0.10/32', '192.0.0.170/32', '192.0.0.171/32', '192.0.2.0/24', '192.31.196.0/24', '192.52.193.0/24', '192.88.99.0/24', '192.168.0.0/16', '192.175.48.0/24', '198.18.0.0/15', '198.51.100.0/24', '203.0.113.0/24', '240.0.0.0/4', '255.255.255.255/32'];\n\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new Netmask(ip_range));\n\nfunction ipv4_check(ip_addr) {\n  for (let r of NETMASK_RANGES) {\n    if (r.contains(ip_addr)) return true;\n  }\n\n  return false;\n}\n\nfunction ipv6_check(ip_addr) {\n  return (/^::$/.test(ip_addr) || /^::1$/.test(ip_addr) || /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) || /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) || /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr)\n  );\n}\n\nmodule.exports = ip_addr => {\n  if (ip_regex.v6().test(ip_addr)) return ipv6_check(ip_addr);else if (ip_regex().test(ip_addr) || ip_addr.startsWith('0')) return ipv4_check(ip_addr);\n\n  return false;\n};"]},"metadata":{},"sourceType":"script"}
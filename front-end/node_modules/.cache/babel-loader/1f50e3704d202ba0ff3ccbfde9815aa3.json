{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function* addAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive,\n      metadata\n    } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return addAll;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/pin/add-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","addAll","source","options","path","recursive","metadata","res","post","timeout","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","pin","ndjson","Pins","cid","parse"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,MAAjB,CAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,eAAW,MAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,KAAjB,IAAkDV,cAAc,CAACM,MAAD,CAAhE,EAA0E;AACxE,YAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEN,OAAO,CAACM,OADmB;AAEpCC,QAAAA,MAAM,EAAEP,OAAO,CAACO,MAFoB;AAGpCC,QAAAA,YAAY,EAAEd,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;AAE9BS,UAAAA,GAAG,EAAER,IAFyB;AAG9BC,UAAAA,SAH8B;AAI9BC,UAAAA,QAAQ,EAAEA,QAAQ,GAAGO,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAH,GAA8BS,SAJlB;AAK9BC,UAAAA,MAAM,EAAE;AALsB,SAAD,CAHK;AAUpCC,QAAAA,OAAO,EAAEd,OAAO,CAACc;AAVmB,OAApB,CAAlB;;AAaA,iBAAW,MAAMC,GAAjB,IAAwBX,GAAG,CAACY,MAAJ,EAAxB,EAAsC;AACpC,YAAID,GAAG,CAACE,IAAR,EAAc;AAAE;AACd,eAAK,MAAMC,GAAX,IAAkBH,GAAG,CAACE,IAAtB,EAA4B;AAC1B,kBAAM3B,GAAG,CAAC6B,KAAJ,CAAUD,GAAV,CAAN;AACD;;AACD;AACD;;AAED,cAAM5B,GAAG,CAAC6B,KAAJ,CAAUJ,GAAV,CAAN;AACD;AACF;AACF;;AACD,SAAOjB,MAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"]},"metadata":{},"sourceType":"script"}
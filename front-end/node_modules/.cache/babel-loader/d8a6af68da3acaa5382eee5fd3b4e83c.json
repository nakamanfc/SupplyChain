{"ast":null,"code":"'use strict';\n\nconst SortedMap = require('../utils/sorted-map');\n/**\n * @typedef {Object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {Object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\n\n\nconst DefaultTaskMerger = {\n  hasNewInfo() {\n    return false;\n  },\n\n  merge() {}\n\n};\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\n\nclass RequestQueue {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  constructor(taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger;\n    /** @type {SortedMap<string, PeerTasks>} */\n\n    this._byPeer = new SortedMap([], PeerTasks.compare);\n  }\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n\n\n  pushTasks(peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger);\n    }\n\n    peerTasks.pushTasks(tasks);\n\n    this._byPeer.set(peerId.toB58String(), peerTasks);\n  }\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   *\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {PopTaskResult}\n   */\n\n\n  popTasks(targetMinBytes) {\n    // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n    const peerTasks = this._head();\n\n    if (peerTasks === undefined) {\n      return {\n        tasks: [],\n        pendingSize: 0\n      };\n    }\n\n    const {\n      tasks,\n      pendingSize\n    } = peerTasks.popTasks(targetMinBytes);\n\n    if (tasks.length === 0) {\n      return {\n        tasks,\n        pendingSize\n      };\n    }\n\n    const peerId = peerTasks.peerId;\n\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toB58String());\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0);\n    }\n\n    return {\n      peerId,\n      tasks,\n      pendingSize\n    };\n  }\n  /**\n   * @private\n   * @returns {PeerTasks|undefined}\n   */\n\n\n  _head() {\n    // Shortcut\n    if (this._byPeer.size === 0) {\n      return undefined;\n    } // eslint-disable-next-line no-unreachable-loop\n\n\n    for (const [, v] of this._byPeer) {\n      return v;\n    }\n\n    return undefined;\n  }\n  /**\n   * Remove the task with the given topic for the given peer.\n   *\n   * @param {string} topic\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n\n\n  remove(topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    peerTasks && peerTasks.remove(topic);\n  }\n  /**\n   * Called when the tasks for the given peer complete.\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n\n\n  tasksDone(peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      return;\n    }\n\n    const i = this._byPeer.indexOf(peerId.toB58String());\n\n    for (const task of tasks) {\n      peerTasks.taskDone(task);\n    } // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n\n\n    this._byPeer.update(i);\n  }\n\n}\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\n\n\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor(peerId, taskMerger) {\n    this.peerId = peerId;\n    this._taskMerger = taskMerger;\n    this._activeTotalSize = 0;\n    this._pending = new PendingTasks();\n    this._active = new Set();\n  }\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n\n\n  pushTasks(tasks) {\n    for (const t of tasks) {\n      this._pushTask(t);\n    }\n  }\n  /**\n   * @private\n   * @param {Task} task\n   * @returns {void}\n   */\n\n\n  _pushTask(task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return;\n    } // If there is already a non-active (pending) task with this topic\n\n\n    const existingTask = this._pending.get(task.topic);\n\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority);\n      } // Merge the information from the new task into the existing task\n\n\n      this._taskMerger.merge(task, existingTask); // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n\n\n      return;\n    } // Push the new task onto the queue\n\n\n    this._pending.add(task);\n  }\n  /**\n   * Indicates whether the new task adds any more information over tasks that are\n   * already in the active task queue\n   *\n   * @private\n   * @param {Task} task\n   * @returns {boolean}\n   */\n\n\n  _taskHasMoreInfoThanActiveTasks(task) {\n    const tasksWithTopic = [];\n\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask);\n      }\n    } // No tasks with that topic, so the new task adds information\n\n\n    if (tasksWithTopic.length === 0) {\n      return true;\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n  }\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   *\n   * @param {number} targetMinBytes\n   * @returns {PopTaskResult}\n   */\n\n\n  popTasks(targetMinBytes) {\n    let size = 0;\n    const tasks = []; // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n\n    const pendingTasks = this._pending.tasks();\n\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i];\n      tasks.push(task);\n      size += task.size; // Move tasks from pending to active\n\n      this._pending.delete(task.topic);\n\n      this._activeTotalSize += task.size;\n\n      this._active.add(task);\n    }\n\n    return {\n      tasks,\n      pendingSize: this._pending.totalSize\n    };\n  }\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   *\n   * @param {Task} task\n   * @returns {void}\n   */\n\n\n  taskDone(task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size;\n\n      this._active.delete(task);\n    }\n  }\n  /**\n   * Remove pending tasks with the given topic\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n\n\n  remove(topic) {\n    this._pending.delete(topic);\n  }\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   *\n   * @returns {boolean}\n   */\n\n\n  isIdle() {\n    return this._pending.length === 0 && this._active.size === 0;\n  }\n  /**\n   * Compare PeerTasks\n   *\n   * @template Key\n   * @param {[Key, PeerTasks]} a\n   * @param {[Key, PeerTasks]} b\n   * @returns {number}\n   */\n\n\n  static compare(a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1;\n    }\n\n    if (b[1]._pending.length === 0) {\n      return -1;\n    } // If the amount of active work is the same\n\n\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length;\n    } // Choose the peer with the least amount of active work (\"keep peers busy\")\n\n\n    return a[1]._activeTotalSize - b[1]._activeTotalSize;\n  }\n\n}\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\n\n\nclass PendingTasks {\n  constructor() {\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare);\n  }\n\n  get length() {\n    return this._tasks.size;\n  }\n  /**\n   * Sum of the size of all pending tasks\n   *\n   * @type {number}\n   **/\n\n\n  get totalSize() {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n  }\n  /**\n   * @param {string} topic\n   * @returns {Task|void}\n   */\n\n\n  get(topic) {\n    return (this._tasks.get(topic) || {}).task;\n  }\n  /**\n   * @param {Task} task\n   */\n\n\n  add(task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    });\n  }\n  /**\n   * @param {string} topic\n   * @returns {void}\n   */\n\n\n  delete(topic) {\n    this._tasks.delete(topic);\n  } // All pending tasks, in priority order\n\n\n  tasks() {\n    return [...this._tasks.values()].map(i => i.task);\n  }\n  /**\n   * Update the priority of the task with the given topic, and update the order\n   *\n   * @param {string} topic\n   * @param {number} priority\n   * @returns {void}\n   **/\n\n\n  updatePriority(topic, priority) {\n    const obj = this._tasks.get(topic);\n\n    if (!obj) {\n      return;\n    }\n\n    const i = this._tasks.indexOf(topic);\n\n    obj.task.priority = priority;\n\n    this._tasks.update(i);\n  }\n  /**\n   * Sort by priority desc then FIFO\n   *\n   * @param {[string, PendingTask]} a\n   * @param {[string, PendingTask]} b\n   * @returns {number}\n   * @private\n   */\n\n\n  _compare(a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created;\n    } // Priority high -> low\n\n\n    return b[1].task.priority - a[1].task.priority;\n  }\n\n}\n\nmodule.exports = RequestQueue;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-bitswap/src/decision-engine/req-queue.js"],"names":["SortedMap","require","DefaultTaskMerger","hasNewInfo","merge","RequestQueue","constructor","taskMerger","_taskMerger","_byPeer","PeerTasks","compare","pushTasks","peerId","tasks","peerTasks","get","toB58String","set","popTasks","targetMinBytes","_head","undefined","pendingSize","length","isIdle","delete","update","size","v","remove","topic","tasksDone","i","indexOf","task","taskDone","_activeTotalSize","_pending","PendingTasks","_active","Set","t","_pushTask","_taskHasMoreInfoThanActiveTasks","existingTask","priority","updatePriority","add","tasksWithTopic","activeTask","push","pendingTasks","totalSize","has","a","b","_tasks","_compare","values","reduce","created","Date","now","map","obj","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,UAAU,GAAI;AACZ,WAAO,KAAP;AACD,GAHuB;;AAKxBC,EAAAA,KAAK,GAAI,CAAE;;AALa,CAA1B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;AACjB;AACF;AACA;AACEC,EAAAA,WAAW,CAAEC,UAAU,GAAGL,iBAAf,EAAkC;AAC3C,SAAKM,WAAL,GAAmBD,UAAnB;AACA;;AACA,SAAKE,OAAL,GAAe,IAAIT,SAAJ,CAAc,EAAd,EAAkBU,SAAS,CAACC,OAA5B,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAAEC,MAAF,EAAUC,KAAV,EAAiB;AACxB,QAAIC,SAAS,GAAG,KAAKN,OAAL,CAAaO,GAAb,CAAiBH,MAAM,CAACI,WAAP,EAAjB,CAAhB;;AAEA,QAAI,CAACF,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAG,IAAIL,SAAJ,CAAcG,MAAd,EAAsB,KAAKL,WAA3B,CAAZ;AACD;;AAEDO,IAAAA,SAAS,CAACH,SAAV,CAAoBE,KAApB;;AACA,SAAKL,OAAL,CAAaS,GAAb,CAAiBL,MAAM,CAACI,WAAP,EAAjB,EAAuCF,SAAvC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,QAAQ,CAAEC,cAAF,EAAkB;AACxB;AACA;AACA,UAAML,SAAS,GAAG,KAAKM,KAAL,EAAlB;;AACA,QAAIN,SAAS,KAAKO,SAAlB,EAA6B;AAC3B,aAAO;AAAER,QAAAA,KAAK,EAAE,EAAT;AAAaS,QAAAA,WAAW,EAAE;AAA1B,OAAP;AACD;;AAED,UAAM;AAAET,MAAAA,KAAF;AAASS,MAAAA;AAAT,QAAyBR,SAAS,CAACI,QAAV,CAAmBC,cAAnB,CAA/B;;AACA,QAAIN,KAAK,CAACU,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO;AAAEV,QAAAA,KAAF;AAASS,QAAAA;AAAT,OAAP;AACD;;AAED,UAAMV,MAAM,GAAGE,SAAS,CAACF,MAAzB;;AACA,QAAIE,SAAS,CAACU,MAAV,EAAJ,EAAwB;AACtB;AACA,WAAKhB,OAAL,CAAaiB,MAAb,CAAoBb,MAAM,CAACI,WAAP,EAApB;AACD,KAHD,MAGO;AACL;AACA;AACA,WAAKR,OAAL,CAAakB,MAAb,CAAoB,CAApB;AACD;;AAED,WAAO;AACLd,MAAAA,MADK;AACGC,MAAAA,KADH;AACUS,MAAAA;AADV,KAAP;AAGD;AAED;AACF;AACA;AACA;;;AACEF,EAAAA,KAAK,GAAI;AACP;AACA,QAAI,KAAKZ,OAAL,CAAamB,IAAb,KAAsB,CAA1B,EAA6B;AAC3B,aAAON,SAAP;AACD,KAJM,CAMP;;;AACA,SAAK,MAAM,GAAGO,CAAH,CAAX,IAAoB,KAAKpB,OAAzB,EAAkC;AAChC,aAAOoB,CAAP;AACD;;AAED,WAAOP,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEQ,EAAAA,MAAM,CAAEC,KAAF,EAASlB,MAAT,EAAiB;AACrB,UAAME,SAAS,GAAG,KAAKN,OAAL,CAAaO,GAAb,CAAiBH,MAAM,CAACI,WAAP,EAAjB,CAAlB;;AACAF,IAAAA,SAAS,IAAIA,SAAS,CAACe,MAAV,CAAiBC,KAAjB,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAAEnB,MAAF,EAAUC,KAAV,EAAiB;AACxB,UAAMC,SAAS,GAAG,KAAKN,OAAL,CAAaO,GAAb,CAAiBH,MAAM,CAACI,WAAP,EAAjB,CAAlB;;AACA,QAAI,CAACF,SAAL,EAAgB;AACd;AACD;;AAED,UAAMkB,CAAC,GAAG,KAAKxB,OAAL,CAAayB,OAAb,CAAqBrB,MAAM,CAACI,WAAP,EAArB,CAAV;;AACA,SAAK,MAAMkB,IAAX,IAAmBrB,KAAnB,EAA0B;AACxBC,MAAAA,SAAS,CAACqB,QAAV,CAAmBD,IAAnB;AACD,KATuB,CAWxB;AACA;AACA;;;AACA,SAAK1B,OAAL,CAAakB,MAAb,CAAoBM,CAApB;AACD;;AAtHgB;AAyHnB;AACA;AACA;;;AACA,MAAMvB,SAAN,CAAgB;AACd;AACF;AACA;AACA;AACEJ,EAAAA,WAAW,CAAEO,MAAF,EAAUN,UAAV,EAAsB;AAC/B,SAAKM,MAAL,GAAcA,MAAd;AACA,SAAKL,WAAL,GAAmBD,UAAnB;AACA,SAAK8B,gBAAL,GAAwB,CAAxB;AACA,SAAKC,QAAL,GAAgB,IAAIC,YAAJ,EAAhB;AACA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE7B,EAAAA,SAAS,CAAEE,KAAF,EAAS;AAChB,SAAK,MAAM4B,CAAX,IAAgB5B,KAAhB,EAAuB;AACrB,WAAK6B,SAAL,CAAeD,CAAf;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AAEEC,EAAAA,SAAS,CAAER,IAAF,EAAQ;AACf;AACA;AACA,QAAI,CAAC,KAAKS,+BAAL,CAAqCT,IAArC,CAAL,EAAiD;AAC/C;AACD,KALc,CAOf;;;AACA,UAAMU,YAAY,GAAG,KAAKP,QAAL,CAActB,GAAd,CAAkBmB,IAAI,CAACJ,KAAvB,CAArB;;AACA,QAAIc,YAAJ,EAAkB;AAChB;AACA,UAAIV,IAAI,CAACW,QAAL,GAAgBD,YAAY,CAACC,QAAjC,EAA2C;AACzC;AACA,aAAKR,QAAL,CAAcS,cAAd,CAA6BZ,IAAI,CAACJ,KAAlC,EAAyCI,IAAI,CAACW,QAA9C;AACD,OALe,CAOhB;;;AACA,WAAKtC,WAAL,CAAiBJ,KAAjB,CAAuB+B,IAAvB,EAA6BU,YAA7B,EARgB,CAUhB;AACA;;;AACA;AACD,KAtBc,CAwBf;;;AACA,SAAKP,QAAL,CAAcU,GAAd,CAAkBb,IAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,+BAA+B,CAAET,IAAF,EAAQ;AACrC,UAAMc,cAAc,GAAG,EAAvB;;AACA,SAAK,MAAMC,UAAX,IAAyB,KAAKV,OAA9B,EAAuC;AACrC,UAAIU,UAAU,CAACnB,KAAX,KAAqBI,IAAI,CAACJ,KAA9B,EAAqC;AACnCkB,QAAAA,cAAc,CAACE,IAAf,CAAoBD,UAApB;AACD;AACF,KANoC,CAQrC;;;AACA,QAAID,cAAc,CAACzB,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,WAAO,KAAKhB,WAAL,CAAiBL,UAAjB,CAA4BgC,IAA5B,EAAkCc,cAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE9B,EAAAA,QAAQ,CAAEC,cAAF,EAAkB;AACxB,QAAIQ,IAAI,GAAG,CAAX;AACA,UAAMd,KAAK,GAAG,EAAd,CAFwB,CAIxB;AACA;;AACA,UAAMsC,YAAY,GAAG,KAAKd,QAAL,CAAcxB,KAAd,EAArB;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,YAAY,CAAC5B,MAAjB,IAA2BI,IAAI,GAAGR,cAAlD,EAAkEa,CAAC,EAAnE,EAAuE;AACrE,YAAME,IAAI,GAAGiB,YAAY,CAACnB,CAAD,CAAzB;AACAnB,MAAAA,KAAK,CAACqC,IAAN,CAAWhB,IAAX;AACAP,MAAAA,IAAI,IAAIO,IAAI,CAACP,IAAb,CAHqE,CAKrE;;AACA,WAAKU,QAAL,CAAcZ,MAAd,CAAqBS,IAAI,CAACJ,KAA1B;;AACA,WAAKM,gBAAL,IAAyBF,IAAI,CAACP,IAA9B;;AACA,WAAKY,OAAL,CAAaQ,GAAb,CAAiBb,IAAjB;AACD;;AAED,WAAO;AACLrB,MAAAA,KADK;AACES,MAAAA,WAAW,EAAE,KAAKe,QAAL,CAAce;AAD7B,KAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEjB,EAAAA,QAAQ,CAAED,IAAF,EAAQ;AACd,QAAI,KAAKK,OAAL,CAAac,GAAb,CAAiBnB,IAAjB,CAAJ,EAA4B;AAC1B,WAAKE,gBAAL,IAAyBF,IAAI,CAACP,IAA9B;;AACA,WAAKY,OAAL,CAAad,MAAb,CAAoBS,IAApB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEL,EAAAA,MAAM,CAAEC,KAAF,EAAS;AACb,SAAKO,QAAL,CAAcZ,MAAd,CAAqBK,KAArB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEN,EAAAA,MAAM,GAAI;AACR,WAAO,KAAKa,QAAL,CAAcd,MAAd,KAAyB,CAAzB,IAA8B,KAAKgB,OAAL,CAAaZ,IAAb,KAAsB,CAA3D;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,SAAPjB,OAAO,CAAE4C,CAAF,EAAKC,CAAL,EAAQ;AACpB;AACA,QAAID,CAAC,CAAC,CAAD,CAAD,CAAKjB,QAAL,CAAcd,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,aAAO,CAAP;AACD;;AACD,QAAIgC,CAAC,CAAC,CAAD,CAAD,CAAKlB,QAAL,CAAcd,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,aAAO,CAAC,CAAR;AACD,KAPmB,CASpB;;;AACA,QAAI+B,CAAC,CAAC,CAAD,CAAD,CAAKlB,gBAAL,KAA0BmB,CAAC,CAAC,CAAD,CAAD,CAAKnB,gBAAnC,EAAqD;AACnD;AACA,aAAOmB,CAAC,CAAC,CAAD,CAAD,CAAKlB,QAAL,CAAcd,MAAd,GAAuB+B,CAAC,CAAC,CAAD,CAAD,CAAKjB,QAAL,CAAcd,MAA5C;AACD,KAbmB,CAepB;;;AACA,WAAO+B,CAAC,CAAC,CAAD,CAAD,CAAKlB,gBAAL,GAAwBmB,CAAC,CAAC,CAAD,CAAD,CAAKnB,gBAApC;AACD;;AA1Ka;AA6KhB;AACA;AACA;;;AACA,MAAME,YAAN,CAAmB;AACjBjC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKmD,MAAL,GAAc,IAAIzD,SAAJ,CAAc,EAAd,EAAkB,KAAK0D,QAAvB,CAAd;AACD;;AAES,MAANlC,MAAM,GAAI;AACZ,WAAO,KAAKiC,MAAL,CAAY7B,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,MAATyB,SAAS,GAAI;AACf,WAAO,CAAC,GAAG,KAAKI,MAAL,CAAYE,MAAZ,EAAJ,EAA0BC,MAA1B,CAAiC,CAACL,CAAD,EAAIb,CAAJ,KAAUa,CAAC,GAAGb,CAAC,CAACP,IAAF,CAAOP,IAAtD,EAA4D,CAA5D,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEZ,EAAAA,GAAG,CAAEe,KAAF,EAAS;AACV,WAAO,CAAC,KAAK0B,MAAL,CAAYzC,GAAZ,CAAgBe,KAAhB,KAA0B,EAA3B,EAA+BI,IAAtC;AACD;AAED;AACF;AACA;;;AACEa,EAAAA,GAAG,CAAEb,IAAF,EAAQ;AACT,SAAKsB,MAAL,CAAYvC,GAAZ,CAAgBiB,IAAI,CAACJ,KAArB,EAA4B;AAC1B8B,MAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EADiB;AAE1B5B,MAAAA;AAF0B,KAA5B;AAID;AAED;AACF;AACA;AACA;;;AACET,EAAAA,MAAM,CAAEK,KAAF,EAAS;AACb,SAAK0B,MAAL,CAAY/B,MAAZ,CAAmBK,KAAnB;AACD,GA3CgB,CA6CjB;;;AACAjB,EAAAA,KAAK,GAAI;AACP,WAAO,CAAC,GAAG,KAAK2C,MAAL,CAAYE,MAAZ,EAAJ,EAA0BK,GAA1B,CAA8B/B,CAAC,IAAIA,CAAC,CAACE,IAArC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,cAAc,CAAEhB,KAAF,EAASe,QAAT,EAAmB;AAC/B,UAAMmB,GAAG,GAAG,KAAKR,MAAL,CAAYzC,GAAZ,CAAgBe,KAAhB,CAAZ;;AACA,QAAI,CAACkC,GAAL,EAAU;AACR;AACD;;AAED,UAAMhC,CAAC,GAAG,KAAKwB,MAAL,CAAYvB,OAAZ,CAAoBH,KAApB,CAAV;;AACAkC,IAAAA,GAAG,CAAC9B,IAAJ,CAASW,QAAT,GAAoBA,QAApB;;AACA,SAAKW,MAAL,CAAY9B,MAAZ,CAAmBM,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEyB,EAAAA,QAAQ,CAAEH,CAAF,EAAKC,CAAL,EAAQ;AACd,QAAID,CAAC,CAAC,CAAD,CAAD,CAAKpB,IAAL,CAAUW,QAAV,KAAuBU,CAAC,CAAC,CAAD,CAAD,CAAKrB,IAAL,CAAUW,QAArC,EAA+C;AAC7C;AACA,aAAOS,CAAC,CAAC,CAAD,CAAD,CAAKM,OAAL,GAAeL,CAAC,CAAC,CAAD,CAAD,CAAKK,OAA3B;AACD,KAJa,CAKd;;;AACA,WAAOL,CAAC,CAAC,CAAD,CAAD,CAAKrB,IAAL,CAAUW,QAAV,GAAqBS,CAAC,CAAC,CAAD,CAAD,CAAKpB,IAAL,CAAUW,QAAtC;AACD;;AAnFgB;;AAsFnBoB,MAAM,CAACC,OAAP,GAAiB9D,YAAjB","sourcesContent":["'use strict'\n\nconst SortedMap = require('../utils/sorted-map')\n\n/**\n * @typedef {Object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {Object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\nconst DefaultTaskMerger = {\n  hasNewInfo () {\n    return false\n  },\n\n  merge () {}\n}\n\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nclass RequestQueue {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  constructor (taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger\n    /** @type {SortedMap<string, PeerTasks>} */\n    this._byPeer = new SortedMap([], PeerTasks.compare)\n  }\n\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String())\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger)\n    }\n\n    peerTasks.pushTasks(tasks)\n    this._byPeer.set(peerId.toB58String(), peerTasks)\n  }\n\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   *\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n    const peerTasks = this._head()\n    if (peerTasks === undefined) {\n      return { tasks: [], pendingSize: 0 }\n    }\n\n    const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes)\n    if (tasks.length === 0) {\n      return { tasks, pendingSize }\n    }\n\n    const peerId = peerTasks.peerId\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toB58String())\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0)\n    }\n\n    return {\n      peerId, tasks, pendingSize\n    }\n  }\n\n  /**\n   * @private\n   * @returns {PeerTasks|undefined}\n   */\n  _head () {\n    // Shortcut\n    if (this._byPeer.size === 0) {\n      return undefined\n    }\n\n    // eslint-disable-next-line no-unreachable-loop\n    for (const [, v] of this._byPeer) {\n      return v\n    }\n\n    return undefined\n  }\n\n  /**\n   * Remove the task with the given topic for the given peer.\n   *\n   * @param {string} topic\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  remove (topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String())\n    peerTasks && peerTasks.remove(topic)\n  }\n\n  /**\n   * Called when the tasks for the given peer complete.\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  tasksDone (peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String())\n    if (!peerTasks) {\n      return\n    }\n\n    const i = this._byPeer.indexOf(peerId.toB58String())\n    for (const task of tasks) {\n      peerTasks.taskDone(task)\n    }\n\n    // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n    this._byPeer.update(i)\n  }\n}\n\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor (peerId, taskMerger) {\n    this.peerId = peerId\n    this._taskMerger = taskMerger\n    this._activeTotalSize = 0\n    this._pending = new PendingTasks()\n    this._active = new Set()\n  }\n\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (tasks) {\n    for (const t of tasks) {\n      this._pushTask(t)\n    }\n  }\n\n  /**\n   * @private\n   * @param {Task} task\n   * @returns {void}\n   */\n\n  _pushTask (task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return\n    }\n\n    // If there is already a non-active (pending) task with this topic\n    const existingTask = this._pending.get(task.topic)\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority)\n      }\n\n      // Merge the information from the new task into the existing task\n      this._taskMerger.merge(task, existingTask)\n\n      // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n      return\n    }\n\n    // Push the new task onto the queue\n    this._pending.add(task)\n  }\n\n  /**\n   * Indicates whether the new task adds any more information over tasks that are\n   * already in the active task queue\n   *\n   * @private\n   * @param {Task} task\n   * @returns {boolean}\n   */\n  _taskHasMoreInfoThanActiveTasks (task) {\n    const tasksWithTopic = []\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask)\n      }\n    }\n\n    // No tasks with that topic, so the new task adds information\n    if (tasksWithTopic.length === 0) {\n      return true\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic)\n  }\n\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   *\n   * @param {number} targetMinBytes\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    let size = 0\n    const tasks = []\n\n    // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n    const pendingTasks = this._pending.tasks()\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i]\n      tasks.push(task)\n      size += task.size\n\n      // Move tasks from pending to active\n      this._pending.delete(task.topic)\n      this._activeTotalSize += task.size\n      this._active.add(task)\n    }\n\n    return {\n      tasks, pendingSize: this._pending.totalSize\n    }\n  }\n\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   *\n   * @param {Task} task\n   * @returns {void}\n   */\n  taskDone (task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size\n      this._active.delete(task)\n    }\n  }\n\n  /**\n   * Remove pending tasks with the given topic\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n  remove (topic) {\n    this._pending.delete(topic)\n  }\n\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   *\n   * @returns {boolean}\n   */\n  isIdle () {\n    return this._pending.length === 0 && this._active.size === 0\n  }\n\n  /**\n   * Compare PeerTasks\n   *\n   * @template Key\n   * @param {[Key, PeerTasks]} a\n   * @param {[Key, PeerTasks]} b\n   * @returns {number}\n   */\n  static compare (a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1\n    }\n    if (b[1]._pending.length === 0) {\n      return -1\n    }\n\n    // If the amount of active work is the same\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length\n    }\n\n    // Choose the peer with the least amount of active work (\"keep peers busy\")\n    return a[1]._activeTotalSize - b[1]._activeTotalSize\n  }\n}\n\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n  constructor () {\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare)\n  }\n\n  get length () {\n    return this._tasks.size\n  }\n\n  /**\n   * Sum of the size of all pending tasks\n   *\n   * @type {number}\n   **/\n  get totalSize () {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0)\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {Task|void}\n   */\n  get (topic) {\n    return (this._tasks.get(topic) || {}).task\n  }\n\n  /**\n   * @param {Task} task\n   */\n  add (task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    })\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {void}\n   */\n  delete (topic) {\n    this._tasks.delete(topic)\n  }\n\n  // All pending tasks, in priority order\n  tasks () {\n    return [...this._tasks.values()].map(i => i.task)\n  }\n\n  /**\n   * Update the priority of the task with the given topic, and update the order\n   *\n   * @param {string} topic\n   * @param {number} priority\n   * @returns {void}\n   **/\n  updatePriority (topic, priority) {\n    const obj = this._tasks.get(topic)\n    if (!obj) {\n      return\n    }\n\n    const i = this._tasks.indexOf(topic)\n    obj.task.priority = priority\n    this._tasks.update(i)\n  }\n\n  /**\n   * Sort by priority desc then FIFO\n   *\n   * @param {[string, PendingTask]} a\n   * @param {[string, PendingTask]} b\n   * @returns {number}\n   * @private\n   */\n  _compare (a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created\n    }\n    // Priority high -> low\n    return b[1].task.priority - a[1].task.priority\n  }\n}\n\nmodule.exports = RequestQueue\n"]},"metadata":{},"sourceType":"script"}
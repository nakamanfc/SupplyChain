{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\n\n\nmodule.exports = ({\n  codecs,\n  hashers,\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  async function put(block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0;\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256');\n      const hash = await hasher.digest(block);\n      const codec = await codecs.getCodec(codecName);\n      const cid = CID.create(cidVersion, codec.code, hash);\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        });\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/block/put.js"],"names":["CID","require","withTimeoutOption","module","exports","codecs","hashers","repo","preload","put","block","options","release","pin","gcLock","readLock","cidVersion","version","codecName","format","hasher","getHasher","mhtype","hash","digest","codec","getCodec","cid","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA,IAAnB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACvD;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,KAApB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,GAAc,MAAMN,IAAI,CAACO,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AAEA,QAAI;AACF,YAAMC,UAAU,GAAGL,OAAO,CAACM,OAAR,IAAmB,IAAnB,GAA0BN,OAAO,CAACM,OAAlC,GAA4C,CAA/D;AACA,YAAMC,SAAS,GAAGP,OAAO,CAACQ,MAAR,KAAmBH,UAAU,KAAK,CAAf,GAAmB,QAAnB,GAA8B,KAAjD,CAAlB;AAEA,YAAMI,MAAM,GAAG,MAAMd,OAAO,CAACe,SAAR,CAAkBV,OAAO,CAACW,MAAR,IAAkB,UAApC,CAArB;AACA,YAAMC,IAAI,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcd,KAAd,CAAnB;AACA,YAAMe,KAAK,GAAG,MAAMpB,MAAM,CAACqB,QAAP,CAAgBR,SAAhB,CAApB;AACA,YAAMS,GAAG,GAAG3B,GAAG,CAAC4B,MAAJ,CAAWZ,UAAX,EAAuBS,KAAK,CAACI,IAA7B,EAAmCN,IAAnC,CAAZ;AAEA,YAAMhB,IAAI,CAACuB,MAAL,CAAYrB,GAAZ,CAAgBkB,GAAhB,EAAqBjB,KAArB,EAA4B;AAChCqB,QAAAA,MAAM,EAAEpB,OAAO,CAACoB;AADgB,OAA5B,CAAN;;AAIA,UAAIpB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACmB,GAAD,CAAP;AACD;;AAED,UAAIhB,OAAO,CAACE,GAAR,KAAgB,IAApB,EAA0B;AACxB,cAAMN,IAAI,CAACyB,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,EAA8B;AAClCI,UAAAA,MAAM,EAAEpB,OAAO,CAACoB;AADkB,SAA9B,CAAN;AAGD;;AAED,aAAOJ,GAAP;AACD,KAxBD,SAwBU;AACR,UAAIf,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;AACF;AACF;;AAED,SAAOV,iBAAiB,CAACO,GAAD,CAAxB;AACD,CAvCD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nmodule.exports = ({ codecs, hashers, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"script"}
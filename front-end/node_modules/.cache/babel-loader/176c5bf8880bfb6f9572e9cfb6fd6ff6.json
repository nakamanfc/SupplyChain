{"ast":null,"code":"'use strict';\n\nconst IpnsPubsubDatastore = require('../../../ipns/routing/pubsub-datastore');\n\nconst errcode = require('err-code');\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns')} ipns\n * @param {ExperimentalOptions} [options]\n */\n\n\nexports.getPubsubRouting = (ipns, options) => {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing;\n  } // Find in tiered\n\n\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore);\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/name/pubsub/utils.js"],"names":["IpnsPubsubDatastore","require","errcode","exports","getPubsubRouting","ipns","options","ipnsPubsub","Error","routing","pubsub","stores","find","s"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,wCAAD,CAAnC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,gBAAR,GAA2B,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC5C,MAAI,CAACD,IAAD,IAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,UAArB,CAAb,EAA+C;AAC7C,UAAML,OAAO,CAAC,IAAIM,KAAJ,CAAU,sCAAV,CAAD,EAAoD,6BAApD,CAAb;AACD,GAH2C,CAK5C;;;AACA,MAAIH,IAAI,CAACI,OAAL,YAAwBT,mBAA5B,EAAiD;AAC/C,WAAOK,IAAI,CAACI,OAAZ;AACD,GAR2C,CAU5C;;;AACA,QAAMC,MAAM,GAAG,CAACL,IAAI,CAACI,OAAL,CAAaE,MAAb,IAAuB,EAAxB,EAA4BC,IAA5B,CAAiCC,CAAC,IAAIA,CAAC,YAAYb,mBAAnD,CAAf;;AAEA,MAAI,CAACU,MAAL,EAAa;AACX,UAAMR,OAAO,CAAC,IAAIM,KAAJ,CAAU,iCAAV,CAAD,EAA+C,gCAA/C,CAAb;AACD;;AAED,SAAOE,MAAP;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst IpnsPubsubDatastore = require('../../../ipns/routing/pubsub-datastore')\nconst errcode = require('err-code')\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns')} ipns\n * @param {ExperimentalOptions} [options]\n */\nexports.getPubsubRouting = (ipns, options) => {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst loadMfsRoot = require('./with-mfs-root');\n\nconst toPathComponents = require('./to-path-components');\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst IPFS_PREFIX = 'ipfs';\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\nconst toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options);\n  /** @type {MfsPath} */\n  // @ts-ignore fields get set later\n\n  let output = {\n    entryType: 'file'\n  };\n  let ipfsPath = '';\n\n  if (path instanceof CID) {\n    ipfsPath = `/ipfs/${path}`;\n  } else {\n    ipfsPath = path;\n  }\n\n  ipfsPath = ipfsPath.trim();\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/');\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH');\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);\n  }\n\n  const pathComponents = toPathComponents(ipfsPath);\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory;\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`;\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`;\n    } // @ts-ignore fields being set\n\n\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    };\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`;\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`; // @ts-ignore fields being set\n\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    };\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path;\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options);\n    output.cid = res.cid;\n    output.mfsPath = `/ipfs/${res.path}`;\n    output.entryType = res.type;\n    output.content = res.content;\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs;\n    }\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n  }\n\n  output.exists = Boolean(output.cid);\n  return output;\n};\n\nmodule.exports = toMfsPath;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js"],"names":["loadMfsRoot","require","toPathComponents","exporter","errCode","CID","IPFS_PREFIX","toMfsPath","context","path","options","root","output","entryType","ipfsPath","trim","replace","endsWith","length","substring","Error","pathComponents","mfsDirectory","join","slice","type","depth","mfsPath","parts","name","cidPath","res","repo","blocks","cid","content","unixfs","err","code","exists","Boolean","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst loadMfsRoot = require('./with-mfs-root')\nconst toPathComponents = require('./to-path-components')\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\nconst IPFS_PREFIX = 'ipfs'\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nconst toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options)\n\n  /** @type {MfsPath} */\n  // @ts-ignore fields get set later\n  let output = {\n    entryType: 'file'\n  }\n\n  let ipfsPath = ''\n\n  if (path instanceof CID) {\n    ipfsPath = `/ipfs/${path}`\n  } else {\n    ipfsPath = path\n  }\n\n  ipfsPath = ipfsPath.trim()\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/')\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH')\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  const pathComponents = toPathComponents(ipfsPath)\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n    }\n\n    // @ts-ignore fields being set\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n\n    // @ts-ignore fields being set\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options)\n\n    output.cid = res.cid\n    output.mfsPath = `/ipfs/${res.path}`\n    output.entryType = res.type\n    output.content = res.content\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs\n    }\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  output.exists = Boolean(output.cid)\n\n  return output\n}\n\nmodule.exports = toMfsPath\n"]},"metadata":{},"sourceType":"script"}
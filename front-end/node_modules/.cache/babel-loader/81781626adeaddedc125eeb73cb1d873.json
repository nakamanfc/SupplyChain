{"ast":null,"code":"'use strict';\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizeCidPath,\n  mapFile\n} = require('../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  async function* ls(ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath);\n    const pathComponents = legacyPath.split('/');\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]));\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options);\n\n    if (file.type === 'file') {\n      yield mapFile(file);\n      return;\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n  }\n\n  return withTimeoutOption(ls);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/ls.js"],"names":["exporter","require","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","module","exports","repo","preload","ls","ipfsPath","options","legacyPath","pathComponents","split","parse","ipfsPathOrCid","asCID","file","blocks","type","child","content","Error"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAAgCH,OAAO,CAAC,UAAD,CAA7C;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAUL,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC5C;AACF;AACA;AACE,kBAAiBC,EAAjB,CAAqBC,QAArB,EAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC3C,UAAMC,UAAU,GAAGX,gBAAgB,CAACS,QAAD,CAAnC;AACA,UAAMG,cAAc,GAAGD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAvB;;AAEA,QAAIH,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACJ,GAAG,CAACW,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;AACD;;AAED,UAAMG,aAAa,GAAGZ,GAAG,CAACa,KAAJ,CAAUL,UAAV,KAAyBA,UAA/C;AACA,UAAMM,IAAI,GAAG,MAAMpB,QAAQ,CAACkB,aAAD,EAAgBT,IAAI,CAACY,MAArB,EAA6BR,OAA7B,CAA3B;;AAEA,QAAIO,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxB,YAAMlB,OAAO,CAACgB,IAAD,CAAb;AACA;AACD;;AAED,QAAIA,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAW,MAAMC,KAAjB,IAA0BH,IAAI,CAACI,OAAL,EAA1B,EAA0C;AACxC,cAAMpB,OAAO,CAACmB,KAAD,CAAb;AACD;;AAED;AACD;;AAED,UAAMrB,OAAO,CAAC,IAAIuB,KAAJ,CAAW,uBAAsBL,IAAI,CAACE,IAAK,EAA3C,CAAD,EAAgD,yBAAhD,CAAb;AACD;;AAED,SAAOjB,iBAAiB,CAACM,EAAD,CAAxB;AACD,CAhCD","sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IK = void 0;\n\nconst buffer_1 = require(\"buffer\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_handshake_1 = require(\"./abstract-handshake\");\n\nclass IK extends abstract_handshake_1.AbstractHandshake {\n  initSession(initiator, prologue, s, rs) {\n    const psk = this.createEmptyKey();\n    let hs;\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    };\n  }\n\n  sendMessage(session, message) {\n    let messageBuffer;\n\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message);\n    } else if (session.mc === 1) {\n      const {\n        messageBuffer: mb,\n        h,\n        cs1,\n        cs2\n      } = this.writeMessageB(session.hs, message);\n      messageBuffer = mb;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error('CS1 (cipher state) is not defined');\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error('CS2 (cipher state) is not defined');\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error('Session invalid.');\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  recvMessage(session, message) {\n    let plaintext = buffer_1.Buffer.alloc(0);\n    let valid = false;\n\n    if (session.mc === 0) {\n      ({\n        plaintext,\n        valid\n      } = this.readMessageA(session.hs, message));\n    }\n\n    if (session.mc === 1) {\n      const {\n        plaintext: pt,\n        valid: v,\n        h,\n        cs1,\n        cs2\n      } = this.readMessageB(session.hs, message);\n      plaintext = pt;\n      valid = v;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n\n    session.mc++;\n    return {\n      plaintext,\n      valid\n    };\n  }\n\n  writeMessageA(hs, payload) {\n    hs.e = utils_1.generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const spk = buffer_1.Buffer.from(hs.s.publicKey);\n    const ns = this.encryptAndHash(hs.ss, spk);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  writeMessageB(hs, payload) {\n    hs.e = utils_1.generateKeypair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ns = this.createEmptyKey();\n    const messageBuffer = {\n      ne,\n      ns,\n      ciphertext\n    };\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      messageBuffer,\n      cs1,\n      cs2,\n      h: hs.ss.h\n    };\n  }\n\n  readMessageA(hs, message) {\n    if (utils_1.isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {\n      plaintext: ns,\n      valid: valid1\n    } = this.decryptAndHash(hs.ss, message.ns);\n\n    if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n    const {\n      plaintext,\n      valid: valid2\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {\n      plaintext,\n      valid: valid1 && valid2\n    };\n  }\n\n  readMessageB(hs, message) {\n    if (utils_1.isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n\n    if (!hs.e) {\n      throw new Error('Handshake state should contain ephemeral key by now.');\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const {\n      plaintext,\n      valid\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      h: hs.ss.h,\n      valid,\n      plaintext,\n      cs1,\n      cs2\n    };\n  }\n\n  initializeInitiator(prologue, s, rs, psk) {\n    const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, rs);\n    const re = buffer_1.Buffer.alloc(32);\n    return {\n      ss,\n      s,\n      rs,\n      re,\n      psk\n    };\n  }\n\n  initializeResponder(prologue, s, rs, psk) {\n    const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    this.mixHash(ss, s.publicKey);\n    const re = buffer_1.Buffer.alloc(32);\n    return {\n      ss,\n      s,\n      rs,\n      re,\n      psk\n    };\n  }\n\n}\n\nexports.IK = IK;","map":{"version":3,"sources":["../../../src/handshakes/ik.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IK = void 0;\nconst buffer_1 = require(\"buffer\");\nconst utils_1 = require(\"../utils\");\nconst abstract_handshake_1 = require(\"./abstract-handshake\");\nclass IK extends abstract_handshake_1.AbstractHandshake {\n    initSession(initiator, prologue, s, rs) {\n        const psk = this.createEmptyKey();\n        let hs;\n        if (initiator) {\n            hs = this.initializeInitiator(prologue, s, rs, psk);\n        }\n        else {\n            hs = this.initializeResponder(prologue, s, rs, psk);\n        }\n        return {\n            hs,\n            i: initiator,\n            mc: 0\n        };\n    }\n    sendMessage(session, message) {\n        let messageBuffer;\n        if (session.mc === 0) {\n            messageBuffer = this.writeMessageA(session.hs, message);\n        }\n        else if (session.mc === 1) {\n            const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);\n            messageBuffer = mb;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        else if (session.mc > 1) {\n            if (session.i) {\n                if (!session.cs1) {\n                    throw new Error('CS1 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs1, message);\n            }\n            else {\n                if (!session.cs2) {\n                    throw new Error('CS2 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs2, message);\n            }\n        }\n        else {\n            throw new Error('Session invalid.');\n        }\n        session.mc++;\n        return messageBuffer;\n    }\n    recvMessage(session, message) {\n        let plaintext = buffer_1.Buffer.alloc(0);\n        let valid = false;\n        if (session.mc === 0) {\n            ({ plaintext, valid } = this.readMessageA(session.hs, message));\n        }\n        if (session.mc === 1) {\n            const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);\n            plaintext = pt;\n            valid = v;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        session.mc++;\n        return { plaintext, valid };\n    }\n    writeMessageA(hs, payload) {\n        hs.e = utils_1.generateKeypair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const spk = buffer_1.Buffer.from(hs.s.publicKey);\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageB(hs, payload) {\n        hs.e = utils_1.generateKeypair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        const ns = this.createEmptyKey();\n        const messageBuffer = { ne, ns, ciphertext };\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { messageBuffer, cs1, cs2, h: hs.ss.h };\n    }\n    readMessageA(hs, message) {\n        if (utils_1.isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        return { plaintext, valid: (valid1 && valid2) };\n    }\n    readMessageB(hs, message) {\n        if (utils_1.isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        if (!hs.e) {\n            throw new Error('Handshake state should contain ephemeral key by now.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const { plaintext, valid } = this.decryptAndHash(hs.ss, message.ciphertext);\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, valid, plaintext, cs1, cs2 };\n    }\n    initializeInitiator(prologue, s, rs, psk) {\n        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        this.mixHash(ss, rs);\n        const re = buffer_1.Buffer.alloc(32);\n        return { ss, s, rs, re, psk };\n    }\n    initializeResponder(prologue, s, rs, psk) {\n        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        this.mixHash(ss, s.publicKey);\n        const re = buffer_1.Buffer.alloc(32);\n        return { ss, s, rs, re, psk };\n    }\n}\nexports.IK = IK;\n//# sourceMappingURL=ik.js.map"]},"metadata":{},"sourceType":"script"}
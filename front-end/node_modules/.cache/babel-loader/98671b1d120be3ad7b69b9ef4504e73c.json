{"ast":null,"code":"'use strict';\n\nconst createPublishAPI = require('./publish');\n\nconst createResolveAPI = require('./resolve');\n\nconst PubSubAPI = require('./pubsub');\n\nclass NameAPI {\n  /**\n   * @param {Object} config\n   * @param {import('../ipns')} config.ipns\n   * @param {import('peer-id')} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-core-types/src/root').API[\"isOnline\"]} config.isOnline\n   * @param {import('libp2p/src/keychain')} config.keychain\n   * @param {import('ipfs-core-types/src/root').API[\"dns\"]} config.dns\n   */\n  constructor({\n    dns,\n    ipns,\n    repo,\n    codecs,\n    peerId,\n    isOnline,\n    keychain,\n    options\n  }) {\n    this.publish = createPublishAPI({\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain\n    });\n    this.resolve = createResolveAPI({\n      dns,\n      ipns,\n      peerId,\n      isOnline,\n      options\n    });\n    this.pubsub = new PubSubAPI({\n      ipns,\n      options\n    });\n  }\n\n}\n\nmodule.exports = NameAPI;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/name/index.js"],"names":["createPublishAPI","require","createResolveAPI","PubSubAPI","NameAPI","constructor","dns","ipns","repo","codecs","peerId","isOnline","keychain","options","publish","resolve","pubsub","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,UAAD,CAAzB;;AAEA,MAAMG,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA,MAA3B;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA,QAA7C;AAAuDC,IAAAA;AAAvD,GAAF,EAAoE;AAC7E,SAAKC,OAAL,GAAed,gBAAgB,CAAC;AAAEO,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,MAAtB;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,KAAD,CAA/B;AACA,SAAKG,OAAL,GAAeb,gBAAgB,CAAC;AAAEI,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaG,MAAAA,MAAb;AAAqBC,MAAAA,QAArB;AAA+BE,MAAAA;AAA/B,KAAD,CAA/B;AACA,SAAKG,MAAL,GAAc,IAAIb,SAAJ,CAAc;AAAEI,MAAAA,IAAF;AAAQM,MAAAA;AAAR,KAAd,CAAd;AACD;;AAhBW;;AAmBdI,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["'use strict'\n\nconst createPublishAPI = require('./publish')\nconst createResolveAPI = require('./resolve')\nconst PubSubAPI = require('./pubsub')\n\nclass NameAPI {\n  /**\n   * @param {Object} config\n   * @param {import('../ipns')} config.ipns\n   * @param {import('peer-id')} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-core-types/src/root').API[\"isOnline\"]} config.isOnline\n   * @param {import('libp2p/src/keychain')} config.keychain\n   * @param {import('ipfs-core-types/src/root').API[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublishAPI({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolveAPI({ dns, ipns, peerId, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n\nmodule.exports = NameAPI\n"]},"metadata":{},"sourceType":"script"}
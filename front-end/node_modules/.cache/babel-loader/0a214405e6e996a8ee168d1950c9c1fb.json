{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('./record')} Record\n */\n\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n *\n * @param {import('libp2p-interfaces/src/types').DhtValidators} validators\n * @param {Record} record\n */\n\n\nconst verifyRecord = (validators, record) => {\n  const key = record.key;\n  const keyString = uint8ArrayToString(key);\n  const parts = keyString.split('/');\n\n  if (parts.length < 3) {\n    // No validator available\n    return;\n  }\n\n  const validator = validators[parts[1].toString()];\n\n  if (!validator) {\n    const errMsg = 'Invalid record keytype';\n    throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE');\n  }\n\n  return validator.func(key, record.value);\n};\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-record/src/validator.js"],"names":["errcode","require","toString","uint8ArrayToString","verifyRecord","validators","record","key","keyString","parts","split","length","validator","errMsg","Error","func","value","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,QAAQ,EAAEC;AAAZ,IAAmCF,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,YAAY,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAC3C,QAAMC,GAAG,GAAGD,MAAM,CAACC,GAAnB;AACA,QAAMC,SAAS,GAAGL,kBAAkB,CAACI,GAAD,CAApC;AACA,QAAME,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAAd;;AAEA,MAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACA;AACD;;AAED,QAAMC,SAAS,GAAGP,UAAU,CAACI,KAAK,CAAC,CAAD,CAAL,CAASP,QAAT,EAAD,CAA5B;;AAEA,MAAI,CAACU,SAAL,EAAgB;AACd,UAAMC,MAAM,GAAG,wBAAf;AAEA,UAAMb,OAAO,CAAC,IAAIc,KAAJ,CAAUD,MAAV,CAAD,EAAoB,6BAApB,CAAb;AACD;;AAED,SAAOD,SAAS,CAACG,IAAV,CAAeR,GAAf,EAAoBD,MAAM,CAACU,KAA3B,CAAP;AACD,CAnBD;;AAqBAC,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,YAAY,EAAEA,YADC;AAEfC,EAAAA,UAAU,EAAEJ,OAAO,CAAC,cAAD;AAFJ,CAAjB","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('./record')} Record\n */\n\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n *\n * @param {import('libp2p-interfaces/src/types').DhtValidators} validators\n * @param {Record} record\n */\nconst verifyRecord = (validators, record) => {\n  const key = record.key\n  const keyString = uint8ArrayToString(key)\n  const parts = keyString.split('/')\n\n  if (parts.length < 3) {\n    // No validator available\n    return\n  }\n\n  const validator = validators[parts[1].toString()]\n\n  if (!validator) {\n    const errMsg = 'Invalid record keytype'\n\n    throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE')\n  }\n\n  return validator.func(key, record.value)\n}\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    return res.json();\n  };\n\n  return commands;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/commands.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","commands","options","res","post","timeout","signal","searchParams","headers","json"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,QAAQ,GAAG,OAAOC,OAAO,GAAG,EAAjB,KAAwB;AACvC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADoB;AAErCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFqB;AAGrCC,MAAAA,YAAY,EAAEV,iBAAiB,CAACK,OAAD,CAHM;AAIrCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AAJoB,KAArB,CAAlB;AAOA,WAAOL,GAAG,CAACM,IAAJ,EAAP;AACD,GATD;;AAUA,SAAOR,QAAP;AACD,CAfyB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n"]},"metadata":{},"sourceType":"script"}
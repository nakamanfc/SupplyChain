{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar options = require('./options.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespaceDefaultOnly(e) {\n  return Object.freeze({\n    __proto__: null,\n    'default': e\n  });\n}\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nasync function* importer(source, blockstore, options$1 = {}) {\n  const opts = options(options$1);\n  let dagBuilder;\n\n  if (typeof options$1.dagBuilder === 'function') {\n    dagBuilder = options$1.dagBuilder;\n  } else {\n    dagBuilder = (await Promise.resolve().then(function () {\n      return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./dag-builder/index.js'));\n    })).default;\n  }\n\n  let treeBuilder;\n\n  if (typeof options$1.treeBuilder === 'function') {\n    treeBuilder = options$1.treeBuilder;\n  } else {\n    treeBuilder = (await Promise.resolve().then(function () {\n      return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./tree-builder.js'));\n    })).default;\n  }\n\n  let candidates;\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n\n  for await (const entry of treeBuilder(parallelBatch__default['default'](dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}\n\nexports.importer = importer;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-importer/cjs/src/index.js"],"names":["Object","defineProperty","exports","value","parallelBatch","require","options","_interopDefaultLegacy","e","_interopNamespaceDefaultOnly","freeze","__proto__","parallelBatch__default","importer","source","blockstore","options$1","opts","dagBuilder","Promise","resolve","then","default","treeBuilder","candidates","Symbol","asyncIterator","iterator","entry","fileImportConcurrency","cid","path","unixfs","size"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,SAASE,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,SAASC,4BAAT,CAAsCD,CAAtC,EAAyC;AACvC,SAAOR,MAAM,CAACU,MAAP,CAAc;AAACC,IAAAA,SAAS,EAAE,IAAZ;AAAkB,eAAWH;AAA7B,GAAd,CAAP;AACD;;AAED,IAAII,sBAAsB,GAAG,aAAaL,qBAAqB,CAACH,aAAD,CAA/D;;AAEA,gBAAgBS,QAAhB,CAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,SAAS,GAAG,EAAzD,EAA6D;AAC3D,QAAMC,IAAI,GAAGX,OAAO,CAACU,SAAD,CAApB;AACA,MAAIE,UAAJ;;AACA,MAAI,OAAOF,SAAS,CAACE,UAAjB,KAAgC,UAApC,EAAgD;AAC9CA,IAAAA,UAAU,GAAGF,SAAS,CAACE,UAAvB;AACD,GAFD,MAEO;AACLA,IAAAA,UAAU,GAAG,CAAC,MAAMC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AAAE,aAAO,aAAaZ,4BAA4B,CAACJ,OAAO,CAAC,wBAAD,CAAR,CAAhD;AAAsF,KAA3H,CAAP,EAAqIiB,OAAlJ;AACD;;AACD,MAAIC,WAAJ;;AACA,MAAI,OAAOP,SAAS,CAACO,WAAjB,KAAiC,UAArC,EAAiD;AAC/CA,IAAAA,WAAW,GAAGP,SAAS,CAACO,WAAxB;AACD,GAFD,MAEO;AACLA,IAAAA,WAAW,GAAG,CAAC,MAAMJ,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AAAE,aAAO,aAAaZ,4BAA4B,CAACJ,OAAO,CAAC,mBAAD,CAAR,CAAhD;AAAiF,KAAtH,CAAP,EAAgIiB,OAA9I;AACD;;AACD,MAAIE,UAAJ;;AACA,MAAIC,MAAM,CAACC,aAAP,IAAwBZ,MAAxB,IAAkCW,MAAM,CAACE,QAAP,IAAmBb,MAAzD,EAAiE;AAC/DU,IAAAA,UAAU,GAAGV,MAAb;AACD,GAFD,MAEO;AACLU,IAAAA,UAAU,GAAG,CAACV,MAAD,CAAb;AACD;;AACD,aAAW,MAAMc,KAAjB,IAA0BL,WAAW,CAACX,sBAAsB,CAAC,SAAD,CAAtB,CAAkCM,UAAU,CAACM,UAAD,EAAaT,UAAb,EAAyBE,IAAzB,CAA5C,EAA4EA,IAAI,CAACY,qBAAjF,CAAD,EAA0Gd,UAA1G,EAAsHE,IAAtH,CAArC,EAAkK;AAChK,UAAM;AACJa,MAAAA,GAAG,EAAEF,KAAK,CAACE,GADP;AAEJC,MAAAA,IAAI,EAAEH,KAAK,CAACG,IAFR;AAGJC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAHV;AAIJC,MAAAA,IAAI,EAAEL,KAAK,CAACK;AAJR,KAAN;AAMD;AACF;;AAED/B,OAAO,CAACW,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar parallelBatch = require('it-parallel-batch');\nvar options = require('./options.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespaceDefaultOnly(e) {\n  return Object.freeze({__proto__: null, 'default': e});\n}\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nasync function* importer(source, blockstore, options$1 = {}) {\n  const opts = options(options$1);\n  let dagBuilder;\n  if (typeof options$1.dagBuilder === 'function') {\n    dagBuilder = options$1.dagBuilder;\n  } else {\n    dagBuilder = (await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./dag-builder/index.js')); })).default;\n  }\n  let treeBuilder;\n  if (typeof options$1.treeBuilder === 'function') {\n    treeBuilder = options$1.treeBuilder;\n  } else {\n    treeBuilder = (await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./tree-builder.js')); })).default;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch__default['default'](dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}\n\nexports.importer = importer;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst AbstractIterator = require('abstract-leveldown').AbstractIterator;\n\nconst inherits = require('inherits');\n\nfunction DeferredIterator(db, options) {\n  AbstractIterator.call(this, db);\n  this._options = options;\n  this._iterator = null;\n  this._operations = [];\n}\n\ninherits(DeferredIterator, AbstractIterator);\n\nDeferredIterator.prototype.setDb = function (db) {\n  const it = this._iterator = db.iterator(this._options);\n\n  for (const op of this._operations) {\n    it[op.method](...op.args);\n  }\n};\n\nDeferredIterator.prototype._operation = function (method, args) {\n  if (this._iterator) return this._iterator[method](...args);\n\n  this._operations.push({\n    method,\n    args\n  });\n};\n\nfor (const m of ['next', 'end']) {\n  DeferredIterator.prototype['_' + m] = function (...args) {\n    this._operation(m, args);\n  };\n} // Must defer seek() rather than _seek() because it requires db._serializeKey to be available\n\n\nDeferredIterator.prototype.seek = function (...args) {\n  this._operation('seek', args);\n};\n\nmodule.exports = DeferredIterator;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/deferred-leveldown/deferred-iterator.js"],"names":["AbstractIterator","require","inherits","DeferredIterator","db","options","call","_options","_iterator","_operations","prototype","setDb","it","iterator","op","method","args","_operation","push","m","seek","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BD,gBAAvD;;AACA,MAAME,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAEA,SAASE,gBAAT,CAA2BC,EAA3B,EAA+BC,OAA/B,EAAwC;AACtCL,EAAAA,gBAAgB,CAACM,IAAjB,CAAsB,IAAtB,EAA4BF,EAA5B;AAEA,OAAKG,QAAL,GAAgBF,OAAhB;AACA,OAAKG,SAAL,GAAiB,IAAjB;AACA,OAAKC,WAAL,GAAmB,EAAnB;AACD;;AAEDP,QAAQ,CAACC,gBAAD,EAAmBH,gBAAnB,CAAR;;AAEAG,gBAAgB,CAACO,SAAjB,CAA2BC,KAA3B,GAAmC,UAAUP,EAAV,EAAc;AAC/C,QAAMQ,EAAE,GAAG,KAAKJ,SAAL,GAAiBJ,EAAE,CAACS,QAAH,CAAY,KAAKN,QAAjB,CAA5B;;AAEA,OAAK,MAAMO,EAAX,IAAiB,KAAKL,WAAtB,EAAmC;AACjCG,IAAAA,EAAE,CAACE,EAAE,CAACC,MAAJ,CAAF,CAAc,GAAGD,EAAE,CAACE,IAApB;AACD;AACF,CAND;;AAQAb,gBAAgB,CAACO,SAAjB,CAA2BO,UAA3B,GAAwC,UAAUF,MAAV,EAAkBC,IAAlB,EAAwB;AAC9D,MAAI,KAAKR,SAAT,EAAoB,OAAO,KAAKA,SAAL,CAAeO,MAAf,EAAuB,GAAGC,IAA1B,CAAP;;AACpB,OAAKP,WAAL,CAAiBS,IAAjB,CAAsB;AAAEH,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAtB;AACD,CAHD;;AAKA,KAAK,MAAMG,CAAX,IAAgB,CAAC,MAAD,EAAS,KAAT,CAAhB,EAAiC;AAC/BhB,EAAAA,gBAAgB,CAACO,SAAjB,CAA2B,MAAMS,CAAjC,IAAsC,UAAU,GAAGH,IAAb,EAAmB;AACvD,SAAKC,UAAL,CAAgBE,CAAhB,EAAmBH,IAAnB;AACD,GAFD;AAGD,C,CAED;;;AACAb,gBAAgB,CAACO,SAAjB,CAA2BU,IAA3B,GAAkC,UAAU,GAAGJ,IAAb,EAAmB;AACnD,OAAKC,UAAL,CAAgB,MAAhB,EAAwBD,IAAxB;AACD,CAFD;;AAIAK,MAAM,CAACC,OAAP,GAAiBnB,gBAAjB","sourcesContent":["'use strict'\n\nconst AbstractIterator = require('abstract-leveldown').AbstractIterator\nconst inherits = require('inherits')\n\nfunction DeferredIterator (db, options) {\n  AbstractIterator.call(this, db)\n\n  this._options = options\n  this._iterator = null\n  this._operations = []\n}\n\ninherits(DeferredIterator, AbstractIterator)\n\nDeferredIterator.prototype.setDb = function (db) {\n  const it = this._iterator = db.iterator(this._options)\n\n  for (const op of this._operations) {\n    it[op.method](...op.args)\n  }\n}\n\nDeferredIterator.prototype._operation = function (method, args) {\n  if (this._iterator) return this._iterator[method](...args)\n  this._operations.push({ method, args })\n}\n\nfor (const m of ['next', 'end']) {\n  DeferredIterator.prototype['_' + m] = function (...args) {\n    this._operation(m, args)\n  }\n}\n\n// Must defer seek() rather than _seek() because it requires db._serializeKey to be available\nDeferredIterator.prototype.seek = function (...args) {\n  this._operation('seek', args)\n}\n\nmodule.exports = DeferredIterator\n"]},"metadata":{},"sourceType":"script"}
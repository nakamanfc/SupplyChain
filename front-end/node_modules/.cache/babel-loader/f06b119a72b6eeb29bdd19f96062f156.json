{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\mew-supplychain\\\\front-end\\\\src\\\\Component\\\\PostPage\\\\PostImg.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../../Style/PostImg.css';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport IPFS from 'ipfs-api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nfunction PostImg({\n  image,\n  setImage\n}) {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n\n  function captureFile(event) {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      setImage(Buffer(reader.result));\n      ipfs.files.add(Buffer(reader.result), (error, result) => {\n        if (error) {\n          console.log(error);\n        }\n\n        console.log(result[0].hash);\n        setImage(result[0].hash);\n      });\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: image != null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postimg-img-box\",\n          for: \"input-imagee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          id: \"input-imagee\",\n          hidden: true,\n          onChange: captureFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"postimg-img-box\",\n          for: \"input-imagee\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"postimg-img\",\n            src: `https://ipfs.io/ipfs/${image}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        id: \"input-image\",\n        hidden: true,\n        onChange: captureFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"input-image\",\n        className: \"postimg-box\",\n        children: /*#__PURE__*/_jsxDEV(AddPhotoAlternateIcon, {\n          style: {\n            fontSize: 200\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(PostImg, \"BFt0S2Yu+FHnDo7eJSYMscb1qh0=\");\n\n_c = PostImg;\nexport default PostImg;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostImg\");","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/src/Component/PostPage/PostImg.js"],"names":["React","useState","AddPhotoAlternateIcon","IPFS","CircularProgress","ipfs","host","port","protocol","PostImg","image","setImage","loading","setLoading","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","add","error","console","log","hash","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport '../../Style/PostImg.css'\r\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport IPFS from 'ipfs-api'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\nfunction PostImg({image,setImage}) {\r\n    const [loading,setLoading] = useState(false)\r\n    function captureFile(event) {\r\n        event.preventDefault()\r\n        const file = event.target.files[0]\r\n        const reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => {\r\n          setImage(Buffer(reader.result))\r\n          ipfs.files.add(Buffer(reader.result), (error, result) => {\r\n            if(error){\r\n              console.log(error)\r\n            }\r\n            console.log(result[0].hash)\r\n            setImage(result[0].hash)\r\n          })\r\n        }\r\n      }\r\n    return (\r\n        <>\r\n        {image!=null?\r\n        (\r\n            <>\r\n                {loading?\r\n                (\r\n                    <>\r\n                        <div className='postimg-img-box' for=\"input-imagee\">\r\n                            \r\n                        </div>\r\n                    </>\r\n                ):(\r\n                    <>\r\n                        <input type='file' accept='image/*' id=\"input-imagee\" hidden onChange={captureFile}/>\r\n                        <label className='postimg-img-box' for=\"input-imagee\">\r\n                            <img className='postimg-img' src={`https://ipfs.io/ipfs/${image}`}/>\r\n                        </label>\r\n                    </>\r\n                )}\r\n            </>\r\n        ):(\r\n            <>\r\n            <input type='file' accept='image/*' id=\"input-image\" hidden onChange={captureFile}/>\r\n            <label for=\"input-image\" className='postimg-box'>\r\n                <AddPhotoAlternateIcon style={{fontSize: 200}}/>\r\n            </label>\r\n            </>\r\n        )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostImg\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst utils = require('../../utils');\n\nconst errcode = require('err-code');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:put-value');\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  async function putValue(peerId, msg) {\n    const key = msg.key;\n    log('key: %b', key);\n    const record = msg.record;\n\n    if (!record) {\n      const errMsg = `Empty record from: ${peerId.toB58String()}`;\n      log.error(errMsg);\n      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');\n    }\n\n    await dht._verifyRecordLocally(record);\n    record.timeReceived = new Date();\n    const recordKey = utils.bufferToKey(record.key);\n    await dht.datastore.put(recordKey, record.serialize());\n    dht.onPut(record, peerId);\n    return msg;\n  }\n\n  return putValue;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-kad-dht/src/rpc/handlers/put-value.js"],"names":["utils","require","errcode","module","exports","dht","log","logger","peerId","putValue","msg","key","record","errMsg","toB58String","error","Error","_verifyRecordLocally","timeReceived","Date","recordKey","bufferToKey","datastore","put","serialize","onPut"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,iBAAeC,QAAf,CAAyBD,MAAzB,EAAiCE,GAAjC,EAAsC;AACpC,UAAMC,GAAG,GAAGD,GAAG,CAACC,GAAhB;AACAL,IAAAA,GAAG,CAAC,SAAD,EAAYK,GAAZ,CAAH;AAEA,UAAMC,MAAM,GAAGF,GAAG,CAACE,MAAnB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACX,YAAMC,MAAM,GAAI,sBAAqBL,MAAM,CAACM,WAAP,EAAqB,EAA1D;AAEAR,MAAAA,GAAG,CAACS,KAAJ,CAAUF,MAAV;AACA,YAAMX,OAAO,CAAC,IAAIc,KAAJ,CAAUH,MAAV,CAAD,EAAoB,kBAApB,CAAb;AACD;;AAED,UAAMR,GAAG,CAACY,oBAAJ,CAAyBL,MAAzB,CAAN;AAEAA,IAAAA,MAAM,CAACM,YAAP,GAAsB,IAAIC,IAAJ,EAAtB;AACA,UAAMC,SAAS,GAAGpB,KAAK,CAACqB,WAAN,CAAkBT,MAAM,CAACD,GAAzB,CAAlB;AACA,UAAMN,GAAG,CAACiB,SAAJ,CAAcC,GAAd,CAAkBH,SAAlB,EAA6BR,MAAM,CAACY,SAAP,EAA7B,CAAN;AAEAnB,IAAAA,GAAG,CAACoB,KAAJ,CAAUb,MAAV,EAAkBJ,MAAlB;AAEA,WAAOE,GAAP;AACD;;AAED,SAAOD,QAAP;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst utils = require('../../utils')\nconst errcode = require('err-code')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:put-value')\n\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function putValue (peerId, msg) {\n    const key = msg.key\n    log('key: %b', key)\n\n    const record = msg.record\n\n    if (!record) {\n      const errMsg = `Empty record from: ${peerId.toB58String()}`\n\n      log.error(errMsg)\n      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD')\n    }\n\n    await dht._verifyRecordLocally(record)\n\n    record.timeReceived = new Date()\n    const recordKey = utils.bufferToKey(record.key)\n    await dht.datastore.put(recordKey, record.serialize())\n\n    dht.onPut(record, peerId)\n\n    return msg\n  }\n\n  return putValue\n}\n"]},"metadata":{},"sourceType":"script"}
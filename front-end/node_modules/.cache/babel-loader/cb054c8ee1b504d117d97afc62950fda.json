{"ast":null,"code":"'use strict'; // @ts-ignore - no types\n\nconst mortice = require('mortice');\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\n\n\nlet lock;\n/**\n * @param {boolean} [repoOwner]\n */\n\nmodule.exports = (repoOwner = false) => {\n  if (lock) {\n    return lock;\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n  lock = {\n    readLock: func => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock();\n\n        try {\n          return await func.apply(null, args);\n        } finally {\n          releaseLock();\n        }\n      };\n    },\n    writeLock: func => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock();\n\n        try {\n          return await func.apply(null, args);\n        } finally {\n          releaseLock();\n        }\n      };\n    }\n  };\n  return lock;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/utils/create-lock.js"],"names":["mortice","require","lock","module","exports","repoOwner","mutex","singleProcess","readLock","func","args","releaseLock","apply","writeLock"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,IAAIC,IAAJ;AAEA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAS,GAAG,KAAb,KAAuB;AACtC,MAAIH,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AAED,QAAMI,KAAK,GAAGN,OAAO,CAAC;AACpB;AACA;AACA;AACAO,IAAAA,aAAa,EAAEF;AAJK,GAAD,CAArB;AAOAH,EAAAA,IAAI,GAAG;AACLM,IAAAA,QAAQ,EAAGC,IAAD,IAAU;AAClB,aAAO,OAAO,GAAGC,IAAV,KAAmB;AACxB,cAAMC,WAAW,GAAG,MAAML,KAAK,CAACE,QAAN,EAA1B;;AAEA,YAAI;AACF,iBAAO,MAAMC,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBF,IAAjB,CAAb;AACD,SAFD,SAEU;AACRC,UAAAA,WAAW;AACZ;AACF,OARD;AASD,KAXI;AAaLE,IAAAA,SAAS,EAAGJ,IAAD,IAAU;AACnB,aAAO,OAAO,GAAGC,IAAV,KAAmB;AACxB,cAAMC,WAAW,GAAG,MAAML,KAAK,CAACO,SAAN,EAA1B;;AAEA,YAAI;AACF,iBAAO,MAAMJ,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBF,IAAjB,CAAb;AACD,SAFD,SAEU;AACRC,UAAAA,WAAW;AACZ;AACF,OARD;AASD;AAvBI,GAAP;AA0BA,SAAOT,IAAP;AACD,CAvCD","sourcesContent":["'use strict'\n\n// @ts-ignore - no types\nconst mortice = require('mortice')\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nmodule.exports = (repoOwner = false) => {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n"]},"metadata":{},"sourceType":"script"}
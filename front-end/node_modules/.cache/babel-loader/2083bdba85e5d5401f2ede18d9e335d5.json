{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst hmac = require('../hmac');\n\nconst cipherMap = {\n  'AES-128': {\n    ivSize: 16,\n    keySize: 16\n  },\n  'AES-256': {\n    ivSize: 16,\n    keySize: 32\n  },\n  Blowfish: {\n    ivSize: 8,\n    cipherKeySize: 32\n  }\n}; // Generates a set of keys for each party by stretching the shared key.\n// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)\n\nmodule.exports = async (cipherType, hash, secret) => {\n  const cipher = cipherMap[cipherType];\n\n  if (!cipher) {\n    const allowed = Object.keys(cipherMap).join(' / ');\n    throw errcode(new Error(`unknown cipher type '${cipherType}'. Must be ${allowed}`), 'ERR_INVALID_CIPHER_TYPE');\n  }\n\n  if (!hash) {\n    throw errcode(new Error('missing hash type'), 'ERR_MISSING_HASH_TYPE');\n  }\n\n  const cipherKeySize = cipher.keySize;\n  const ivSize = cipher.ivSize;\n  const hmacKeySize = 20;\n  const seed = uint8ArrayFromString('key expansion');\n  const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);\n  const m = await hmac.create(hash, secret);\n  let a = await m.digest(seed);\n  const result = [];\n  let j = 0;\n\n  while (j < resultLength) {\n    const b = await m.digest(uint8ArrayConcat([a, seed]));\n    let todo = b.length;\n\n    if (j + todo > resultLength) {\n      todo = resultLength - j;\n    }\n\n    result.push(b);\n    j += todo;\n    a = await m.digest(a);\n  }\n\n  const half = resultLength / 2;\n  const resultBuffer = uint8ArrayConcat(result);\n  const r1 = resultBuffer.slice(0, half);\n  const r2 = resultBuffer.slice(half, resultLength);\n\n  const createKey = res => ({\n    iv: res.slice(0, ivSize),\n    cipherKey: res.slice(ivSize, ivSize + cipherKeySize),\n    macKey: res.slice(ivSize + cipherKeySize)\n  });\n\n  return {\n    k1: createKey(r1),\n    k2: createKey(r2)\n  };\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-crypto/src/keys/key-stretcher.js"],"names":["errcode","require","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","hmac","cipherMap","ivSize","keySize","Blowfish","cipherKeySize","module","exports","cipherType","hash","secret","cipher","allowed","Object","keys","join","Error","hmacKeySize","seed","resultLength","m","create","a","digest","result","j","b","todo","length","push","half","resultBuffer","r1","slice","r2","createKey","res","iv","cipherKey","macKey","k1","k2"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst hmac = require('../hmac')\n\nconst cipherMap = {\n  'AES-128': {\n    ivSize: 16,\n    keySize: 16\n  },\n  'AES-256': {\n    ivSize: 16,\n    keySize: 32\n  },\n  Blowfish: {\n    ivSize: 8,\n    cipherKeySize: 32\n  }\n}\n\n// Generates a set of keys for each party by stretching the shared key.\n// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)\nmodule.exports = async (cipherType, hash, secret) => {\n  const cipher = cipherMap[cipherType]\n\n  if (!cipher) {\n    const allowed = Object.keys(cipherMap).join(' / ')\n    throw errcode(new Error(`unknown cipher type '${cipherType}'. Must be ${allowed}`), 'ERR_INVALID_CIPHER_TYPE')\n  }\n\n  if (!hash) {\n    throw errcode(new Error('missing hash type'), 'ERR_MISSING_HASH_TYPE')\n  }\n\n  const cipherKeySize = cipher.keySize\n  const ivSize = cipher.ivSize\n  const hmacKeySize = 20\n  const seed = uint8ArrayFromString('key expansion')\n  const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize)\n\n  const m = await hmac.create(hash, secret)\n  let a = await m.digest(seed)\n\n  const result = []\n  let j = 0\n\n  while (j < resultLength) {\n    const b = await m.digest(uint8ArrayConcat([a, seed]))\n    let todo = b.length\n\n    if (j + todo > resultLength) {\n      todo = resultLength - j\n    }\n\n    result.push(b)\n    j += todo\n    a = await m.digest(a)\n  }\n\n  const half = resultLength / 2\n  const resultBuffer = uint8ArrayConcat(result)\n  const r1 = resultBuffer.slice(0, half)\n  const r2 = resultBuffer.slice(half, resultLength)\n\n  const createKey = (res) => ({\n    iv: res.slice(0, ivSize),\n    cipherKey: res.slice(ivSize, ivSize + cipherKeySize),\n    macKey: res.slice(ivSize + cipherKeySize)\n  })\n\n  return {\n    k1: createKey(r1),\n    k2: createKey(r2)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
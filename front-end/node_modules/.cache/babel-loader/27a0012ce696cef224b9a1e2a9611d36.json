{"ast":null,"code":"'use strict';\n\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  async function* yieldDirectoryContent(options = {}) {\n    const offset = options.offset || 0;\n    const length = options.length || node.Links.length;\n    const links = node.Links.slice(offset, length);\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options);\n\n      if (result.entry) {\n        yield result.entry;\n      }\n    }\n  }\n\n  return yieldDirectoryContent;\n};\n\nmodule.exports = directoryContent;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-exporter/cjs/src/resolvers/unixfs-v1/content/directory.js"],"names":["directoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldDirectoryContent","options","offset","length","Links","links","slice","link","result","Hash","Name","entry","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,UAA1C,KAAyD;AAChF,kBAAgBC,qBAAhB,CAAsCC,OAAO,GAAG,EAAhD,EAAoD;AAClD,UAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,CAAjC;AACA,UAAMC,MAAM,GAAGF,OAAO,CAACE,MAAR,IAAkBT,IAAI,CAACU,KAAL,CAAWD,MAA5C;AACA,UAAME,KAAK,GAAGX,IAAI,CAACU,KAAL,CAAWE,KAAX,CAAiBJ,MAAjB,EAAyBC,MAAzB,CAAd;;AACA,SAAK,MAAMI,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,MAAM,GAAG,MAAMX,OAAO,CAACU,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,IAAL,IAAa,EAAzB,EAA8B,GAAGd,IAAM,IAAIW,IAAI,CAACG,IAAL,IAAa,EAAI,EAA5D,EAA+D,EAA/D,EAAmEZ,KAAK,GAAG,CAA3E,EAA8EC,UAA9E,EAA0FE,OAA1F,CAA5B;;AACA,UAAIO,MAAM,CAACG,KAAX,EAAkB;AAChB,cAAMH,MAAM,CAACG,KAAb;AACD;AACF;AACF;;AACD,SAAOX,qBAAP;AACD,CAbD;;AAeAY,MAAM,CAACC,OAAP,GAAiBrB,gBAAjB","sourcesContent":["'use strict';\n\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  async function* yieldDirectoryContent(options = {}) {\n    const offset = options.offset || 0;\n    const length = options.length || node.Links.length;\n    const links = node.Links.slice(offset, length);\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${ path }/${ link.Name || '' }`, [], depth + 1, blockstore, options);\n      if (result.entry) {\n        yield result.entry;\n      }\n    }\n  }\n  return yieldDirectoryContent;\n};\n\nmodule.exports = directoryContent;\n"]},"metadata":{},"sourceType":"script"}
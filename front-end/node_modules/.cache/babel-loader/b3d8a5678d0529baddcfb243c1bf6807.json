{"ast":null,"code":"'use strict';\n\nconst errors = require('../errors');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:repo:lock:memory');\nconst lockFile = 'repo.lock';\n/** @type {Record<string,boolean>} */\n\nconst LOCKS = {};\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\n\nexports.lock = async dir => {\n  const file = dir + '/' + lockFile;\n  log('locking %s', file);\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`);\n  }\n\n  LOCKS[file] = true;\n  const closer = {\n    async close() {\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n    }\n\n  };\n  return closer;\n};\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\n\n\nexports.locked = async dir => {\n  const file = dir + '/' + lockFile;\n  log(`checking lock: ${file}`);\n  return Boolean(LOCKS[file]);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-repo/src/locks/memory.js"],"names":["errors","require","debug","log","lockFile","LOCKS","exports","lock","dir","file","LockExistsError","closer","close","locked","Boolean"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAME,GAAG,GAAGD,KAAK,CAAC,uBAAD,CAAjB;AAEA,MAAME,QAAQ,GAAG,WAAjB;AAEA;;AACA,MAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,IAAR,GAAe,MAAOC,GAAP,IAAe;AAC5B,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYJ,QAAzB;AACAD,EAAAA,GAAG,CAAC,YAAD,EAAeM,IAAf,CAAH;;AAEA,MAAIJ,KAAK,CAACI,IAAD,CAAL,KAAgB,IAApB,EAA0B;AACxB,UAAM,IAAIT,MAAM,CAACU,eAAX,CAA4B,qCAAoCD,IAAK,EAArE,CAAN;AACD;;AAEDJ,EAAAA,KAAK,CAACI,IAAD,CAAL,GAAc,IAAd;AACA,QAAME,MAAM,GAAG;AACb,UAAMC,KAAN,GAAe;AACb,UAAIP,KAAK,CAACI,IAAD,CAAT,EAAiB;AACf,eAAOJ,KAAK,CAACI,IAAD,CAAZ;AACD;AACF;;AALY,GAAf;AAOA,SAAOE,MAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACO,MAAR,GAAiB,MAAOL,GAAP,IAAe;AAC9B,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYJ,QAAzB;AACAD,EAAAA,GAAG,CAAE,kBAAiBM,IAAK,EAAxB,CAAH;AAEA,SAAOK,OAAO,CAACT,KAAK,CAACI,IAAD,CAAN,CAAd;AACD,CALD","sourcesContent":["'use strict'\n\nconst errors = require('../errors')\nconst debug = require('debug')\n\nconst log = debug('ipfs:repo:lock:memory')\n\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nexports.lock = async (dir) => {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nexports.locked = async (dir) => {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n"]},"metadata":{},"sourceType":"script"}
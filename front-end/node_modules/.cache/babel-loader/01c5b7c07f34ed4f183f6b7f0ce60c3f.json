{"ast":null,"code":"'use strict';\n\nconst map = require('it-map');\n\nconst errCode = require('err-code');\n\nconst {\n  PinTypes\n} = require('./pins');\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pins').Pins} Pins\n */\n\n/**\n *\n * @param {Blockstore} blockstore\n */\n\n\nmodule.exports = createPinnedBlockstore;\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\n\nfunction createPinnedBlockstore(pins, store) {\n  return {\n    open() {\n      return store.open();\n    },\n\n    close() {\n      return store.close();\n    },\n\n    query(query, options) {\n      return store.query(query, options);\n    },\n\n    queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n\n    async get(cid, options) {\n      return store.get(cid, options);\n    },\n\n    async *getMany(cids, options) {\n      yield* store.getMany(cids, options);\n    },\n\n    async put(cid, buf, options) {\n      await store.put(cid, buf, options);\n    },\n\n    async *putMany(pairs, options) {\n      yield* store.putMany(pairs, options);\n    },\n\n    has(cid, options) {\n      return store.has(cid, options);\n    },\n\n    async delete(cid, options) {\n      await ensureNotPinned(cid, pins);\n      return store.delete(cid, options);\n    },\n\n    deleteMany(cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins);\n        return cid;\n      }), options);\n    },\n\n    batch() {\n      return store.batch();\n    }\n\n  };\n}\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\n\n\nasync function ensureNotPinned(cid, pins) {\n  const {\n    pinned,\n    reason\n  } = await pins.isPinnedWithType(cid, PinTypes.all);\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED');\n  }\n}","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-repo/src/pinned-blockstore.js"],"names":["map","require","errCode","PinTypes","module","exports","createPinnedBlockstore","pins","store","open","close","query","options","queryKeys","get","cid","getMany","cids","put","buf","putMany","pairs","has","delete","ensureNotPinned","deleteMany","batch","pinned","reason","isPinnedWithType","all","Error"],"mappings":"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","sourcesContent":["'use strict'\n\nconst map = require('it-map')\nconst errCode = require('err-code')\nconst { PinTypes } = require('./pins')\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pins').Pins} Pins\n */\n\n/**\n *\n * @param {Blockstore} blockstore\n */\nmodule.exports = createPinnedBlockstore\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nfunction createPinnedBlockstore (pins, store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      yield * store.getMany(cids, options)\n    },\n\n    async put (cid, buf, options) {\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      yield * store.putMany(pairs, options)\n    },\n\n    has (cid, options) {\n      return store.has(cid, options)\n    },\n\n    async delete (cid, options) {\n      await ensureNotPinned(cid, pins)\n\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins)\n\n        return cid\n      }), options)\n    },\n\n    batch () {\n      return store.batch()\n    }\n  }\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned (cid, pins) {\n  const { pinned, reason } = await pins.isPinnedWithType(cid, PinTypes.all)\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict'; // limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n\nconst MAX_BYTES = 65536;\n/**\n * @param {number} size\n */\n\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size);\n  let generated = 0;\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));\n          generated += size - generated;\n        } else {\n          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));\n          generated += MAX_BYTES;\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n\n  return bytes;\n}\n\nmodule.exports = randomBytes;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/iso-random-stream/src/random.browser.js"],"names":["MAX_BYTES","randomBytes","size","bytes","Uint8Array","generated","crypto","getRandomValues","subarray","module","exports"],"mappings":"AAAA,a,CAEA;AACA;;AACA,MAAMA,SAAS,GAAG,KAAlB;AAEA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAd;AACA,MAAIG,SAAS,GAAG,CAAhB;;AAEA,MAAIH,IAAI,GAAG,CAAX,EAAc;AACZ;AACA,QAAIA,IAAI,GAAGF,SAAX,EAAsB;AACpB,aAAOK,SAAS,GAAGH,IAAnB,EAAyB;AACvB,YAAIG,SAAS,GAAGL,SAAZ,GAAwBE,IAA5B,EAAkC;AAChCI,UAAAA,MAAM,CAACC,eAAP,CACEJ,KAAK,CAACK,QAAN,CAAeH,SAAf,EAA0BA,SAAS,IAAIH,IAAI,GAAGG,SAAX,CAAnC,CADF;AAGAA,UAAAA,SAAS,IAAIH,IAAI,GAAGG,SAApB;AACD,SALD,MAKO;AACLC,UAAAA,MAAM,CAACC,eAAP,CACEJ,KAAK,CAACK,QAAN,CAAeH,SAAf,EAA0BA,SAAS,GAAGL,SAAtC,CADF;AAGAK,UAAAA,SAAS,IAAIL,SAAb;AACD;AACF;AACF,KAdD,MAcO;AACLM,MAAAA,MAAM,CAACC,eAAP,CAAuBJ,KAAvB;AACD;AACF;;AAED,SAAOA,KAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536\n\n/**\n * @param {number} size\n */\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size)\n  let generated = 0\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + (size - generated))\n          )\n          generated += size - generated\n        } else {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + MAX_BYTES)\n          )\n          generated += MAX_BYTES\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  return bytes\n}\n\nmodule.exports = randomBytes\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst {\n  NotStartedError,\n  AlreadyStartingError,\n  AlreadyStartedError\n} = require('../errors');\n\nconst {\n  withTimeout\n} = require('../utils');\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\n\n\nclass Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {Object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create({\n    start,\n    stop\n  }) {\n    return new Service(start, stop);\n  }\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n\n\n  static async start(service, options) {\n    const {\n      state,\n      activate\n    } = service;\n\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped':\n        {\n          try {\n            const promise = activate(options);\n            service.state = {\n              status: 'starting',\n              ready: promise\n            }; // Note: MUST await after state transition above otherwise race\n            // condition may occur.\n\n            const result = await promise;\n            service.state = {\n              status: 'started',\n              value: result\n            };\n            return result; // If failed to start, transiton from 'starting' to 'stopped'\n            // state.\n          } catch (error) {\n            service.state = {\n              status: 'stopped'\n            };\n            throw error;\n          }\n        }\n\n      case 'starting':\n        {\n          throw new AlreadyStartingError();\n        }\n\n      case 'started':\n        {\n          throw new AlreadyStartedError();\n        }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n\n      case 'stopping':\n        {\n          await state.ready;\n          return await Service.start(service, options);\n        }\n\n      default:\n        {\n          return Service.panic(service);\n        }\n    }\n  }\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n\n\n  static async stop(service) {\n    const {\n      state,\n      deactivate\n    } = service;\n\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped':\n        {\n          break;\n        }\n      // If service is starting we await for it to complete\n      // and try again. That way\n\n      case 'starting':\n        {\n          // We do not want to error stop if start failed.\n          try {\n            await state.ready;\n          } catch (_) {}\n\n          return await Service.stop(service);\n        }\n      // if service is stopping we just await for it to complete.\n\n      case 'stopping':\n        {\n          return await state.ready;\n        }\n\n      case 'started':\n        {\n          if (deactivate) {\n            await deactivate(state.value);\n          }\n\n          service.state = {\n            status: 'stopped'\n          };\n          break;\n        }\n\n      default:\n        {\n          Service.panic(state);\n        }\n    }\n  }\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n\n\n  static try({\n    state\n  }) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      default:\n        return null;\n    }\n  }\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n\n\n  static async use({\n    state\n  }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      case 'starting':\n        return await withTimeout(state.ready, options);\n\n      default:\n        throw new NotStartedError();\n    }\n  } // eslint-disable-next-line jsdoc/require-returns-check\n\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n\n\n  static panic({\n    state\n  }) {\n    const status = JSON.stringify({\n      status: state.status\n    });\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`);\n  }\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n\n\n  constructor(activate, deactivate) {\n    this.activate = activate;\n    this.deactivate = deactivate;\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n\n    this.state = {\n      status: 'stopped'\n    };\n  }\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n\n\n  async use(options) {\n    return await Service.use(this, options);\n  }\n  /**\n   * @returns {T|null}\n   */\n\n\n  try() {\n    return Service.try(this);\n  }\n\n}\n\nmodule.exports = Service;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/utils/service.js"],"names":["NotStartedError","AlreadyStartingError","AlreadyStartedError","require","withTimeout","Service","create","start","stop","service","options","state","activate","status","promise","ready","result","value","error","panic","deactivate","_","try","use","JSON","stringify","RangeError","constructor","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,eAAF;AAAmBC,EAAAA,oBAAnB;AAAyCC,EAAAA;AAAzC,IAAiEC,OAAO,CAAC,WAAD,CAA9E;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,UAAD,CAA/B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAN,CAAc;AACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAANC,MAAM,CAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAF,EAAmB;AAC9B,WAAO,IAAIH,OAAJ,CAAYE,KAAZ,EAAmBC,IAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,eAALD,KAAK,CAAEE,OAAF,EAAWC,OAAX,EAAoB;AACpC,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBH,OAA5B;;AACA,YAAQE,KAAK,CAACE,MAAd;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAK,SAAL;AAAgB;AACd,cAAI;AACF,kBAAMC,OAAO,GAAGF,QAAQ,CAACF,OAAD,CAAxB;AACAD,YAAAA,OAAO,CAACE,KAAR,GAAgB;AAAEE,cAAAA,MAAM,EAAE,UAAV;AAAsBE,cAAAA,KAAK,EAAED;AAA7B,aAAhB,CAFE,CAGF;AACA;;AACA,kBAAME,MAAM,GAAG,MAAMF,OAArB;AACAL,YAAAA,OAAO,CAACE,KAAR,GAAgB;AAAEE,cAAAA,MAAM,EAAE,SAAV;AAAqBI,cAAAA,KAAK,EAAED;AAA5B,aAAhB;AACA,mBAAOA,MAAP,CAPE,CAQJ;AACA;AACC,WAVD,CAUE,OAAOE,KAAP,EAAc;AACdT,YAAAA,OAAO,CAACE,KAAR,GAAgB;AAAEE,cAAAA,MAAM,EAAE;AAAV,aAAhB;AACA,kBAAMK,KAAN;AACD;AACF;;AACD,WAAK,UAAL;AAAiB;AACf,gBAAM,IAAIjB,oBAAJ,EAAN;AACD;;AACD,WAAK,SAAL;AAAgB;AACd,gBAAM,IAAIC,mBAAJ,EAAN;AACD;AACD;AACA;;AACA,WAAK,UAAL;AAAiB;AACf,gBAAMS,KAAK,CAACI,KAAZ;AACA,iBAAO,MAAMV,OAAO,CAACE,KAAR,CAAcE,OAAd,EAAuBC,OAAvB,CAAb;AACD;;AACD;AAAS;AACP,iBAAOL,OAAO,CAACc,KAAR,CAAcV,OAAd,CAAP;AACD;AAtCH;AAwCD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,eAAJD,IAAI,CAAEC,OAAF,EAAW;AAC1B,UAAM;AAAEE,MAAAA,KAAF;AAASS,MAAAA;AAAT,QAAwBX,OAA9B;;AACA,YAAQE,KAAK,CAACE,MAAd;AACE;AACA,WAAK,SAAL;AAAgB;AACd;AACD;AACD;AACA;;AACA,WAAK,UAAL;AAAiB;AACf;AACA,cAAI;AAAE,kBAAMF,KAAK,CAACI,KAAZ;AAAmB,WAAzB,CAA0B,OAAOM,CAAP,EAAU,CAAE;;AACtC,iBAAO,MAAMhB,OAAO,CAACG,IAAR,CAAaC,OAAb,CAAb;AACD;AACD;;AACA,WAAK,UAAL;AAAiB;AACf,iBAAO,MAAME,KAAK,CAACI,KAAnB;AACD;;AACD,WAAK,SAAL;AAAgB;AACd,cAAIK,UAAJ,EAAgB;AACd,kBAAMA,UAAU,CAACT,KAAK,CAACM,KAAP,CAAhB;AACD;;AACDR,UAAAA,OAAO,CAACE,KAAR,GAAgB;AAAEE,YAAAA,MAAM,EAAE;AAAV,WAAhB;AACA;AACD;;AACD;AAAS;AACPR,UAAAA,OAAO,CAACc,KAAR,CAAcR,KAAd;AACD;AAzBH;AA2BD;AAED;AACF;AACA;AACA;AACA;;;AACY,SAAHW,GAAG,CAAE;AAAEX,IAAAA;AAAF,GAAF,EAAa;AACrB,YAAQA,KAAK,CAACE,MAAd;AACE,WAAK,SAAL;AACE,eAAOF,KAAK,CAACM,KAAb;;AACF;AACE,eAAO,IAAP;AAJJ;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACkB,eAAHM,GAAG,CAAE;AAAEZ,IAAAA;AAAF,GAAF,EAAaD,OAAb,EAAsB;AACpC,YAAQC,KAAK,CAACE,MAAd;AACE,WAAK,SAAL;AACE,eAAOF,KAAK,CAACM,KAAb;;AACF,WAAK,UAAL;AACE,eAAO,MAAMb,WAAW,CAACO,KAAK,CAACI,KAAP,EAAcL,OAAd,CAAxB;;AACF;AACE,cAAM,IAAIV,eAAJ,EAAN;AANJ;AAQD,GA/IW,CAiJZ;;AACA;AACF;AACA;AACA;AACA;;;AACc,SAALmB,KAAK,CAAE;AAAER,IAAAA;AAAF,GAAF,EAAa;AACvB,UAAME,MAAM,GAAGW,IAAI,CAACC,SAAL,CAAe;AAAEZ,MAAAA,MAAM,EAAEF,KAAK,CAACE;AAAhB,KAAf,CAAf;AACA,UAAMa,UAAU,CAAE,4BAA2Bb,MAAO,2DAApC,CAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,WAAW,CAAEf,QAAF,EAAYQ,UAAZ,EAAwB;AACjC,SAAKR,QAAL,GAAgBA,QAAhB;AACA,SAAKQ,UAAL,GAAkBA,UAAlB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKT,KAAL,GAAa;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACW,QAAHU,GAAG,CAAEb,OAAF,EAAW;AAClB,WAAO,MAAML,OAAO,CAACkB,GAAR,CAAY,IAAZ,EAAkBb,OAAlB,CAAb;AACD;AAED;AACF;AACA;;;AACEY,EAAAA,GAAG,GAAI;AACL,WAAOjB,OAAO,CAACiB,GAAR,CAAY,IAAZ,CAAP;AACD;;AAnMW;;AAsMdM,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["'use strict'\n\nconst { NotStartedError, AlreadyStartingError, AlreadyStartedError } = require('../errors')\nconst { withTimeout } = require('../utils')\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nclass Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {Object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create ({ start, stop }) {\n    return new Service(start, stop)\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start (service, options) {\n    const { state, activate } = service\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped': {\n        try {\n          const promise = activate(options)\n          service.state = { status: 'starting', ready: promise }\n          // Note: MUST await after state transition above otherwise race\n          // condition may occur.\n          const result = await promise\n          service.state = { status: 'started', value: result }\n          return result\n        // If failed to start, transiton from 'starting' to 'stopped'\n        // state.\n        } catch (error) {\n          service.state = { status: 'stopped' }\n          throw error\n        }\n      }\n      case 'starting': {\n        throw new AlreadyStartingError()\n      }\n      case 'started': {\n        throw new AlreadyStartedError()\n      }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping': {\n        await state.ready\n        return await Service.start(service, options)\n      }\n      default: {\n        return Service.panic(service)\n      }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop (service) {\n    const { state, deactivate } = service\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped': {\n        break\n      }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting': {\n        // We do not want to error stop if start failed.\n        try { await state.ready } catch (_) {}\n        return await Service.stop(service)\n      }\n      // if service is stopping we just await for it to complete.\n      case 'stopping': {\n        return await state.ready\n      }\n      case 'started': {\n        if (deactivate) {\n          await deactivate(state.value)\n        }\n        service.state = { status: 'stopped' }\n        break\n      }\n      default: {\n        Service.panic(state)\n      }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try ({ state }) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use ({ state }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      case 'starting':\n        return await withTimeout(state.ready, options)\n      default:\n        throw new NotStartedError()\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic ({ state }) {\n    const status = JSON.stringify({ status: state.status })\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`)\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor (activate, deactivate) {\n    this.activate = activate\n    this.deactivate = deactivate\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = { status: 'stopped' }\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use (options) {\n    return await Service.use(this, options)\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try () {\n    return Service.try(this)\n  }\n}\n\nmodule.exports = Service\n"]},"metadata":{},"sourceType":"script"}
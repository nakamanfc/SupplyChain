{"ast":null,"code":"'use strict';\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"read\"]}\n   */\n  function mfsRead(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath(context, path, options);\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks);\n\n        if (result.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE');\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  }\n\n  return withTimeoutOption(mfsRead);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/read.js"],"names":["exporter","require","mergeOptions","bind","ignoreUndefined","toMfsPath","errCode","withTimeoutOption","defaultOptions","offset","length","Infinity","module","exports","context","mfsRead","path","options","Symbol","asyncIterator","read","mfsPath","result","repo","blocks","type","Error","content","buf"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBE,IAAzB,CAA8B;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA9B,CAArB;;AACA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMO,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,MAAM,EAAEC;AAFa,CAAvB;AAKA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B;AACF;AACA;AACE,WAASC,OAAT,CAAkBC,IAAlB,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACpC;AACAA,IAAAA,OAAO,GAAGf,YAAY,CAACM,cAAD,EAAiBS,OAAjB,CAAtB;AAEA,WAAO;AACL,OAACC,MAAM,CAACC,aAAR,GAAwB,gBAAiBC,IAAjB,GAAyB;AAC/C,cAAMC,OAAO,GAAG,MAAMhB,SAAS,CAACS,OAAD,EAAUE,IAAV,EAAgBC,OAAhB,CAA/B;AACA,cAAMK,MAAM,GAAG,MAAMtB,QAAQ,CAACqB,OAAO,CAACA,OAAT,EAAkBP,OAAO,CAACS,IAAR,CAAaC,MAA/B,CAA7B;;AAEA,YAAIF,MAAM,CAACG,IAAP,KAAgB,MAApB,EAA4B;AAC1B,gBAAMnB,OAAO,CAAC,IAAIoB,KAAJ,CAAW,GAAEV,IAAK,iBAAlB,CAAD,EAAsC,cAAtC,CAAb;AACD;;AAED,YAAI,CAACM,MAAM,CAACK,OAAZ,EAAqB;AACnB,gBAAMrB,OAAO,CAAC,IAAIoB,KAAJ,CAAW,sCAAqCV,IAAK,EAArD,CAAD,EAA0D,gBAA1D,CAAb;AACD;;AAED,mBAAW,MAAMY,GAAjB,IAAwBN,MAAM,CAACK,OAAP,CAAe;AACrClB,UAAAA,MAAM,EAAEQ,OAAO,CAACR,MADqB;AAErCC,UAAAA,MAAM,EAAEO,OAAO,CAACP;AAFqB,SAAf,CAAxB,EAGI;AACF,gBAAMkB,GAAN;AACD;AACF;AAnBI,KAAP;AAqBD;;AAED,SAAOrB,iBAAiB,CAACQ,OAAD,CAAxB;AACD,CAhCD","sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm(path, options = {}) {\n    const res = await api.post('files/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n\n  return rm;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/files/rm.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","rm","path","options","res","post","timeout","signal","searchParams","arg","headers","text"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,EAAf,CAAmBC,IAAnB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADoB;AAErCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFqB;AAGrCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAEP,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHM;AAOrCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPoB,KAArB,CAAlB;AAUA,UAAMN,GAAG,CAACO,IAAJ,EAAN;AACD;;AACD,SAAOV,EAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return rm\n})\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Provider\n} = require('./response-types');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map((\n            /** @type {string} **/\n            a) => new Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n\n  return findProvs;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/dht/find-provs.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","res","post","timeout","signal","searchParams","arg","toString","headers","message","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,SAAjB,CAA4BC,GAA5B,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADyB;AAE1CC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAF0B;AAG1CC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,QAAAA,GAAG,EAAEP,GAAG,CAACQ,QAAJ,EADyB;AAE9B,WAAGP;AAF2B,OAAD,CAHW;AAO1CQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPyB,KAA1B,CAAlB;;AAUA,eAAW,MAAMC,OAAjB,IAA4BR,GAAG,CAACS,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBjB,QAAjB,IAA6Be,OAAO,CAACG,SAAzC,EAAoD;AAClD,aAAK,MAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAX,IAA4BL,OAAO,CAACG,SAApC,EAA+C;AAC7C,gBAAM;AACJG,YAAAA,EAAE,EAAEF,EADA;AAEJG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;AAAC;AAAuBC,YAAAA,CAAxB,KAA8B,IAAI5B,SAAJ,CAAc4B,CAAd,CAAhD;AAFH,WAAN;AAID;AACF;AACF;AACF;;AAED,SAAOpB,SAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ipfs = function () {\n  /**\n   * Namespace ipfs.\n   * @exports ipfs\n   * @namespace\n   */\n  var ipfs = {};\n\n  ipfs.pin = function () {\n    /**\n     * Namespace pin.\n     * @memberof ipfs\n     * @namespace\n     */\n    var pin = {};\n\n    pin.Set = function () {\n      /**\n       * Properties of a Set.\n       * @memberof ipfs.pin\n       * @interface ISet\n       * @property {number|null} [version] Set version\n       * @property {number|null} [fanout] Set fanout\n       * @property {number|null} [seed] Set seed\n       */\n\n      /**\n       * Constructs a new Set.\n       * @memberof ipfs.pin\n       * @classdesc Represents a Set.\n       * @implements ISet\n       * @constructor\n       * @param {ipfs.pin.ISet=} [p] Properties to set\n       */\n      function Set(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * Set version.\n       * @member {number} version\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n\n      Set.prototype.version = 0;\n      /**\n       * Set fanout.\n       * @member {number} fanout\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n      Set.prototype.fanout = 0;\n      /**\n       * Set seed.\n       * @member {number} seed\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n\n      Set.prototype.seed = 0;\n      /**\n       * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n       * @function encode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.ISet} m Set message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      Set.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.version != null && Object.hasOwnProperty.call(m, \"version\")) w.uint32(8).uint32(m.version);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\")) w.uint32(16).uint32(m.fanout);\n        if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\")) w.uint32(29).fixed32(m.seed);\n        return w;\n      };\n      /**\n       * Decodes a Set message from the specified reader or buffer.\n       * @function decode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {ipfs.pin.Set} Set\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Set.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.ipfs.pin.Set();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.version = r.uint32();\n              break;\n\n            case 2:\n              m.fanout = r.uint32();\n              break;\n\n            case 3:\n              m.seed = r.fixed32();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a Set message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {ipfs.pin.Set} Set\n       */\n\n\n      Set.fromObject = function fromObject(d) {\n        if (d instanceof $root.ipfs.pin.Set) return d;\n        var m = new $root.ipfs.pin.Set();\n\n        if (d.version != null) {\n          m.version = d.version >>> 0;\n        }\n\n        if (d.fanout != null) {\n          m.fanout = d.fanout >>> 0;\n        }\n\n        if (d.seed != null) {\n          m.seed = d.seed >>> 0;\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a Set message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.Set} m Set\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Set.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.defaults) {\n          d.version = 0;\n          d.fanout = 0;\n          d.seed = 0;\n        }\n\n        if (m.version != null && m.hasOwnProperty(\"version\")) {\n          d.version = m.version;\n        }\n\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n          d.fanout = m.fanout;\n        }\n\n        if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n          d.seed = m.seed;\n        }\n\n        return d;\n      };\n      /**\n       * Converts this Set to JSON.\n       * @function toJSON\n       * @memberof ipfs.pin.Set\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Set.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Set;\n    }();\n\n    return pin;\n  }();\n\n  return ipfs;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-repo-migrations/migrations/migration-9/pin.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","ipfs","pin","Set","p","ks","Object","keys","i","length","prototype","version","fanout","seed","encode","m","w","create","hasOwnProperty","call","uint32","fixed32","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","toObject","o","defaults","toJSON","constructor","toJSONOptions","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ipfs = (function() {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    var ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        var pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}
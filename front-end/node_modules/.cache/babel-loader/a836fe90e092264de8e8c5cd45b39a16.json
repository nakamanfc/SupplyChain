{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options'); // @ts-ignore no types in multiaddr path\n\n\nconst {\n  dnsaddrResolver\n} = require('multiaddr/src/resolvers');\n\nconst Constants = require('./constants');\n\nconst {\n  AGENT_VERSION\n} = require('./identify/consts');\n\nconst RelayConstants = require('./circuit/constants');\n\nconst {\n  publicAddressesFirst\n} = require('libp2p-utils/src/address-sort');\n\nconst {\n  FaultTolerance\n} = require('./transport-manager');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('.').Libp2pOptions} Libp2pOptions\n * @typedef {import('.').constructorOptions} constructorOptions\n */\n\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (\n    /** @type {Multiaddr[]} */\n    multiaddrs) => multiaddrs\n  },\n  connectionManager: {\n    minConnections: 25\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  host: {\n    agentVersion: AGENT_VERSION\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  config: {\n    protocolPrefix: 'ipfs',\n    dht: {\n      enabled: false,\n      kBucketSize: 20,\n      randomWalk: {\n        enabled: false,\n        // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        queriesPerPeriod: 1,\n        interval: 300e3,\n        timeout: 10e3\n      }\n    },\n    nat: {\n      enabled: true,\n      ttl: 7200,\n      keepAlive: true,\n      gateway: null,\n      externalIp: null,\n      pmp: {\n        enabled: false\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true\n    },\n    relay: {\n      enabled: true,\n      advertise: {\n        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n        enabled: false,\n        ttl: RelayConstants.ADVERTISE_TTL\n      },\n      hop: {\n        enabled: false,\n        active: false\n      },\n      autoRelay: {\n        enabled: false,\n        maxListeners: 2\n      }\n    },\n    transport: {}\n  }\n};\n/**\n * @param {Libp2pOptions} opts\n * @returns {DefaultConfig & Libp2pOptions & constructorOptions}\n */\n\nmodule.exports.validate = opts => {\n  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */\n  const resultingOptions = mergeOptions(DefaultConfig, opts);\n  if (resultingOptions.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\");\n  return resultingOptions;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p/src/config.js"],"names":["mergeOptions","require","dnsaddrResolver","Constants","AGENT_VERSION","RelayConstants","publicAddressesFirst","FaultTolerance","DefaultConfig","addresses","listen","announce","noAnnounce","announceFilter","multiaddrs","connectionManager","minConnections","transportManager","faultTolerance","FATAL_ALL","dialer","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","resolvers","dnsaddr","addressSorter","host","agentVersion","metrics","enabled","peerStore","persistence","threshold","peerRouting","refreshManager","interval","bootDelay","config","protocolPrefix","dht","kBucketSize","randomWalk","queriesPerPeriod","timeout","nat","ttl","keepAlive","gateway","externalIp","pmp","peerDiscovery","autoDial","pubsub","relay","advertise","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","hop","active","autoRelay","maxListeners","transport","module","exports","validate","opts","resultingOptions","modules","length","Error"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options')\n// @ts-ignore no types in multiaddr path\nconst { dnsaddrResolver } = require('multiaddr/src/resolvers')\n\nconst Constants = require('./constants')\nconst { AGENT_VERSION } = require('./identify/consts')\nconst RelayConstants = require('./circuit/constants')\n\nconst { publicAddressesFirst } = require('libp2p-utils/src/address-sort')\nconst { FaultTolerance } = require('./transport-manager')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('.').Libp2pOptions} Libp2pOptions\n * @typedef {import('.').constructorOptions} constructorOptions\n */\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (/** @type {Multiaddr[]} */ multiaddrs) => multiaddrs\n  },\n  connectionManager: {\n    minConnections: 25\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  host: {\n    agentVersion: AGENT_VERSION\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  config: {\n    protocolPrefix: 'ipfs',\n    dht: {\n      enabled: false,\n      kBucketSize: 20,\n      randomWalk: {\n        enabled: false, // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        queriesPerPeriod: 1,\n        interval: 300e3,\n        timeout: 10e3\n      }\n    },\n    nat: {\n      enabled: true,\n      ttl: 7200,\n      keepAlive: true,\n      gateway: null,\n      externalIp: null,\n      pmp: {\n        enabled: false\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true\n    },\n    relay: {\n      enabled: true,\n      advertise: {\n        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n        enabled: false,\n        ttl: RelayConstants.ADVERTISE_TTL\n      },\n      hop: {\n        enabled: false,\n        active: false\n      },\n      autoRelay: {\n        enabled: false,\n        maxListeners: 2\n      }\n    },\n    transport: {}\n  }\n}\n\n/**\n * @param {Libp2pOptions} opts\n * @returns {DefaultConfig & Libp2pOptions & constructorOptions}\n */\nmodule.exports.validate = (opts) => {\n  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */\n  const resultingOptions = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\")\n\n  return resultingOptions\n}\n"]},"metadata":{},"sourceType":"script"}
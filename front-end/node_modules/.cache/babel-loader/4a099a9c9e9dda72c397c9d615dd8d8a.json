{"ast":null,"code":"'use strict';\n\nconst {\n  base64\n} = require('multiformats/bases/base64');\n\nconst ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: async function (privateKey, password) {\n    const cipher = ciphers.create();\n    const encryptedKey = await cipher.encrypt(privateKey, password);\n    return base64.encode(encryptedKey);\n  }\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-crypto/src/keys/exporter.js"],"names":["base64","require","ciphers","module","exports","export","privateKey","password","cipher","create","encryptedKey","encrypt","encode"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,2BAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,EAAE,gBAAgBC,UAAhB,EAA4BC,QAA5B,EAAsC;AAC5C,UAAMC,MAAM,GAAGN,OAAO,CAACO,MAAR,EAAf;AACA,UAAMC,YAAY,GAAG,MAAMF,MAAM,CAACG,OAAP,CAAeL,UAAf,EAA2BC,QAA3B,CAA3B;AACA,WAAOP,MAAM,CAACY,MAAP,CAAcF,YAAd,CAAP;AACD;AAdc,CAAjB","sourcesContent":["'use strict'\n\nconst { base64 } = require('multiformats/bases/base64')\nconst ciphers = require('../ciphers/aes-gcm')\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: async function (privateKey, password) {\n    const cipher = ciphers.create()\n    const encryptedKey = await cipher.encrypt(privateKey, password)\n    return base64.encode(encryptedKey)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar cid = require('multiformats/cid');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar sha2 = require('multiformats/hashes/sha2');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb__namespace;\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha2.sha256;\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n\n  if (options.codec === dagPb__namespace && options.hasher !== sha2.sha256) {\n    options.cidVersion = 1;\n  }\n\n  const multihash = await options.hasher.digest(buffer);\n  const cid$1 = cid.CID.create(options.cidVersion, options.codec.code, multihash);\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid$1, buffer, {\n      signal: options.signal\n    });\n  }\n\n  return cid$1;\n};\n\nmodule.exports = persist;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-importer/cjs/src/utils/persist.js"],"names":["cid","require","dagPb","sha2","_interopNamespace","e","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","dagPb__namespace","persist","buffer","blockstore","options","codec","hasher","sha256","cidVersion","undefined","multihash","digest","cid$1","CID","code","onlyHash","put","signal","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,0BAAD,CAAlB;;AAEA,SAASG,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACC,UAAX,EAAuB,OAAOD,CAAP;AACvB,MAAIE,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIJ,CAAJ,EAAO;AACLG,IAAAA,MAAM,CAACE,IAAP,CAAYL,CAAZ,EAAeM,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGL,MAAM,CAACM,wBAAP,CAAgCT,CAAhC,EAAmCO,CAAnC,CAAR;AACAJ,QAAAA,MAAM,CAACO,cAAP,CAAsBR,CAAtB,EAAyBK,CAAzB,EAA4BC,CAAC,CAACG,GAAF,GAAQH,CAAR,GAAY;AACtCI,UAAAA,UAAU,EAAE,IAD0B;AAEtCD,UAAAA,GAAG,EAAE,YAAY;AACf,mBAAOX,CAAC,CAACO,CAAD,CAAR;AACD;AAJqC,SAAxC;AAMD;AACF,KAVD;AAWD;;AACDL,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeF,CAAf;AACA,SAAOG,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAP;AACD;;AAED,IAAIY,gBAAgB,GAAG,aAAaf,iBAAiB,CAACF,KAAD,CAArD;;AAEA,MAAMkB,OAAO,GAAG,OAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,KAAuC;AACrD,MAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBD,IAAAA,OAAO,CAACC,KAAR,GAAgBL,gBAAhB;AACD;;AACD,MAAI,CAACI,OAAO,CAACE,MAAb,EAAqB;AACnBF,IAAAA,OAAO,CAACE,MAAR,GAAiBtB,IAAI,CAACuB,MAAtB;AACD;;AACD,MAAIH,OAAO,CAACI,UAAR,KAAuBC,SAA3B,EAAsC;AACpCL,IAAAA,OAAO,CAACI,UAAR,GAAqB,CAArB;AACD;;AACD,MAAIJ,OAAO,CAACC,KAAR,KAAkBL,gBAAlB,IAAsCI,OAAO,CAACE,MAAR,KAAmBtB,IAAI,CAACuB,MAAlE,EAA0E;AACxEH,IAAAA,OAAO,CAACI,UAAR,GAAqB,CAArB;AACD;;AACD,QAAME,SAAS,GAAG,MAAMN,OAAO,CAACE,MAAR,CAAeK,MAAf,CAAsBT,MAAtB,CAAxB;AACA,QAAMU,KAAK,GAAG/B,GAAG,CAACgC,GAAJ,CAAQvB,MAAR,CAAec,OAAO,CAACI,UAAvB,EAAmCJ,OAAO,CAACC,KAAR,CAAcS,IAAjD,EAAuDJ,SAAvD,CAAd;;AACA,MAAI,CAACN,OAAO,CAACW,QAAb,EAAuB;AACrB,UAAMZ,UAAU,CAACa,GAAX,CAAeJ,KAAf,EAAsBV,MAAtB,EAA8B;AAAEe,MAAAA,MAAM,EAAEb,OAAO,CAACa;AAAlB,KAA9B,CAAN;AACD;;AACD,SAAOL,KAAP;AACD,CAnBD;;AAqBAM,MAAM,CAACC,OAAP,GAAiBlB,OAAjB","sourcesContent":["'use strict';\n\nvar cid = require('multiformats/cid');\nvar dagPb = require('@ipld/dag-pb');\nvar sha2 = require('multiformats/hashes/sha2');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb__namespace;\n  }\n  if (!options.hasher) {\n    options.hasher = sha2.sha256;\n  }\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n  if (options.codec === dagPb__namespace && options.hasher !== sha2.sha256) {\n    options.cidVersion = 1;\n  }\n  const multihash = await options.hasher.digest(buffer);\n  const cid$1 = cid.CID.create(options.cidVersion, options.codec.code, multihash);\n  if (!options.onlyHash) {\n    await blockstore.put(cid$1, buffer, { signal: options.signal });\n  }\n  return cid$1;\n};\n\nmodule.exports = persist;\n"]},"metadata":{},"sourceType":"script"}
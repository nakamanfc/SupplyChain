{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp(sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => src instanceof CID ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/files/cp.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","cp","sources","destination","options","sourceArr","Array","isArray","res","post","timeout","signal","searchParams","arg","concat","map","src","headers","text"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,EAAf,CAAmBC,OAAnB,EAA4BC,WAA5B,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AACrD;AACA,UAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAArD;AAEA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEN,OAAO,CAACM,OADoB;AAErCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MAFqB;AAGrCC,MAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,QAAAA,GAAG,EAAER,SAAS,CAACS,MAAV,CAAiBX,WAAjB,EAA8BY,GAA9B,CAAkCC,GAAG,IAAIA,GAAG,YAAYtB,GAAf,GAAsB,SAAQsB,GAAI,EAAlC,GAAsCA,GAA/E,CADyB;AAE9B,WAAGZ;AAF2B,OAAD,CAHM;AAOrCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AAPoB,KAArB,CAAlB;AAUA,UAAMT,GAAG,CAACU,IAAJ,EAAN;AACD;;AACD,SAAOjB,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => src instanceof CID ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:repo:utils:walk-dag');\n\nconst Block = require('multiformats/block');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\n\n\nasync function* walkDag(cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options);\n    const codec = await loadCodec(cid.code);\n    const block = Block.createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n\n    for (const [, childCid] of block.links()) {\n      yield childCid;\n      yield* walkDag(childCid, blockstore, loadCodec, options);\n    }\n  } catch (err) {\n    log('Could not walk DAG for CID', cid.toString(), err);\n    throw err;\n  }\n}\n\nmodule.exports = walkDag;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-repo/src/utils/walk-dag.js"],"names":["log","require","Block","walkDag","cid","blockstore","loadCodec","options","bytes","get","codec","code","block","createUnsafe","childCid","links","err","toString","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAZ;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAiBE,OAAjB,CAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,OAAtD,EAA+D;AAC7D,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMH,UAAU,CAACI,GAAX,CAAeL,GAAf,EAAoBG,OAApB,CAApB;AACA,UAAMG,KAAK,GAAG,MAAMJ,SAAS,CAACF,GAAG,CAACO,IAAL,CAA7B;AACA,UAAMC,KAAK,GAAGV,KAAK,CAACW,YAAN,CAAmB;AAAEL,MAAAA,KAAF;AAASJ,MAAAA,GAAT;AAAcM,MAAAA;AAAd,KAAnB,CAAd;;AAEA,SAAK,MAAM,GAAGI,QAAH,CAAX,IAA2BF,KAAK,CAACG,KAAN,EAA3B,EAA0C;AACxC,YAAMD,QAAN;AACA,aAAQX,OAAO,CAACW,QAAD,EAAWT,UAAX,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAf;AACD;AACF,GATD,CASE,OAAOS,GAAP,EAAY;AACZhB,IAAAA,GAAG,CAAC,4BAAD,EAA+BI,GAAG,CAACa,QAAJ,EAA/B,EAA+CD,GAA/C,CAAH;AAEA,UAAMA,GAAN;AACD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiBhB,OAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:utils:walk-dag')\nconst Block = require('multiformats/block')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = Block.createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n\nmodule.exports = walkDag\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"new\"]}\n   */\n  async function _new(options = {}) {\n    let data;\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = new UnixFS({\n          type: 'directory'\n        }).marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    }\n\n    const buf = dagPb.encode({\n      Data: data,\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    const cid = CID.createV0(hash);\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    });\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return cid;\n  }\n\n  return withTimeoutOption(_new);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/object/new.js"],"names":["dagPb","require","sha256","UnixFS","withTimeoutOption","CID","module","exports","repo","preload","_new","options","data","template","type","marshal","Error","buf","encode","Data","Links","hash","digest","cid","createV0","blocks","put","signal"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAUJ,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC;AACF;AACA;AACE,iBAAeC,IAAf,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC,QAAIC,IAAJ;;AAEA,QAAID,OAAO,CAACE,QAAZ,EAAsB;AACpB,UAAIF,OAAO,CAACE,QAAR,KAAqB,YAAzB,EAAuC;AACrCD,QAAAA,IAAI,GAAI,IAAIT,MAAJ,CAAW;AAAEW,UAAAA,IAAI,EAAE;AAAR,SAAX,CAAD,CAAoCC,OAApC,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF;;AAED,UAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAN,CAAa;AACvBC,MAAAA,IAAI,EAAEP,IADiB;AAEvBQ,MAAAA,KAAK,EAAE;AAFgB,KAAb,CAAZ;AAIA,UAAMC,IAAI,GAAG,MAAMnB,MAAM,CAACoB,MAAP,CAAcL,GAAd,CAAnB;AACA,UAAMM,GAAG,GAAGlB,GAAG,CAACmB,QAAJ,CAAaH,IAAb,CAAZ;AAEA,UAAMb,IAAI,CAACiB,MAAL,CAAYC,GAAZ,CAAgBH,GAAhB,EAAqBN,GAArB,EAA0B;AAC9BU,MAAAA,MAAM,EAAEhB,OAAO,CAACgB;AADc,KAA1B,CAAN;;AAIA,QAAIhB,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACc,GAAD,CAAP;AACD;;AAED,WAAOA,GAAP;AACD;;AAED,SAAOnB,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst { UnixFS } = require('ipfs-unixfs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPb.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n"]},"metadata":{},"sourceType":"script"}
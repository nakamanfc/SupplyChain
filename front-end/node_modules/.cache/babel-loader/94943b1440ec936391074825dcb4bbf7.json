{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\mew-supplychain\\\\front-end\\\\src\\\\Component\\\\PostPage\\\\PostBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostImg from '../PostPage/PostImg';\nimport '../../Style/Introduce2.css';\nimport '../../Style/PostBody.css';\nimport PostAdd from './PostAdd';\nimport Web3 from 'web3';\nimport Genesis from '../../abi/GenesisFactory.json';\nimport ProcessBody from './ProcessBody';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  ethereum\n} = window;\nconst web3 = new Web3(Web3.givenProvider || \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\");\nconst GenesisContract = new web3.eth.Contract(Genesis, '0xB21653754E20bf7A4c93F9a9A3E215e4234b70E1');\n\nfunction PostBody() {\n  _s();\n\n  const [ManagerAddress, setManagerAddress] = useState('0x000');\n  const [GenesisAddress, setGenesisAddress] = useState('0x000');\n  const [CompanyName, setCompanyName] = useState('');\n  const [Code, setCode] = useState('');\n  const [Weight, setWeight] = useState(0);\n  const [ProductName, setProductName] = useState('');\n  const [Image, setImage] = useState('');\n  const [wallet, setWallet] = useState('false');\n\n  const isMetaMaskInstalled = () => {\n    if (ethereum && ethereum.isMetaMask) setWallet('True');\n  };\n\n  async function requestWallet() {\n    await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function loadBlockchainData() {\n    const accounts = await web3.eth.getAccounts();\n    setManagerAddress(accounts);\n  }\n\n  function test() {\n    try {\n      GenesisContract.methods.CreateGenesis(CompanyName, ProductName, Image, Code, Weight, GenesisAddress).send({\n        from: `${ManagerAddress}`\n      }).then(console.log);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    isMetaMaskInstalled();\n    requestWallet();\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postbody-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postbody-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postbody-box-left\",\n          children: /*#__PURE__*/_jsxDEV(PostAdd, {\n            setCompanyName: setCompanyName,\n            setCode: setCode,\n            setWeight: setWeight,\n            setProductName: setProductName,\n            setGenesisAddress: setGenesisAddress,\n            test: test\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postbody-box-right\",\n          children: /*#__PURE__*/_jsxDEV(PostImg, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProcessBody, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PostBody, \"1e0EdPV8nbR7Q6KrD4WtsSuTrvE=\");\n\n_c = PostBody;\nexport default PostBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostBody\");","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/src/Component/PostPage/PostBody.js"],"names":["React","useState","useEffect","PostImg","PostAdd","Web3","Genesis","ProcessBody","ethereum","window","web3","givenProvider","GenesisContract","eth","Contract","PostBody","ManagerAddress","setManagerAddress","GenesisAddress","setGenesisAddress","CompanyName","setCompanyName","Code","setCode","Weight","setWeight","ProductName","setProductName","Image","setImage","wallet","setWallet","isMetaMaskInstalled","isMetaMask","requestWallet","request","method","loadBlockchainData","accounts","getAccounts","test","methods","CreateGenesis","send","from","then","console","log","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport PostImg from '../PostPage/PostImg'\r\nimport '../../Style/Introduce2.css'\r\nimport '../../Style/PostBody.css'\r\nimport PostAdd from './PostAdd'\r\nimport Web3 from 'web3'\r\nimport Genesis from '../../abi/GenesisFactory.json'\r\nimport ProcessBody from './ProcessBody'\r\n\r\nconst { ethereum } = window;\r\nconst web3 = new Web3(Web3.givenProvider || \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\")\r\nconst GenesisContract = new web3.eth.Contract(Genesis,'0xB21653754E20bf7A4c93F9a9A3E215e4234b70E1')\r\n\r\nfunction PostBody() {\r\n    const [ManagerAddress, setManagerAddress] = useState('0x000')\r\n    const [GenesisAddress, setGenesisAddress] = useState('0x000')\r\n    const [CompanyName, setCompanyName] = useState('')\r\n    const [Code, setCode] = useState('')\r\n    const [Weight, setWeight] = useState(0)\r\n    const [ProductName, setProductName] = useState('')\r\n    const [Image, setImage] = useState('')\r\n    const [wallet, setWallet] = useState('false')\r\n\r\n    const isMetaMaskInstalled = () => {\r\n        if(ethereum && ethereum.isMetaMask)setWallet('True');\r\n    };\r\n    async function requestWallet() {\r\n        await ethereum.request({ method: 'eth_requestAccounts' });\r\n    }\r\n    async function loadBlockchainData() {\r\n        const accounts = await web3.eth.getAccounts()\r\n        setManagerAddress(accounts)\r\n    }\r\n\r\n    function test(){\r\n        try {\r\n            GenesisContract.methods.CreateGenesis(CompanyName,ProductName,Image,Code,Weight,GenesisAddress).send({from: `${ManagerAddress}`}).then(console.log)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        isMetaMaskInstalled()\r\n        requestWallet()\r\n        loadBlockchainData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {/* <div>{ManagerAddress}</div>\r\n            <div>{CompanyName}</div>\r\n            <div>{Code}</div>\r\n            <div>{Weight}</div>\r\n            <div>{ProductName}</div>\r\n            <div>{GenesisAddress}</div>\r\n            <div>{Image}</div>\r\n            <div>{wallet}</div> */}\r\n        <div className='postbody-container'>\r\n            <div className='postbody-box'>\r\n                <div className='postbody-box-left'>\r\n                    <PostAdd setCompanyName={setCompanyName} setCode={setCode} setWeight={setWeight} setProductName={setProductName} setGenesisAddress={setGenesisAddress} test={test}/>\r\n                </div>\r\n                <div className='postbody-box-right'>\r\n                    <PostImg/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <ProcessBody/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostBody\r\n"]},"metadata":{},"sourceType":"module"}
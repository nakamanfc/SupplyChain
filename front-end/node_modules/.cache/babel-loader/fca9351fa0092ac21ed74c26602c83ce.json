{"ast":null,"code":"'use strict';\n\nconst mkdir = require('./mkdir');\n\nconst stat = require('./stat');\n\nconst log = require('debug')('ipfs:mfs:cp');\n\nconst errCode = require('err-code');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst addLink = require('./utils/add-link');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toTrail = require('./utils/to-trail');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"cp\"]}\n   */\n  async function mfsCp(from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts);\n\n    if (!Array.isArray(from)) {\n      from = [from];\n    }\n\n    const sources = await Promise.all(from.map((\n    /** @type {CID | string} */\n    path) => toMfsPath(context, path, options)));\n    let destination = await toMfsPath(context, to, options);\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');\n    } // make sure all sources exist\n\n\n    const missing = sources.find(source => !source.exists);\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS');\n    }\n\n    const destinationIsDirectory = isDirectory(destination);\n\n    if (destination.exists) {\n      log('Destination exists'); // @ts-ignore ts seems to think `sources` will always have a length of 10\n\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');\n      }\n    } else {\n      log('Destination does not exist');\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n        }\n\n        await mkdir(context)(destination.path, options);\n        destination = await toMfsPath(context, destination.path, options);\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`;\n\n        try {\n          await stat(context)(parentFolder, options);\n        } catch (err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err;\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n          }\n\n          await mkdir(context)(parentFolder, options);\n          destination = await toMfsPath(context, destination.path, options);\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;\n    const trail = await toTrail(context, destinationPath); // @ts-ignore ts seems to think `sources` will always have a length of 10\n\n    if (sources.length === 1) {\n      const source = sources.pop();\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS');\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name;\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`);\n      return copyToFile(context, source, destinationName, trail, options);\n    }\n\n    log('Multiple sources, wrapping in a directory');\n    return copyToDirectory(context, sources, destination, trail, options);\n  }\n\n  return withTimeoutOption(mfsCp);\n};\n/**\n * @param {*} destination\n */\n\n\nconst isDirectory = destination => {\n  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');\n};\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\n\n\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop();\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS');\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options); // update the tree with the new containing directory\n\n  destinationTrail.push(parent);\n  const newRootCid = await updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree\n\n  await updateMfsRoot(context, newRootCid, options);\n};\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\n\n\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i];\n    destination = await addSourceToParent(context, source, source.name, destination, options);\n  } // update the tree with the new containing directory\n\n\n  destinationTrail[destinationTrail.length - 1] = destination;\n  const newRootCid = await updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree\n\n  await updateMfsRoot(context, newRootCid, options);\n};\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\n\n\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid);\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  });\n  parent.node = node;\n  parent.cid = cid;\n  parent.size = size;\n  return parent;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/cp.js"],"names":["mkdir","require","stat","log","errCode","updateTree","updateMfsRoot","addLink","toMfsPath","mergeOptions","bind","ignoreUndefined","toTrail","withTimeoutOption","defaultOptions","parents","flush","hashAlg","cidVersion","shardSplitThreshold","module","exports","context","mfsCp","from","to","opts","options","Array","isArray","sources","Promise","all","map","path","destination","length","Error","missing","find","source","exists","destinationIsDirectory","isDirectory","parts","parentFolder","slice","join","err","code","destinationPath","mfsPath","mfsDirectory","trail","pop","destinationName","name","copyToFile","copyToDirectory","unixfs","type","includes","destinationTrail","parent","addSourceToParent","push","newRootCid","i","childName","sourceBlock","repo","blocks","get","cid","node","size","parentCid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mkdir = require('./mkdir')\nconst stat = require('./stat')\nconst log = require('debug')('ipfs:mfs:cp')\nconst errCode = require('err-code')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst addLink = require('./utils/add-link')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toTrail = require('./utils/to-trail')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"cp\"]}\n   */\n  async function mfsCp (from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(from)) {\n      from = [from]\n    }\n\n    const sources = await Promise.all(\n      from.map((/** @type {CID | string} */ path) => toMfsPath(context, path, options))\n    )\n    let destination = await toMfsPath(context, to, options)\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS')\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists)\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS')\n    }\n\n    const destinationIsDirectory = isDirectory(destination)\n\n    if (destination.exists) {\n      log('Destination exists')\n\n      // @ts-ignore ts seems to think `sources` will always have a length of 10\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS')\n      }\n    } else {\n      log('Destination does not exist')\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n        }\n\n        await mkdir(context)(destination.path, options)\n        destination = await toMfsPath(context, destination.path, options)\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`\n\n        try {\n          await stat(context)(parentFolder, options)\n        } catch (err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n          }\n\n          await mkdir(context)(parentFolder, options)\n          destination = await toMfsPath(context, destination.path, options)\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory\n    const trail = await toTrail(context, destinationPath)\n\n    // @ts-ignore ts seems to think `sources` will always have a length of 10\n    if (sources.length === 1) {\n      const source = sources.pop()\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS')\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name\n\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`)\n\n      return copyToFile(context, source, destinationName, trail, options)\n    }\n\n    log('Multiple sources, wrapping in a directory')\n    return copyToDirectory(context, sources, destination, trail, options)\n  }\n\n  return withTimeoutOption(mfsCp)\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = (destination) => {\n  return destination.unixfs &&\n    destination.unixfs.type &&\n    destination.unixfs.type.includes('directory')\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop()\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS')\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options)\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent)\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n\n    destination = await addSourceToParent(context, source, source.name, destination, options)\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid)\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.node = node\n  parent.cid = cid\n  parent.size = size\n\n  return parent\n}\n"]},"metadata":{},"sourceType":"script"}
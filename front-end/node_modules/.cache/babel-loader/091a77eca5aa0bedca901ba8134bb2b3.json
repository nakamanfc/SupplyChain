{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:bootstrap'), {\n  error: debug('libp2p:bootstrap:error')\n});\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\n\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds\n   *\n   */\n  constructor(options = {\n    list: []\n  }) {\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n\n    super();\n    this._list = options.list;\n    this._interval = options.interval || 10000;\n    this._timer = null;\n  }\n  /**\n   * Start emitting events.\n   */\n\n\n  start() {\n    if (this._timer) {\n      return;\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);\n    log('Starting bootstrap node discovery');\n\n    this._discoverBootstrapPeers();\n  }\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n\n\n  _discoverBootstrapPeers() {\n    if (!this._timer) {\n      return;\n    }\n\n    this._list.forEach(candidate => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr');\n      }\n\n      const ma = new Multiaddr(candidate);\n      const peerIdStr = ma.getPeerId();\n\n      if (!peerIdStr) {\n        log.error('Invalid bootstrap multiaddr without peer id');\n        return;\n      }\n\n      const peerId = PeerId.createFromB58String(peerIdStr);\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        });\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err);\n      }\n    });\n  }\n  /**\n   * Stop emitting events.\n   */\n\n\n  stop() {\n    if (this._timer) clearInterval(this._timer);\n    this._timer = null;\n  }\n\n}\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-bootstrap/src/index.js"],"names":["PeerId","require","Multiaddr","mafmt","EventEmitter","debug","log","Object","assign","error","Bootstrap","constructor","options","list","length","Error","_list","_interval","interval","_timer","start","setInterval","_discoverBootstrapPeers","forEach","candidate","P2P","matches","ma","peerIdStr","getPeerId","peerId","createFromB58String","emit","id","multiaddrs","err","stop","clearInterval","exports","module","tag"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAmBH,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMK,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAAC,kBAAD,CAAnB,EAAyC;AACnDI,EAAAA,KAAK,EAAEJ,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;;AACA,MAAMK,SAAN,SAAwBN,YAAxB,CAAqC;AACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,WAAW,CAAEC,OAAO,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAZ,EAA0B;AACnC,QAAI,CAACD,OAAO,CAACC,IAAT,IAAiB,CAACD,OAAO,CAACC,IAAR,CAAaC,MAAnC,EAA2C;AACzC,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD;AAEA,SAAKC,KAAL,GAAaJ,OAAO,CAACC,IAArB;AACA,SAAKI,SAAL,GAAiBL,OAAO,CAACM,QAAR,IAAoB,KAArC;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,KAAK,GAAI;AACP,QAAI,KAAKD,MAAT,EAAiB;AACf;AACD;;AAED,SAAKA,MAAL,GAAcE,WAAW,CAAC,MAAM,KAAKC,uBAAL,EAAP,EAAuC,KAAKL,SAA5C,CAAzB;AACAX,IAAAA,GAAG,CAAC,mCAAD,CAAH;;AACA,SAAKgB,uBAAL;AACD;AAED;AACF;AACA;;;AACEA,EAAAA,uBAAuB,GAAI;AACzB,QAAI,CAAC,KAAKH,MAAV,EAAkB;AAChB;AACD;;AAED,SAAKH,KAAL,CAAWO,OAAX,CAAoBC,SAAD,IAAe;AAChC,UAAI,CAACrB,KAAK,CAACsB,GAAN,CAAUC,OAAV,CAAkBF,SAAlB,CAAL,EAAmC;AACjC,eAAOlB,GAAG,CAACG,KAAJ,CAAU,mBAAV,CAAP;AACD;;AAED,YAAMkB,EAAE,GAAG,IAAIzB,SAAJ,CAAcsB,SAAd,CAAX;AACA,YAAMI,SAAS,GAAGD,EAAE,CAACE,SAAH,EAAlB;;AAEA,UAAI,CAACD,SAAL,EAAgB;AACdtB,QAAAA,GAAG,CAACG,KAAJ,CAAU,6CAAV;AACA;AACD;;AAED,YAAMqB,MAAM,GAAG9B,MAAM,CAAC+B,mBAAP,CAA2BH,SAA3B,CAAf;;AAEA,UAAI;AACF,aAAKI,IAAL,CAAU,MAAV,EAAkB;AAChBC,UAAAA,EAAE,EAAEH,MADY;AAEhBI,UAAAA,UAAU,EAAE,CAACP,EAAD;AAFI,SAAlB;AAID,OALD,CAKE,OAAOQ,GAAP,EAAY;AACZ7B,QAAAA,GAAG,CAACG,KAAJ,CAAU,2BAAV,EAAuC0B,GAAvC;AACD;AACF,KAvBD;AAwBD;AAED;AACF;AACA;;;AACEC,EAAAA,IAAI,GAAI;AACN,QAAI,KAAKjB,MAAT,EAAiBkB,aAAa,CAAC,KAAKlB,MAAN,CAAb;AACjB,SAAKA,MAAL,GAAc,IAAd;AACD;;AAzEkC;;AA4ErCmB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB5B,SAA3B;AACA4B,OAAO,CAACE,GAAR,GAAc,WAAd","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { EventEmitter } = require('events')\nconst debug = require('debug')\n\nconst log = Object.assign(debug('libp2p:bootstrap'), {\n  error: debug('libp2p:bootstrap:error')\n})\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds\n   *\n   */\n  constructor (options = { list: [] }) {\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this._list = options.list\n    this._interval = options.interval || 10000\n    this._timer = null\n  }\n\n  /**\n   * Start emitting events.\n   */\n  start () {\n    if (this._timer) {\n      return\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval)\n    log('Starting bootstrap node discovery')\n    this._discoverBootstrapPeers()\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n  _discoverBootstrapPeers () {\n    if (!this._timer) {\n      return\n    }\n\n    this._list.forEach((candidate) => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr')\n      }\n\n      const ma = new Multiaddr(candidate)\n      const peerIdStr = ma.getPeerId()\n\n      if (!peerIdStr) {\n        log.error('Invalid bootstrap multiaddr without peer id')\n        return\n      }\n\n      const peerId = PeerId.createFromB58String(peerIdStr)\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        })\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err)\n      }\n    })\n  }\n\n  /**\n   * Stop emitting events.\n   */\n  stop () {\n    if (this._timer) clearInterval(this._timer)\n    this._timer = null\n  }\n}\n\nexports = module.exports = Bootstrap\nexports.tag = 'bootstrap'\n"]},"metadata":{},"sourceType":"script"}
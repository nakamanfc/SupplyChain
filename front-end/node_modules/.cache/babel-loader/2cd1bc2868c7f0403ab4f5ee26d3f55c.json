{"ast":null,"code":"'use strict';\n\nvar dagPb = require('@ipld/dag-pb');\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  function yieldHamtDirectoryContent(options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n\n  return yieldHamtDirectoryContent;\n};\n\nasync function* listDirectory(node, path, resolve, depth, blockstore, options) {\n  const links = node.Links;\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null;\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options);\n      yield result.entry;\n    } else {\n      const block = await blockstore.get(link.Hash);\n      node = dagPb.decode(block);\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file;\n      }\n    }\n  }\n}\n\nmodule.exports = hamtShardedDirectoryContent;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-exporter/cjs/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"names":["dagPb","require","hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldHamtDirectoryContent","options","listDirectory","links","Links","link","name","Name","substring","result","Hash","entry","block","get","decode","file","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMC,2BAA2B,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,UAA1C,KAAyD;AAC3F,WAASC,yBAAT,CAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C,WAAOC,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAApB;AACD;;AACD,SAAOD,yBAAP;AACD,CALD;;AAMA,gBAAgBE,aAAhB,CAA8BR,IAA9B,EAAoCE,IAApC,EAA0CC,OAA1C,EAAmDC,KAAnD,EAA0DC,UAA1D,EAAsEE,OAAtE,EAA+E;AAC7E,QAAME,KAAK,GAAGT,IAAI,CAACU,KAAnB;;AACA,OAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,UAAMG,IAAI,GAAGD,IAAI,CAACE,IAAL,IAAa,IAAb,GAAoBF,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAApB,GAA6C,IAA1D;;AACA,QAAIF,IAAJ,EAAU;AACR,YAAMG,MAAM,GAAG,MAAMZ,OAAO,CAACQ,IAAI,CAACK,IAAN,EAAYJ,IAAZ,EAAmB,GAAGV,IAAM,IAAIU,IAAM,EAAtC,EAAyC,EAAzC,EAA6CR,KAAK,GAAG,CAArD,EAAwDC,UAAxD,EAAoEE,OAApE,CAA5B;AACA,YAAMQ,MAAM,CAACE,KAAb;AACD,KAHD,MAGO;AACL,YAAMC,KAAK,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAeR,IAAI,CAACK,IAApB,CAApB;AACAhB,MAAAA,IAAI,GAAGJ,KAAK,CAACwB,MAAN,CAAaF,KAAb,CAAP;;AACA,iBAAW,MAAMG,IAAjB,IAAyBb,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAAtC,EAAyF;AACvF,cAAMc,IAAN;AACD;AACF;AACF;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBzB,2BAAjB","sourcesContent":["'use strict';\n\nvar dagPb = require('@ipld/dag-pb');\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  function yieldHamtDirectoryContent(options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n  return yieldHamtDirectoryContent;\n};\nasync function* listDirectory(node, path, resolve, depth, blockstore, options) {\n  const links = node.Links;\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null;\n    if (name) {\n      const result = await resolve(link.Hash, name, `${ path }/${ name }`, [], depth + 1, blockstore, options);\n      yield result.entry;\n    } else {\n      const block = await blockstore.get(link.Hash);\n      node = dagPb.decode(block);\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file;\n      }\n    }\n  }\n}\n\nmodule.exports = hamtShardedDirectoryContent;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst {\n  Record: PBRecord\n} = require('./record');\n\nconst utils = require('../utils');\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor(key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = timeReceived;\n  }\n\n  serialize() {\n    return PBRecord.encode(this.prepareSerialize()).finish();\n  }\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n\n\n  prepareSerialize() {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    };\n  }\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n\n\n  static deserialize(raw) {\n    const message = PBRecord.decode(raw);\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }));\n  }\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n\n\n  static fromDeserialized(obj) {\n    let recvtime;\n\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived);\n    }\n\n    const rec = new Record(obj.key, obj.value, recvtime);\n    return rec;\n  }\n\n}\n\nmodule.exports = Record;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-record/src/record/index.js"],"names":["Record","PBRecord","require","utils","constructor","key","value","timeReceived","Uint8Array","Error","serialize","encode","prepareSerialize","finish","toRFC3339","deserialize","raw","message","decode","fromDeserialized","toObject","defaults","arrays","longs","Number","objects","obj","recvtime","parseRFC3339","rec","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AACJA,EAAAA,MAAM,EAAEC;AADJ,IAEFC,OAAO,CAAC,UAAD,CAFX;;AAGA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;;;AAEA,MAAMF,MAAN,CAAa;AACX;AACF;AACA;AACA;AACA;AACEI,EAAAA,WAAW,CAAEC,GAAF,EAAOC,KAAP,EAAcC,YAAd,EAA4B;AACrC,QAAI,EAAEF,GAAG,YAAYG,UAAjB,CAAJ,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,QAAI,EAAEH,KAAK,YAAYE,UAAnB,CAAJ,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AAEDG,EAAAA,SAAS,GAAI;AACX,WAAOT,QAAQ,CAACU,MAAT,CAAgB,KAAKC,gBAAL,EAAhB,EAAyCC,MAAzC,EAAP;AACD;AAED;AACF;AACA;;;AACED,EAAAA,gBAAgB,GAAI;AAClB,WAAO;AACLP,MAAAA,GAAG,EAAE,KAAKA,GADL;AAELC,MAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLC,MAAAA,YAAY,EAAE,KAAKA,YAAL,IAAqBJ,KAAK,CAACW,SAAN,CAAgB,KAAKP,YAArB;AAH9B,KAAP;AAKD;AAED;AACF;AACA;AACA;AACA;;;AACoB,SAAXQ,WAAW,CAAEC,GAAF,EAAO;AACvB,UAAMC,OAAO,GAAGhB,QAAQ,CAACiB,MAAT,CAAgBF,GAAhB,CAAhB;AACA,WAAOhB,MAAM,CAACmB,gBAAP,CAAwBlB,QAAQ,CAACmB,QAAT,CAAkBH,OAAlB,EAA2B;AACxDI,MAAAA,QAAQ,EAAE,KAD8C;AAExDC,MAAAA,MAAM,EAAE,IAFgD;AAGxDC,MAAAA,KAAK,EAAEC,MAHiD;AAIxDC,MAAAA,OAAO,EAAE;AAJ+C,KAA3B,CAAxB,CAAP;AAMD;AAED;AACF;AACA;AACA;AACA;;;AACyB,SAAhBN,gBAAgB,CAAEO,GAAF,EAAO;AAC5B,QAAIC,QAAJ;;AACA,QAAID,GAAG,CAACnB,YAAR,EAAsB;AACpBoB,MAAAA,QAAQ,GAAGxB,KAAK,CAACyB,YAAN,CAAmBF,GAAG,CAACnB,YAAvB,CAAX;AACD;;AAED,UAAMsB,GAAG,GAAG,IAAI7B,MAAJ,CACV0B,GAAG,CAACrB,GADM,EACDqB,GAAG,CAACpB,KADH,EACUqB,QADV,CAAZ;AAIA,WAAOE,GAAP;AACD;;AAlEU;;AAqEbC,MAAM,CAACC,OAAP,GAAiB/B,MAAjB","sourcesContent":["'use strict'\n\nconst {\n  Record: PBRecord\n} = require('./record')\nconst utils = require('../utils')\n\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor (key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = timeReceived\n  }\n\n  serialize () {\n    return PBRecord.encode(this.prepareSerialize()).finish()\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n  prepareSerialize () {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n  static deserialize (raw) {\n    const message = PBRecord.decode(raw)\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }))\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n  static fromDeserialized (obj) {\n    let recvtime\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived)\n    }\n\n    const rec = new Record(\n      obj.key, obj.value, recvtime\n    )\n\n    return rec\n  }\n}\n\nmodule.exports = Record\n"]},"metadata":{},"sourceType":"script"}
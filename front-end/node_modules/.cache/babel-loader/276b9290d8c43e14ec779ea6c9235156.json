{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  async function peers(options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    const peers = [];\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        };\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = []; // TODO: get this from libp2p\n        }\n\n        peers.push(peer);\n      }\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption(peers);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/swarm/peers.js"],"names":["withTimeoutOption","require","module","exports","network","peers","options","libp2p","use","peerId","connections","connection","peer","addr","remoteAddr","verbose","direction","stat","muxer","multiplexer","latency","streams","push"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAzB;AACA,UAAMD,KAAK,GAAG,EAAd;;AAEA,SAAK,MAAM,CAACI,MAAD,EAASC,WAAT,CAAX,IAAoCH,MAAM,CAACG,WAA3C,EAAwD;AACtD,WAAK,MAAMC,UAAX,IAAyBD,WAAzB,EAAsC;AACpC;AACA,cAAME,IAAI,GAAG;AACXC,UAAAA,IAAI,EAAEF,UAAU,CAACG,UADN;AAEXF,UAAAA,IAAI,EAAEH;AAFK,SAAb;;AAKA,YAAIH,OAAO,CAACS,OAAR,IAAmBT,OAAO,CAACU,SAA/B,EAA0C;AACxCJ,UAAAA,IAAI,CAACI,SAAL,GAAiBL,UAAU,CAACM,IAAX,CAAgBD,SAAjC;AACD;;AAED,YAAIV,OAAO,CAACS,OAAZ,EAAqB;AACnBH,UAAAA,IAAI,CAACM,KAAL,GAAaP,UAAU,CAACM,IAAX,CAAgBE,WAA7B;AACAP,UAAAA,IAAI,CAACQ,OAAL,GAAe,KAAf;AACAR,UAAAA,IAAI,CAACS,OAAL,GAAe,EAAf,CAHmB,CAGD;AACnB;;AAEDhB,QAAAA,KAAK,CAACiB,IAAN,CAAWV,IAAX;AACD;AACF;;AAED,WAAOP,KAAP;AACD;;AAED,SAAOL,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n    const peers = []\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n    }\n\n    return peers\n  }\n\n  return withTimeoutOption(peers)\n}\n"]},"metadata":{},"sourceType":"script"}
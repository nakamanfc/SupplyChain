{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-circuit\"] || ($protobuf.roots[\"libp2p-circuit\"] = {});\n\n$root.CircuitRelay = function () {\n  /**\n   * Properties of a CircuitRelay.\n   * @exports ICircuitRelay\n   * @interface ICircuitRelay\n   * @property {CircuitRelay.Type|null} [type] CircuitRelay type\n   * @property {CircuitRelay.IPeer|null} [srcPeer] CircuitRelay srcPeer\n   * @property {CircuitRelay.IPeer|null} [dstPeer] CircuitRelay dstPeer\n   * @property {CircuitRelay.Status|null} [code] CircuitRelay code\n   */\n\n  /**\n   * Constructs a new CircuitRelay.\n   * @exports CircuitRelay\n   * @classdesc Represents a CircuitRelay.\n   * @implements ICircuitRelay\n   * @constructor\n   * @param {ICircuitRelay=} [p] Properties to set\n   */\n  function CircuitRelay(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * CircuitRelay type.\n   * @member {CircuitRelay.Type} type\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n\n  CircuitRelay.prototype.type = 1;\n  /**\n   * CircuitRelay srcPeer.\n   * @member {CircuitRelay.IPeer|null|undefined} srcPeer\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.srcPeer = null;\n  /**\n   * CircuitRelay dstPeer.\n   * @member {CircuitRelay.IPeer|null|undefined} dstPeer\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.dstPeer = null;\n  /**\n   * CircuitRelay code.\n   * @member {CircuitRelay.Status} code\n   * @memberof CircuitRelay\n   * @instance\n   */\n\n  CircuitRelay.prototype.code = 100;\n  /**\n   * Encodes the specified CircuitRelay message. Does not implicitly {@link CircuitRelay.verify|verify} messages.\n   * @function encode\n   * @memberof CircuitRelay\n   * @static\n   * @param {ICircuitRelay} m CircuitRelay message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  CircuitRelay.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.type != null && Object.hasOwnProperty.call(m, \"type\")) w.uint32(8).int32(m.type);\n    if (m.srcPeer != null && Object.hasOwnProperty.call(m, \"srcPeer\")) $root.CircuitRelay.Peer.encode(m.srcPeer, w.uint32(18).fork()).ldelim();\n    if (m.dstPeer != null && Object.hasOwnProperty.call(m, \"dstPeer\")) $root.CircuitRelay.Peer.encode(m.dstPeer, w.uint32(26).fork()).ldelim();\n    if (m.code != null && Object.hasOwnProperty.call(m, \"code\")) w.uint32(32).int32(m.code);\n    return w;\n  };\n  /**\n   * Decodes a CircuitRelay message from the specified reader or buffer.\n   * @function decode\n   * @memberof CircuitRelay\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {CircuitRelay} CircuitRelay\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  CircuitRelay.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.CircuitRelay();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.type = r.int32();\n          break;\n\n        case 2:\n          m.srcPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n          break;\n\n        case 3:\n          m.dstPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n          break;\n\n        case 4:\n          m.code = r.int32();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a CircuitRelay message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof CircuitRelay\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {CircuitRelay} CircuitRelay\n   */\n\n\n  CircuitRelay.fromObject = function fromObject(d) {\n    if (d instanceof $root.CircuitRelay) return d;\n    var m = new $root.CircuitRelay();\n\n    switch (d.type) {\n      case \"HOP\":\n      case 1:\n        m.type = 1;\n        break;\n\n      case \"STOP\":\n      case 2:\n        m.type = 2;\n        break;\n\n      case \"STATUS\":\n      case 3:\n        m.type = 3;\n        break;\n\n      case \"CAN_HOP\":\n      case 4:\n        m.type = 4;\n        break;\n    }\n\n    if (d.srcPeer != null) {\n      if (typeof d.srcPeer !== \"object\") throw TypeError(\".CircuitRelay.srcPeer: object expected\");\n      m.srcPeer = $root.CircuitRelay.Peer.fromObject(d.srcPeer);\n    }\n\n    if (d.dstPeer != null) {\n      if (typeof d.dstPeer !== \"object\") throw TypeError(\".CircuitRelay.dstPeer: object expected\");\n      m.dstPeer = $root.CircuitRelay.Peer.fromObject(d.dstPeer);\n    }\n\n    switch (d.code) {\n      case \"SUCCESS\":\n      case 100:\n        m.code = 100;\n        break;\n\n      case \"HOP_SRC_ADDR_TOO_LONG\":\n      case 220:\n        m.code = 220;\n        break;\n\n      case \"HOP_DST_ADDR_TOO_LONG\":\n      case 221:\n        m.code = 221;\n        break;\n\n      case \"HOP_SRC_MULTIADDR_INVALID\":\n      case 250:\n        m.code = 250;\n        break;\n\n      case \"HOP_DST_MULTIADDR_INVALID\":\n      case 251:\n        m.code = 251;\n        break;\n\n      case \"HOP_NO_CONN_TO_DST\":\n      case 260:\n        m.code = 260;\n        break;\n\n      case \"HOP_CANT_DIAL_DST\":\n      case 261:\n        m.code = 261;\n        break;\n\n      case \"HOP_CANT_OPEN_DST_STREAM\":\n      case 262:\n        m.code = 262;\n        break;\n\n      case \"HOP_CANT_SPEAK_RELAY\":\n      case 270:\n        m.code = 270;\n        break;\n\n      case \"HOP_CANT_RELAY_TO_SELF\":\n      case 280:\n        m.code = 280;\n        break;\n\n      case \"STOP_SRC_ADDR_TOO_LONG\":\n      case 320:\n        m.code = 320;\n        break;\n\n      case \"STOP_DST_ADDR_TOO_LONG\":\n      case 321:\n        m.code = 321;\n        break;\n\n      case \"STOP_SRC_MULTIADDR_INVALID\":\n      case 350:\n        m.code = 350;\n        break;\n\n      case \"STOP_DST_MULTIADDR_INVALID\":\n      case 351:\n        m.code = 351;\n        break;\n\n      case \"STOP_RELAY_REFUSED\":\n      case 390:\n        m.code = 390;\n        break;\n\n      case \"MALFORMED_MESSAGE\":\n      case 400:\n        m.code = 400;\n        break;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a CircuitRelay message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof CircuitRelay\n   * @static\n   * @param {CircuitRelay} m CircuitRelay\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  CircuitRelay.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.type = o.enums === String ? \"HOP\" : 1;\n      d.srcPeer = null;\n      d.dstPeer = null;\n      d.code = o.enums === String ? \"SUCCESS\" : 100;\n    }\n\n    if (m.type != null && m.hasOwnProperty(\"type\")) {\n      d.type = o.enums === String ? $root.CircuitRelay.Type[m.type] : m.type;\n    }\n\n    if (m.srcPeer != null && m.hasOwnProperty(\"srcPeer\")) {\n      d.srcPeer = $root.CircuitRelay.Peer.toObject(m.srcPeer, o);\n    }\n\n    if (m.dstPeer != null && m.hasOwnProperty(\"dstPeer\")) {\n      d.dstPeer = $root.CircuitRelay.Peer.toObject(m.dstPeer, o);\n    }\n\n    if (m.code != null && m.hasOwnProperty(\"code\")) {\n      d.code = o.enums === String ? $root.CircuitRelay.Status[m.code] : m.code;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this CircuitRelay to JSON.\n   * @function toJSON\n   * @memberof CircuitRelay\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  CircuitRelay.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  /**\n   * Status enum.\n   * @name CircuitRelay.Status\n   * @enum {number}\n   * @property {number} SUCCESS=100 SUCCESS value\n   * @property {number} HOP_SRC_ADDR_TOO_LONG=220 HOP_SRC_ADDR_TOO_LONG value\n   * @property {number} HOP_DST_ADDR_TOO_LONG=221 HOP_DST_ADDR_TOO_LONG value\n   * @property {number} HOP_SRC_MULTIADDR_INVALID=250 HOP_SRC_MULTIADDR_INVALID value\n   * @property {number} HOP_DST_MULTIADDR_INVALID=251 HOP_DST_MULTIADDR_INVALID value\n   * @property {number} HOP_NO_CONN_TO_DST=260 HOP_NO_CONN_TO_DST value\n   * @property {number} HOP_CANT_DIAL_DST=261 HOP_CANT_DIAL_DST value\n   * @property {number} HOP_CANT_OPEN_DST_STREAM=262 HOP_CANT_OPEN_DST_STREAM value\n   * @property {number} HOP_CANT_SPEAK_RELAY=270 HOP_CANT_SPEAK_RELAY value\n   * @property {number} HOP_CANT_RELAY_TO_SELF=280 HOP_CANT_RELAY_TO_SELF value\n   * @property {number} STOP_SRC_ADDR_TOO_LONG=320 STOP_SRC_ADDR_TOO_LONG value\n   * @property {number} STOP_DST_ADDR_TOO_LONG=321 STOP_DST_ADDR_TOO_LONG value\n   * @property {number} STOP_SRC_MULTIADDR_INVALID=350 STOP_SRC_MULTIADDR_INVALID value\n   * @property {number} STOP_DST_MULTIADDR_INVALID=351 STOP_DST_MULTIADDR_INVALID value\n   * @property {number} STOP_RELAY_REFUSED=390 STOP_RELAY_REFUSED value\n   * @property {number} MALFORMED_MESSAGE=400 MALFORMED_MESSAGE value\n   */\n\n\n  CircuitRelay.Status = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[100] = \"SUCCESS\"] = 100;\n    values[valuesById[220] = \"HOP_SRC_ADDR_TOO_LONG\"] = 220;\n    values[valuesById[221] = \"HOP_DST_ADDR_TOO_LONG\"] = 221;\n    values[valuesById[250] = \"HOP_SRC_MULTIADDR_INVALID\"] = 250;\n    values[valuesById[251] = \"HOP_DST_MULTIADDR_INVALID\"] = 251;\n    values[valuesById[260] = \"HOP_NO_CONN_TO_DST\"] = 260;\n    values[valuesById[261] = \"HOP_CANT_DIAL_DST\"] = 261;\n    values[valuesById[262] = \"HOP_CANT_OPEN_DST_STREAM\"] = 262;\n    values[valuesById[270] = \"HOP_CANT_SPEAK_RELAY\"] = 270;\n    values[valuesById[280] = \"HOP_CANT_RELAY_TO_SELF\"] = 280;\n    values[valuesById[320] = \"STOP_SRC_ADDR_TOO_LONG\"] = 320;\n    values[valuesById[321] = \"STOP_DST_ADDR_TOO_LONG\"] = 321;\n    values[valuesById[350] = \"STOP_SRC_MULTIADDR_INVALID\"] = 350;\n    values[valuesById[351] = \"STOP_DST_MULTIADDR_INVALID\"] = 351;\n    values[valuesById[390] = \"STOP_RELAY_REFUSED\"] = 390;\n    values[valuesById[400] = \"MALFORMED_MESSAGE\"] = 400;\n    return values;\n  }();\n  /**\n   * Type enum.\n   * @name CircuitRelay.Type\n   * @enum {number}\n   * @property {number} HOP=1 HOP value\n   * @property {number} STOP=2 STOP value\n   * @property {number} STATUS=3 STATUS value\n   * @property {number} CAN_HOP=4 CAN_HOP value\n   */\n\n\n  CircuitRelay.Type = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[1] = \"HOP\"] = 1;\n    values[valuesById[2] = \"STOP\"] = 2;\n    values[valuesById[3] = \"STATUS\"] = 3;\n    values[valuesById[4] = \"CAN_HOP\"] = 4;\n    return values;\n  }();\n\n  CircuitRelay.Peer = function () {\n    /**\n     * Properties of a Peer.\n     * @memberof CircuitRelay\n     * @interface IPeer\n     * @property {Uint8Array} id Peer id\n     * @property {Array.<Uint8Array>|null} [addrs] Peer addrs\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @memberof CircuitRelay\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {CircuitRelay.IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n      this.addrs = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Peer id.\n     * @member {Uint8Array} id\n     * @memberof CircuitRelay.Peer\n     * @instance\n     */\n\n\n    Peer.prototype.id = $util.newBuffer([]);\n    /**\n     * Peer addrs.\n     * @member {Array.<Uint8Array>} addrs\n     * @memberof CircuitRelay.Peer\n     * @instance\n     */\n\n    Peer.prototype.addrs = $util.emptyArray;\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link CircuitRelay.Peer.verify|verify} messages.\n     * @function encode\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {CircuitRelay.IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Peer.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      w.uint32(10).bytes(m.id);\n\n      if (m.addrs != null && m.addrs.length) {\n        for (var i = 0; i < m.addrs.length; ++i) w.uint32(18).bytes(m.addrs[i]);\n      }\n\n      return w;\n    };\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {CircuitRelay.Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Peer.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.CircuitRelay.Peer();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.id = r.bytes();\n            break;\n\n          case 2:\n            if (!(m.addrs && m.addrs.length)) m.addrs = [];\n            m.addrs.push(r.bytes());\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      if (!m.hasOwnProperty(\"id\")) throw $util.ProtocolError(\"missing required 'id'\", {\n        instance: m\n      });\n      return m;\n    };\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {CircuitRelay.Peer} Peer\n     */\n\n\n    Peer.fromObject = function fromObject(d) {\n      if (d instanceof $root.CircuitRelay.Peer) return d;\n      var m = new $root.CircuitRelay.Peer();\n\n      if (d.id != null) {\n        if (typeof d.id === \"string\") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);else if (d.id.length) m.id = d.id;\n      }\n\n      if (d.addrs) {\n        if (!Array.isArray(d.addrs)) throw TypeError(\".CircuitRelay.Peer.addrs: array expected\");\n        m.addrs = [];\n\n        for (var i = 0; i < d.addrs.length; ++i) {\n          if (typeof d.addrs[i] === \"string\") $util.base64.decode(d.addrs[i], m.addrs[i] = $util.newBuffer($util.base64.length(d.addrs[i])), 0);else if (d.addrs[i].length) m.addrs[i] = d.addrs[i];\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CircuitRelay.Peer\n     * @static\n     * @param {CircuitRelay.Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Peer.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.arrays || o.defaults) {\n        d.addrs = [];\n      }\n\n      if (o.defaults) {\n        if (o.bytes === String) d.id = \"\";else {\n          d.id = [];\n          if (o.bytes !== Array) d.id = $util.newBuffer(d.id);\n        }\n      }\n\n      if (m.id != null && m.hasOwnProperty(\"id\")) {\n        d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;\n      }\n\n      if (m.addrs && m.addrs.length) {\n        d.addrs = [];\n\n        for (var j = 0; j < m.addrs.length; ++j) {\n          d.addrs[j] = o.bytes === String ? $util.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];\n        }\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof CircuitRelay.Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Peer.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n  }();\n\n  return CircuitRelay;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p/src/circuit/protocol/index.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","CircuitRelay","p","ks","Object","keys","i","length","prototype","type","srcPeer","dstPeer","code","encode","m","w","create","hasOwnProperty","call","uint32","int32","Peer","fork","ldelim","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","TypeError","toObject","o","defaults","enums","String","Type","Status","toJSON","constructor","toJSONOptions","valuesById","values","addrs","id","newBuffer","emptyArray","bytes","push","ProtocolError","instance","base64","Array","isArray","arrays","slice","j","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB,C,CAEA;;;AACA,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAxB;AAAA,IAAgCC,OAAO,GAAGJ,SAAS,CAACK,MAApD;AAAA,IAA4DC,KAAK,GAAGN,SAAS,CAACO,IAA9E,C,CAEA;;AACA,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAV,CAAgB,gBAAhB,MAAsCT,SAAS,CAACS,KAAV,CAAgB,gBAAhB,IAAoC,EAA1E,CAAZ;;AAEAD,KAAK,CAACE,YAAN,GAAsB,YAAW;AAE7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,QAAIA,CAAJ,EACI,KAAK,IAAIC,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYH,CAAZ,CAAT,EAAyBI,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGH,EAAE,CAACI,MAA5C,EAAoD,EAAED,CAAtD,EACI,IAAIJ,CAAC,CAACC,EAAE,CAACG,CAAD,CAAH,CAAD,IAAY,IAAhB,EACI,KAAKH,EAAE,CAACG,CAAD,CAAP,IAAcJ,CAAC,CAACC,EAAE,CAACG,CAAD,CAAH,CAAf;AACf;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,YAAY,CAACO,SAAb,CAAuBC,IAAvB,GAA8B,CAA9B;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIR,EAAAA,YAAY,CAACO,SAAb,CAAuBE,OAAvB,GAAiC,IAAjC;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIT,EAAAA,YAAY,CAACO,SAAb,CAAuBG,OAAvB,GAAiC,IAAjC;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIV,EAAAA,YAAY,CAACO,SAAb,CAAuBI,IAAvB,GAA8B,GAA9B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIX,EAAAA,YAAY,CAACY,MAAb,GAAsB,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACxC,QAAI,CAACA,CAAL,EACIA,CAAC,GAAGpB,OAAO,CAACqB,MAAR,EAAJ;AACJ,QAAIF,CAAC,CAACL,IAAF,IAAU,IAAV,IAAkBL,MAAM,CAACa,cAAP,CAAsBC,IAAtB,CAA2BJ,CAA3B,EAA8B,MAA9B,CAAtB,EACIC,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYC,KAAZ,CAAkBN,CAAC,CAACL,IAApB;AACJ,QAAIK,CAAC,CAACJ,OAAF,IAAa,IAAb,IAAqBN,MAAM,CAACa,cAAP,CAAsBC,IAAtB,CAA2BJ,CAA3B,EAA8B,SAA9B,CAAzB,EACIf,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBR,MAAxB,CAA+BC,CAAC,CAACJ,OAAjC,EAA0CK,CAAC,CAACI,MAAF,CAAS,EAAT,EAAaG,IAAb,EAA1C,EAA+DC,MAA/D;AACJ,QAAIT,CAAC,CAACH,OAAF,IAAa,IAAb,IAAqBP,MAAM,CAACa,cAAP,CAAsBC,IAAtB,CAA2BJ,CAA3B,EAA8B,SAA9B,CAAzB,EACIf,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBR,MAAxB,CAA+BC,CAAC,CAACH,OAAjC,EAA0CI,CAAC,CAACI,MAAF,CAAS,EAAT,EAAaG,IAAb,EAA1C,EAA+DC,MAA/D;AACJ,QAAIT,CAAC,CAACF,IAAF,IAAU,IAAV,IAAkBR,MAAM,CAACa,cAAP,CAAsBC,IAAtB,CAA2BJ,CAA3B,EAA8B,MAA9B,CAAtB,EACIC,CAAC,CAACI,MAAF,CAAS,EAAT,EAAaC,KAAb,CAAmBN,CAAC,CAACF,IAArB;AACJ,WAAOG,CAAP;AACH,GAZD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACId,EAAAA,YAAY,CAACuB,MAAb,GAAsB,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACxC,QAAI,EAAED,CAAC,YAAYhC,OAAf,CAAJ,EACIgC,CAAC,GAAGhC,OAAO,CAACuB,MAAR,CAAeS,CAAf,CAAJ;AACJ,QAAIE,CAAC,GAAGD,CAAC,KAAKE,SAAN,GAAkBH,CAAC,CAACI,GAApB,GAA0BJ,CAAC,CAACK,GAAF,GAAQJ,CAA1C;AAAA,QAA6CZ,CAAC,GAAG,IAAIf,KAAK,CAACE,YAAV,EAAjD;;AACA,WAAOwB,CAAC,CAACK,GAAF,GAAQH,CAAf,EAAkB;AACd,UAAII,CAAC,GAAGN,CAAC,CAACN,MAAF,EAAR;;AACA,cAAQY,CAAC,KAAK,CAAd;AACA,aAAK,CAAL;AACIjB,UAAAA,CAAC,CAACL,IAAF,GAASgB,CAAC,CAACL,KAAF,EAAT;AACA;;AACJ,aAAK,CAAL;AACIN,UAAAA,CAAC,CAACJ,OAAF,GAAYX,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBG,MAAxB,CAA+BC,CAA/B,EAAkCA,CAAC,CAACN,MAAF,EAAlC,CAAZ;AACA;;AACJ,aAAK,CAAL;AACIL,UAAAA,CAAC,CAACH,OAAF,GAAYZ,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBG,MAAxB,CAA+BC,CAA/B,EAAkCA,CAAC,CAACN,MAAF,EAAlC,CAAZ;AACA;;AACJ,aAAK,CAAL;AACIL,UAAAA,CAAC,CAACF,IAAF,GAASa,CAAC,CAACL,KAAF,EAAT;AACA;;AACJ;AACIK,UAAAA,CAAC,CAACO,QAAF,CAAWD,CAAC,GAAG,CAAf;AACA;AAfJ;AAiBH;;AACD,WAAOjB,CAAP;AACH,GAzBD;AA2BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIb,EAAAA,YAAY,CAACgC,UAAb,GAA0B,SAASA,UAAT,CAAoBC,CAApB,EAAuB;AAC7C,QAAIA,CAAC,YAAYnC,KAAK,CAACE,YAAvB,EACI,OAAOiC,CAAP;AACJ,QAAIpB,CAAC,GAAG,IAAIf,KAAK,CAACE,YAAV,EAAR;;AACA,YAAQiC,CAAC,CAACzB,IAAV;AACA,WAAK,KAAL;AACA,WAAK,CAAL;AACIK,QAAAA,CAAC,CAACL,IAAF,GAAS,CAAT;AACA;;AACJ,WAAK,MAAL;AACA,WAAK,CAAL;AACIK,QAAAA,CAAC,CAACL,IAAF,GAAS,CAAT;AACA;;AACJ,WAAK,QAAL;AACA,WAAK,CAAL;AACIK,QAAAA,CAAC,CAACL,IAAF,GAAS,CAAT;AACA;;AACJ,WAAK,SAAL;AACA,WAAK,CAAL;AACIK,QAAAA,CAAC,CAACL,IAAF,GAAS,CAAT;AACA;AAhBJ;;AAkBA,QAAIyB,CAAC,CAACxB,OAAF,IAAa,IAAjB,EAAuB;AACnB,UAAI,OAAOwB,CAAC,CAACxB,OAAT,KAAqB,QAAzB,EACI,MAAMyB,SAAS,CAAC,wCAAD,CAAf;AACJrB,MAAAA,CAAC,CAACJ,OAAF,GAAYX,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBY,UAAxB,CAAmCC,CAAC,CAACxB,OAArC,CAAZ;AACH;;AACD,QAAIwB,CAAC,CAACvB,OAAF,IAAa,IAAjB,EAAuB;AACnB,UAAI,OAAOuB,CAAC,CAACvB,OAAT,KAAqB,QAAzB,EACI,MAAMwB,SAAS,CAAC,wCAAD,CAAf;AACJrB,MAAAA,CAAC,CAACH,OAAF,GAAYZ,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBY,UAAxB,CAAmCC,CAAC,CAACvB,OAArC,CAAZ;AACH;;AACD,YAAQuB,CAAC,CAACtB,IAAV;AACA,WAAK,SAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,uBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,uBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,2BAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,2BAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,oBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,mBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,0BAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,sBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,wBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,wBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,wBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,4BAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,4BAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,oBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;;AACJ,WAAK,mBAAL;AACA,WAAK,GAAL;AACIE,QAAAA,CAAC,CAACF,IAAF,GAAS,GAAT;AACA;AAhEJ;;AAkEA,WAAOE,CAAP;AACH,GAnGD;AAqGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIb,EAAAA,YAAY,CAACmC,QAAb,GAAwB,SAASA,QAAT,CAAkBtB,CAAlB,EAAqBuB,CAArB,EAAwB;AAC5C,QAAI,CAACA,CAAL,EACIA,CAAC,GAAG,EAAJ;AACJ,QAAIH,CAAC,GAAG,EAAR;;AACA,QAAIG,CAAC,CAACC,QAAN,EAAgB;AACZJ,MAAAA,CAAC,CAACzB,IAAF,GAAS4B,CAAC,CAACE,KAAF,KAAYC,MAAZ,GAAqB,KAArB,GAA6B,CAAtC;AACAN,MAAAA,CAAC,CAACxB,OAAF,GAAY,IAAZ;AACAwB,MAAAA,CAAC,CAACvB,OAAF,GAAY,IAAZ;AACAuB,MAAAA,CAAC,CAACtB,IAAF,GAASyB,CAAC,CAACE,KAAF,KAAYC,MAAZ,GAAqB,SAArB,GAAiC,GAA1C;AACH;;AACD,QAAI1B,CAAC,CAACL,IAAF,IAAU,IAAV,IAAkBK,CAAC,CAACG,cAAF,CAAiB,MAAjB,CAAtB,EAAgD;AAC5CiB,MAAAA,CAAC,CAACzB,IAAF,GAAS4B,CAAC,CAACE,KAAF,KAAYC,MAAZ,GAAqBzC,KAAK,CAACE,YAAN,CAAmBwC,IAAnB,CAAwB3B,CAAC,CAACL,IAA1B,CAArB,GAAuDK,CAAC,CAACL,IAAlE;AACH;;AACD,QAAIK,CAAC,CAACJ,OAAF,IAAa,IAAb,IAAqBI,CAAC,CAACG,cAAF,CAAiB,SAAjB,CAAzB,EAAsD;AAClDiB,MAAAA,CAAC,CAACxB,OAAF,GAAYX,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBe,QAAxB,CAAiCtB,CAAC,CAACJ,OAAnC,EAA4C2B,CAA5C,CAAZ;AACH;;AACD,QAAIvB,CAAC,CAACH,OAAF,IAAa,IAAb,IAAqBG,CAAC,CAACG,cAAF,CAAiB,SAAjB,CAAzB,EAAsD;AAClDiB,MAAAA,CAAC,CAACvB,OAAF,GAAYZ,KAAK,CAACE,YAAN,CAAmBoB,IAAnB,CAAwBe,QAAxB,CAAiCtB,CAAC,CAACH,OAAnC,EAA4C0B,CAA5C,CAAZ;AACH;;AACD,QAAIvB,CAAC,CAACF,IAAF,IAAU,IAAV,IAAkBE,CAAC,CAACG,cAAF,CAAiB,MAAjB,CAAtB,EAAgD;AAC5CiB,MAAAA,CAAC,CAACtB,IAAF,GAASyB,CAAC,CAACE,KAAF,KAAYC,MAAZ,GAAqBzC,KAAK,CAACE,YAAN,CAAmByC,MAAnB,CAA0B5B,CAAC,CAACF,IAA5B,CAArB,GAAyDE,CAAC,CAACF,IAApE;AACH;;AACD,WAAOsB,CAAP;AACH,GAvBD;AAyBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,YAAY,CAACO,SAAb,CAAuBmC,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAC9C,WAAO,KAAKC,WAAL,CAAiBR,QAAjB,CAA0B,IAA1B,EAAgC7C,SAAS,CAACO,IAAV,CAAe+C,aAA/C,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5C,EAAAA,YAAY,CAACyC,MAAb,GAAuB,YAAW;AAC9B,QAAII,UAAU,GAAG,EAAjB;AAAA,QAAqBC,MAAM,GAAG3C,MAAM,CAACY,MAAP,CAAc8B,UAAd,CAA9B;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,SAAnB,CAAN,GAAsC,GAAtC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,uBAAnB,CAAN,GAAoD,GAApD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,uBAAnB,CAAN,GAAoD,GAApD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,2BAAnB,CAAN,GAAwD,GAAxD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,2BAAnB,CAAN,GAAwD,GAAxD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,oBAAnB,CAAN,GAAiD,GAAjD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,mBAAnB,CAAN,GAAgD,GAAhD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,0BAAnB,CAAN,GAAuD,GAAvD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,sBAAnB,CAAN,GAAmD,GAAnD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,wBAAnB,CAAN,GAAqD,GAArD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,wBAAnB,CAAN,GAAqD,GAArD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,wBAAnB,CAAN,GAAqD,GAArD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,4BAAnB,CAAN,GAAyD,GAAzD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,4BAAnB,CAAN,GAAyD,GAAzD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,oBAAnB,CAAN,GAAiD,GAAjD;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,GAAD,CAAV,GAAkB,mBAAnB,CAAN,GAAgD,GAAhD;AACA,WAAOC,MAAP;AACH,GAnBqB,EAAtB;AAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9C,EAAAA,YAAY,CAACwC,IAAb,GAAqB,YAAW;AAC5B,QAAIK,UAAU,GAAG,EAAjB;AAAA,QAAqBC,MAAM,GAAG3C,MAAM,CAACY,MAAP,CAAc8B,UAAd,CAA9B;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,KAAjB,CAAN,GAAgC,CAAhC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAjB,CAAN,GAAiC,CAAjC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,QAAjB,CAAN,GAAmC,CAAnC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,SAAjB,CAAN,GAAoC,CAApC;AACA,WAAOC,MAAP;AACH,GAPmB,EAApB;;AASA9C,EAAAA,YAAY,CAACoB,IAAb,GAAqB,YAAW;AAE5B;AACR;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,IAAT,CAAcnB,CAAd,EAAiB;AACb,WAAK8C,KAAL,GAAa,EAAb;AACA,UAAI9C,CAAJ,EACI,KAAK,IAAIC,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYH,CAAZ,CAAT,EAAyBI,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGH,EAAE,CAACI,MAA5C,EAAoD,EAAED,CAAtD,EACI,IAAIJ,CAAC,CAACC,EAAE,CAACG,CAAD,CAAH,CAAD,IAAY,IAAhB,EACI,KAAKH,EAAE,CAACG,CAAD,CAAP,IAAcJ,CAAC,CAACC,EAAE,CAACG,CAAD,CAAH,CAAf;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQe,IAAAA,IAAI,CAACb,SAAL,CAAeyC,EAAf,GAAoBpD,KAAK,CAACqD,SAAN,CAAgB,EAAhB,CAApB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ7B,IAAAA,IAAI,CAACb,SAAL,CAAewC,KAAf,GAAuBnD,KAAK,CAACsD,UAA7B;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ9B,IAAAA,IAAI,CAACR,MAAL,GAAc,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC,UAAI,CAACA,CAAL,EACIA,CAAC,GAAGpB,OAAO,CAACqB,MAAR,EAAJ;AACJD,MAAAA,CAAC,CAACI,MAAF,CAAS,EAAT,EAAaiC,KAAb,CAAmBtC,CAAC,CAACmC,EAArB;;AACA,UAAInC,CAAC,CAACkC,KAAF,IAAW,IAAX,IAAmBlC,CAAC,CAACkC,KAAF,CAAQzC,MAA/B,EAAuC;AACnC,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,CAAC,CAACkC,KAAF,CAAQzC,MAA5B,EAAoC,EAAED,CAAtC,EACIS,CAAC,CAACI,MAAF,CAAS,EAAT,EAAaiC,KAAb,CAAmBtC,CAAC,CAACkC,KAAF,CAAQ1C,CAAR,CAAnB;AACP;;AACD,aAAOS,CAAP;AACH,KATD;AAWA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQM,IAAAA,IAAI,CAACG,MAAL,GAAc,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC,UAAI,EAAED,CAAC,YAAYhC,OAAf,CAAJ,EACIgC,CAAC,GAAGhC,OAAO,CAACuB,MAAR,CAAeS,CAAf,CAAJ;AACJ,UAAIE,CAAC,GAAGD,CAAC,KAAKE,SAAN,GAAkBH,CAAC,CAACI,GAApB,GAA0BJ,CAAC,CAACK,GAAF,GAAQJ,CAA1C;AAAA,UAA6CZ,CAAC,GAAG,IAAIf,KAAK,CAACE,YAAN,CAAmBoB,IAAvB,EAAjD;;AACA,aAAOI,CAAC,CAACK,GAAF,GAAQH,CAAf,EAAkB;AACd,YAAII,CAAC,GAAGN,CAAC,CAACN,MAAF,EAAR;;AACA,gBAAQY,CAAC,KAAK,CAAd;AACA,eAAK,CAAL;AACIjB,YAAAA,CAAC,CAACmC,EAAF,GAAOxB,CAAC,CAAC2B,KAAF,EAAP;AACA;;AACJ,eAAK,CAAL;AACI,gBAAI,EAAEtC,CAAC,CAACkC,KAAF,IAAWlC,CAAC,CAACkC,KAAF,CAAQzC,MAArB,CAAJ,EACIO,CAAC,CAACkC,KAAF,GAAU,EAAV;AACJlC,YAAAA,CAAC,CAACkC,KAAF,CAAQK,IAAR,CAAa5B,CAAC,CAAC2B,KAAF,EAAb;AACA;;AACJ;AACI3B,YAAAA,CAAC,CAACO,QAAF,CAAWD,CAAC,GAAG,CAAf;AACA;AAXJ;AAaH;;AACD,UAAI,CAACjB,CAAC,CAACG,cAAF,CAAiB,IAAjB,CAAL,EACI,MAAMpB,KAAK,CAACyD,aAAN,CAAoB,uBAApB,EAA6C;AAAEC,QAAAA,QAAQ,EAAEzC;AAAZ,OAA7C,CAAN;AACJ,aAAOA,CAAP;AACH,KAvBD;AAyBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQO,IAAAA,IAAI,CAACY,UAAL,GAAkB,SAASA,UAAT,CAAoBC,CAApB,EAAuB;AACrC,UAAIA,CAAC,YAAYnC,KAAK,CAACE,YAAN,CAAmBoB,IAApC,EACI,OAAOa,CAAP;AACJ,UAAIpB,CAAC,GAAG,IAAIf,KAAK,CAACE,YAAN,CAAmBoB,IAAvB,EAAR;;AACA,UAAIa,CAAC,CAACe,EAAF,IAAQ,IAAZ,EAAkB;AACd,YAAI,OAAOf,CAAC,CAACe,EAAT,KAAgB,QAApB,EACIpD,KAAK,CAAC2D,MAAN,CAAahC,MAAb,CAAoBU,CAAC,CAACe,EAAtB,EAA0BnC,CAAC,CAACmC,EAAF,GAAOpD,KAAK,CAACqD,SAAN,CAAgBrD,KAAK,CAAC2D,MAAN,CAAajD,MAAb,CAAoB2B,CAAC,CAACe,EAAtB,CAAhB,CAAjC,EAA6E,CAA7E,EADJ,KAEK,IAAIf,CAAC,CAACe,EAAF,CAAK1C,MAAT,EACDO,CAAC,CAACmC,EAAF,GAAOf,CAAC,CAACe,EAAT;AACP;;AACD,UAAIf,CAAC,CAACc,KAAN,EAAa;AACT,YAAI,CAACS,KAAK,CAACC,OAAN,CAAcxB,CAAC,CAACc,KAAhB,CAAL,EACI,MAAMb,SAAS,CAAC,0CAAD,CAAf;AACJrB,QAAAA,CAAC,CAACkC,KAAF,GAAU,EAAV;;AACA,aAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,CAAC,CAACc,KAAF,CAAQzC,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACrC,cAAI,OAAO4B,CAAC,CAACc,KAAF,CAAQ1C,CAAR,CAAP,KAAsB,QAA1B,EACIT,KAAK,CAAC2D,MAAN,CAAahC,MAAb,CAAoBU,CAAC,CAACc,KAAF,CAAQ1C,CAAR,CAApB,EAAgCQ,CAAC,CAACkC,KAAF,CAAQ1C,CAAR,IAAaT,KAAK,CAACqD,SAAN,CAAgBrD,KAAK,CAAC2D,MAAN,CAAajD,MAAb,CAAoB2B,CAAC,CAACc,KAAF,CAAQ1C,CAAR,CAApB,CAAhB,CAA7C,EAA+F,CAA/F,EADJ,KAEK,IAAI4B,CAAC,CAACc,KAAF,CAAQ1C,CAAR,EAAWC,MAAf,EACDO,CAAC,CAACkC,KAAF,CAAQ1C,CAAR,IAAa4B,CAAC,CAACc,KAAF,CAAQ1C,CAAR,CAAb;AACP;AACJ;;AACD,aAAOQ,CAAP;AACH,KAtBD;AAwBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQO,IAAAA,IAAI,CAACe,QAAL,GAAgB,SAASA,QAAT,CAAkBtB,CAAlB,EAAqBuB,CAArB,EAAwB;AACpC,UAAI,CAACA,CAAL,EACIA,CAAC,GAAG,EAAJ;AACJ,UAAIH,CAAC,GAAG,EAAR;;AACA,UAAIG,CAAC,CAACsB,MAAF,IAAYtB,CAAC,CAACC,QAAlB,EAA4B;AACxBJ,QAAAA,CAAC,CAACc,KAAF,GAAU,EAAV;AACH;;AACD,UAAIX,CAAC,CAACC,QAAN,EAAgB;AACZ,YAAID,CAAC,CAACe,KAAF,KAAYZ,MAAhB,EACIN,CAAC,CAACe,EAAF,GAAO,EAAP,CADJ,KAEK;AACDf,UAAAA,CAAC,CAACe,EAAF,GAAO,EAAP;AACA,cAAIZ,CAAC,CAACe,KAAF,KAAYK,KAAhB,EACIvB,CAAC,CAACe,EAAF,GAAOpD,KAAK,CAACqD,SAAN,CAAgBhB,CAAC,CAACe,EAAlB,CAAP;AACP;AACJ;;AACD,UAAInC,CAAC,CAACmC,EAAF,IAAQ,IAAR,IAAgBnC,CAAC,CAACG,cAAF,CAAiB,IAAjB,CAApB,EAA4C;AACxCiB,QAAAA,CAAC,CAACe,EAAF,GAAOZ,CAAC,CAACe,KAAF,KAAYZ,MAAZ,GAAqB3C,KAAK,CAAC2D,MAAN,CAAa3C,MAAb,CAAoBC,CAAC,CAACmC,EAAtB,EAA0B,CAA1B,EAA6BnC,CAAC,CAACmC,EAAF,CAAK1C,MAAlC,CAArB,GAAiE8B,CAAC,CAACe,KAAF,KAAYK,KAAZ,GAAoBA,KAAK,CAACjD,SAAN,CAAgBoD,KAAhB,CAAsB1C,IAAtB,CAA2BJ,CAAC,CAACmC,EAA7B,CAApB,GAAuDnC,CAAC,CAACmC,EAAjI;AACH;;AACD,UAAInC,CAAC,CAACkC,KAAF,IAAWlC,CAAC,CAACkC,KAAF,CAAQzC,MAAvB,EAA+B;AAC3B2B,QAAAA,CAAC,CAACc,KAAF,GAAU,EAAV;;AACA,aAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,CAAC,CAACkC,KAAF,CAAQzC,MAA5B,EAAoC,EAAEsD,CAAtC,EAAyC;AACrC3B,UAAAA,CAAC,CAACc,KAAF,CAAQa,CAAR,IAAaxB,CAAC,CAACe,KAAF,KAAYZ,MAAZ,GAAqB3C,KAAK,CAAC2D,MAAN,CAAa3C,MAAb,CAAoBC,CAAC,CAACkC,KAAF,CAAQa,CAAR,CAApB,EAAgC,CAAhC,EAAmC/C,CAAC,CAACkC,KAAF,CAAQa,CAAR,EAAWtD,MAA9C,CAArB,GAA6E8B,CAAC,CAACe,KAAF,KAAYK,KAAZ,GAAoBA,KAAK,CAACjD,SAAN,CAAgBoD,KAAhB,CAAsB1C,IAAtB,CAA2BJ,CAAC,CAACkC,KAAF,CAAQa,CAAR,CAA3B,CAApB,GAA6D/C,CAAC,CAACkC,KAAF,CAAQa,CAAR,CAAvJ;AACH;AACJ;;AACD,aAAO3B,CAAP;AACH,KA1BD;AA4BA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQb,IAAAA,IAAI,CAACb,SAAL,CAAemC,MAAf,GAAwB,SAASA,MAAT,GAAkB;AACtC,aAAO,KAAKC,WAAL,CAAiBR,QAAjB,CAA0B,IAA1B,EAAgC7C,SAAS,CAACO,IAAV,CAAe+C,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOxB,IAAP;AACH,GAnLmB,EAApB;;AAqLA,SAAOpB,YAAP;AACH,CApgBoB,EAArB;;AAsgBA6D,MAAM,CAACC,OAAP,GAAiBhE,KAAjB","sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-circuit\"] || ($protobuf.roots[\"libp2p-circuit\"] = {});\n\n$root.CircuitRelay = (function() {\n\n    /**\n     * Properties of a CircuitRelay.\n     * @exports ICircuitRelay\n     * @interface ICircuitRelay\n     * @property {CircuitRelay.Type|null} [type] CircuitRelay type\n     * @property {CircuitRelay.IPeer|null} [srcPeer] CircuitRelay srcPeer\n     * @property {CircuitRelay.IPeer|null} [dstPeer] CircuitRelay dstPeer\n     * @property {CircuitRelay.Status|null} [code] CircuitRelay code\n     */\n\n    /**\n     * Constructs a new CircuitRelay.\n     * @exports CircuitRelay\n     * @classdesc Represents a CircuitRelay.\n     * @implements ICircuitRelay\n     * @constructor\n     * @param {ICircuitRelay=} [p] Properties to set\n     */\n    function CircuitRelay(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * CircuitRelay type.\n     * @member {CircuitRelay.Type} type\n     * @memberof CircuitRelay\n     * @instance\n     */\n    CircuitRelay.prototype.type = 1;\n\n    /**\n     * CircuitRelay srcPeer.\n     * @member {CircuitRelay.IPeer|null|undefined} srcPeer\n     * @memberof CircuitRelay\n     * @instance\n     */\n    CircuitRelay.prototype.srcPeer = null;\n\n    /**\n     * CircuitRelay dstPeer.\n     * @member {CircuitRelay.IPeer|null|undefined} dstPeer\n     * @memberof CircuitRelay\n     * @instance\n     */\n    CircuitRelay.prototype.dstPeer = null;\n\n    /**\n     * CircuitRelay code.\n     * @member {CircuitRelay.Status} code\n     * @memberof CircuitRelay\n     * @instance\n     */\n    CircuitRelay.prototype.code = 100;\n\n    /**\n     * Encodes the specified CircuitRelay message. Does not implicitly {@link CircuitRelay.verify|verify} messages.\n     * @function encode\n     * @memberof CircuitRelay\n     * @static\n     * @param {ICircuitRelay} m CircuitRelay message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CircuitRelay.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.type != null && Object.hasOwnProperty.call(m, \"type\"))\n            w.uint32(8).int32(m.type);\n        if (m.srcPeer != null && Object.hasOwnProperty.call(m, \"srcPeer\"))\n            $root.CircuitRelay.Peer.encode(m.srcPeer, w.uint32(18).fork()).ldelim();\n        if (m.dstPeer != null && Object.hasOwnProperty.call(m, \"dstPeer\"))\n            $root.CircuitRelay.Peer.encode(m.dstPeer, w.uint32(26).fork()).ldelim();\n        if (m.code != null && Object.hasOwnProperty.call(m, \"code\"))\n            w.uint32(32).int32(m.code);\n        return w;\n    };\n\n    /**\n     * Decodes a CircuitRelay message from the specified reader or buffer.\n     * @function decode\n     * @memberof CircuitRelay\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {CircuitRelay} CircuitRelay\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CircuitRelay.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.CircuitRelay();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.type = r.int32();\n                break;\n            case 2:\n                m.srcPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n                break;\n            case 3:\n                m.dstPeer = $root.CircuitRelay.Peer.decode(r, r.uint32());\n                break;\n            case 4:\n                m.code = r.int32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a CircuitRelay message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CircuitRelay\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {CircuitRelay} CircuitRelay\n     */\n    CircuitRelay.fromObject = function fromObject(d) {\n        if (d instanceof $root.CircuitRelay)\n            return d;\n        var m = new $root.CircuitRelay();\n        switch (d.type) {\n        case \"HOP\":\n        case 1:\n            m.type = 1;\n            break;\n        case \"STOP\":\n        case 2:\n            m.type = 2;\n            break;\n        case \"STATUS\":\n        case 3:\n            m.type = 3;\n            break;\n        case \"CAN_HOP\":\n        case 4:\n            m.type = 4;\n            break;\n        }\n        if (d.srcPeer != null) {\n            if (typeof d.srcPeer !== \"object\")\n                throw TypeError(\".CircuitRelay.srcPeer: object expected\");\n            m.srcPeer = $root.CircuitRelay.Peer.fromObject(d.srcPeer);\n        }\n        if (d.dstPeer != null) {\n            if (typeof d.dstPeer !== \"object\")\n                throw TypeError(\".CircuitRelay.dstPeer: object expected\");\n            m.dstPeer = $root.CircuitRelay.Peer.fromObject(d.dstPeer);\n        }\n        switch (d.code) {\n        case \"SUCCESS\":\n        case 100:\n            m.code = 100;\n            break;\n        case \"HOP_SRC_ADDR_TOO_LONG\":\n        case 220:\n            m.code = 220;\n            break;\n        case \"HOP_DST_ADDR_TOO_LONG\":\n        case 221:\n            m.code = 221;\n            break;\n        case \"HOP_SRC_MULTIADDR_INVALID\":\n        case 250:\n            m.code = 250;\n            break;\n        case \"HOP_DST_MULTIADDR_INVALID\":\n        case 251:\n            m.code = 251;\n            break;\n        case \"HOP_NO_CONN_TO_DST\":\n        case 260:\n            m.code = 260;\n            break;\n        case \"HOP_CANT_DIAL_DST\":\n        case 261:\n            m.code = 261;\n            break;\n        case \"HOP_CANT_OPEN_DST_STREAM\":\n        case 262:\n            m.code = 262;\n            break;\n        case \"HOP_CANT_SPEAK_RELAY\":\n        case 270:\n            m.code = 270;\n            break;\n        case \"HOP_CANT_RELAY_TO_SELF\":\n        case 280:\n            m.code = 280;\n            break;\n        case \"STOP_SRC_ADDR_TOO_LONG\":\n        case 320:\n            m.code = 320;\n            break;\n        case \"STOP_DST_ADDR_TOO_LONG\":\n        case 321:\n            m.code = 321;\n            break;\n        case \"STOP_SRC_MULTIADDR_INVALID\":\n        case 350:\n            m.code = 350;\n            break;\n        case \"STOP_DST_MULTIADDR_INVALID\":\n        case 351:\n            m.code = 351;\n            break;\n        case \"STOP_RELAY_REFUSED\":\n        case 390:\n            m.code = 390;\n            break;\n        case \"MALFORMED_MESSAGE\":\n        case 400:\n            m.code = 400;\n            break;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a CircuitRelay message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CircuitRelay\n     * @static\n     * @param {CircuitRelay} m CircuitRelay\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CircuitRelay.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.type = o.enums === String ? \"HOP\" : 1;\n            d.srcPeer = null;\n            d.dstPeer = null;\n            d.code = o.enums === String ? \"SUCCESS\" : 100;\n        }\n        if (m.type != null && m.hasOwnProperty(\"type\")) {\n            d.type = o.enums === String ? $root.CircuitRelay.Type[m.type] : m.type;\n        }\n        if (m.srcPeer != null && m.hasOwnProperty(\"srcPeer\")) {\n            d.srcPeer = $root.CircuitRelay.Peer.toObject(m.srcPeer, o);\n        }\n        if (m.dstPeer != null && m.hasOwnProperty(\"dstPeer\")) {\n            d.dstPeer = $root.CircuitRelay.Peer.toObject(m.dstPeer, o);\n        }\n        if (m.code != null && m.hasOwnProperty(\"code\")) {\n            d.code = o.enums === String ? $root.CircuitRelay.Status[m.code] : m.code;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this CircuitRelay to JSON.\n     * @function toJSON\n     * @memberof CircuitRelay\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CircuitRelay.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Status enum.\n     * @name CircuitRelay.Status\n     * @enum {number}\n     * @property {number} SUCCESS=100 SUCCESS value\n     * @property {number} HOP_SRC_ADDR_TOO_LONG=220 HOP_SRC_ADDR_TOO_LONG value\n     * @property {number} HOP_DST_ADDR_TOO_LONG=221 HOP_DST_ADDR_TOO_LONG value\n     * @property {number} HOP_SRC_MULTIADDR_INVALID=250 HOP_SRC_MULTIADDR_INVALID value\n     * @property {number} HOP_DST_MULTIADDR_INVALID=251 HOP_DST_MULTIADDR_INVALID value\n     * @property {number} HOP_NO_CONN_TO_DST=260 HOP_NO_CONN_TO_DST value\n     * @property {number} HOP_CANT_DIAL_DST=261 HOP_CANT_DIAL_DST value\n     * @property {number} HOP_CANT_OPEN_DST_STREAM=262 HOP_CANT_OPEN_DST_STREAM value\n     * @property {number} HOP_CANT_SPEAK_RELAY=270 HOP_CANT_SPEAK_RELAY value\n     * @property {number} HOP_CANT_RELAY_TO_SELF=280 HOP_CANT_RELAY_TO_SELF value\n     * @property {number} STOP_SRC_ADDR_TOO_LONG=320 STOP_SRC_ADDR_TOO_LONG value\n     * @property {number} STOP_DST_ADDR_TOO_LONG=321 STOP_DST_ADDR_TOO_LONG value\n     * @property {number} STOP_SRC_MULTIADDR_INVALID=350 STOP_SRC_MULTIADDR_INVALID value\n     * @property {number} STOP_DST_MULTIADDR_INVALID=351 STOP_DST_MULTIADDR_INVALID value\n     * @property {number} STOP_RELAY_REFUSED=390 STOP_RELAY_REFUSED value\n     * @property {number} MALFORMED_MESSAGE=400 MALFORMED_MESSAGE value\n     */\n    CircuitRelay.Status = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[100] = \"SUCCESS\"] = 100;\n        values[valuesById[220] = \"HOP_SRC_ADDR_TOO_LONG\"] = 220;\n        values[valuesById[221] = \"HOP_DST_ADDR_TOO_LONG\"] = 221;\n        values[valuesById[250] = \"HOP_SRC_MULTIADDR_INVALID\"] = 250;\n        values[valuesById[251] = \"HOP_DST_MULTIADDR_INVALID\"] = 251;\n        values[valuesById[260] = \"HOP_NO_CONN_TO_DST\"] = 260;\n        values[valuesById[261] = \"HOP_CANT_DIAL_DST\"] = 261;\n        values[valuesById[262] = \"HOP_CANT_OPEN_DST_STREAM\"] = 262;\n        values[valuesById[270] = \"HOP_CANT_SPEAK_RELAY\"] = 270;\n        values[valuesById[280] = \"HOP_CANT_RELAY_TO_SELF\"] = 280;\n        values[valuesById[320] = \"STOP_SRC_ADDR_TOO_LONG\"] = 320;\n        values[valuesById[321] = \"STOP_DST_ADDR_TOO_LONG\"] = 321;\n        values[valuesById[350] = \"STOP_SRC_MULTIADDR_INVALID\"] = 350;\n        values[valuesById[351] = \"STOP_DST_MULTIADDR_INVALID\"] = 351;\n        values[valuesById[390] = \"STOP_RELAY_REFUSED\"] = 390;\n        values[valuesById[400] = \"MALFORMED_MESSAGE\"] = 400;\n        return values;\n    })();\n\n    /**\n     * Type enum.\n     * @name CircuitRelay.Type\n     * @enum {number}\n     * @property {number} HOP=1 HOP value\n     * @property {number} STOP=2 STOP value\n     * @property {number} STATUS=3 STATUS value\n     * @property {number} CAN_HOP=4 CAN_HOP value\n     */\n    CircuitRelay.Type = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[1] = \"HOP\"] = 1;\n        values[valuesById[2] = \"STOP\"] = 2;\n        values[valuesById[3] = \"STATUS\"] = 3;\n        values[valuesById[4] = \"CAN_HOP\"] = 4;\n        return values;\n    })();\n\n    CircuitRelay.Peer = (function() {\n\n        /**\n         * Properties of a Peer.\n         * @memberof CircuitRelay\n         * @interface IPeer\n         * @property {Uint8Array} id Peer id\n         * @property {Array.<Uint8Array>|null} [addrs] Peer addrs\n         */\n\n        /**\n         * Constructs a new Peer.\n         * @memberof CircuitRelay\n         * @classdesc Represents a Peer.\n         * @implements IPeer\n         * @constructor\n         * @param {CircuitRelay.IPeer=} [p] Properties to set\n         */\n        function Peer(p) {\n            this.addrs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Peer id.\n         * @member {Uint8Array} id\n         * @memberof CircuitRelay.Peer\n         * @instance\n         */\n        Peer.prototype.id = $util.newBuffer([]);\n\n        /**\n         * Peer addrs.\n         * @member {Array.<Uint8Array>} addrs\n         * @memberof CircuitRelay.Peer\n         * @instance\n         */\n        Peer.prototype.addrs = $util.emptyArray;\n\n        /**\n         * Encodes the specified Peer message. Does not implicitly {@link CircuitRelay.Peer.verify|verify} messages.\n         * @function encode\n         * @memberof CircuitRelay.Peer\n         * @static\n         * @param {CircuitRelay.IPeer} m Peer message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Peer.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            w.uint32(10).bytes(m.id);\n            if (m.addrs != null && m.addrs.length) {\n                for (var i = 0; i < m.addrs.length; ++i)\n                    w.uint32(18).bytes(m.addrs[i]);\n            }\n            return w;\n        };\n\n        /**\n         * Decodes a Peer message from the specified reader or buffer.\n         * @function decode\n         * @memberof CircuitRelay.Peer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {CircuitRelay.Peer} Peer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Peer.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.CircuitRelay.Peer();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.id = r.bytes();\n                    break;\n                case 2:\n                    if (!(m.addrs && m.addrs.length))\n                        m.addrs = [];\n                    m.addrs.push(r.bytes());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            if (!m.hasOwnProperty(\"id\"))\n                throw $util.ProtocolError(\"missing required 'id'\", { instance: m });\n            return m;\n        };\n\n        /**\n         * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof CircuitRelay.Peer\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {CircuitRelay.Peer} Peer\n         */\n        Peer.fromObject = function fromObject(d) {\n            if (d instanceof $root.CircuitRelay.Peer)\n                return d;\n            var m = new $root.CircuitRelay.Peer();\n            if (d.id != null) {\n                if (typeof d.id === \"string\")\n                    $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);\n                else if (d.id.length)\n                    m.id = d.id;\n            }\n            if (d.addrs) {\n                if (!Array.isArray(d.addrs))\n                    throw TypeError(\".CircuitRelay.Peer.addrs: array expected\");\n                m.addrs = [];\n                for (var i = 0; i < d.addrs.length; ++i) {\n                    if (typeof d.addrs[i] === \"string\")\n                        $util.base64.decode(d.addrs[i], m.addrs[i] = $util.newBuffer($util.base64.length(d.addrs[i])), 0);\n                    else if (d.addrs[i].length)\n                        m.addrs[i] = d.addrs[i];\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Peer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof CircuitRelay.Peer\n         * @static\n         * @param {CircuitRelay.Peer} m Peer\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Peer.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.addrs = [];\n            }\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.id = \"\";\n                else {\n                    d.id = [];\n                    if (o.bytes !== Array)\n                        d.id = $util.newBuffer(d.id);\n                }\n            }\n            if (m.id != null && m.hasOwnProperty(\"id\")) {\n                d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;\n            }\n            if (m.addrs && m.addrs.length) {\n                d.addrs = [];\n                for (var j = 0; j < m.addrs.length; ++j) {\n                    d.addrs[j] = o.bytes === String ? $util.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];\n                }\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Peer to JSON.\n         * @function toJSON\n         * @memberof CircuitRelay.Peer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Peer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Peer;\n    })();\n\n    return CircuitRelay;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst {\n  Key\n} = require('interface-datastore'); // @ts-ignore\n\n\nconst distance = require('xor-distance');\n\nconst pMap = require('p-map');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst PeerId = require('peer-id');\n\nconst errcode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst pTimeout = require('p-timeout');\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertBuffer = async buf => {\n  return (await sha256.digest(buf)).digest;\n};\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertPeerId = async peer => {\n  return (await sha256.digest(peer.id)).digest;\n};\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\n\n\nexports.bufferToKey = buf => {\n  return new Key('/' + exports.encodeBase32(buf), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\n\n\nexports.keyForPublicKey = peer => {\n  return uint8ArrayConcat([uint8ArrayFromString('/pk/'), peer.id]);\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.isPublicKeyKey = key => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/';\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.fromPublicKeyKey = key => {\n  return new PeerId(key.slice(4));\n};\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\n\n\nexports.now = () => {\n  return Date.now();\n};\n/**\n * Encode a given Uint8Array into a base32 string.\n *\n * @param {Uint8Array} buf\n * @returns {string}\n */\n\n\nexports.encodeBase32 = buf => {\n  return uint8ArrayToString(buf, 'base32');\n};\n/**\n * Decode a given base32 string into a Uint8Array.\n *\n * @param {string} raw\n * @returns {Uint8Array}\n */\n\n\nexports.decodeBase32 = raw => {\n  return uint8ArrayFromString(raw, 'base32');\n};\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Uint8Array} target\n */\n\n\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async peer => {\n    const id = await exports.convertPeerId(peer);\n    return {\n      peer: peer,\n      distance: distance(id, target)\n    };\n  });\n  return distances.sort(exports.xorCompare).map(d => d.peer);\n};\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {{ distance: Uint8Array }} a\n * @param {{ distance: Uint8Array }} b\n */\n\n\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance);\n};\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n */\n\n\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths);\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\n\n\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date();\n  const rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n */\n\n\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`);\n  } // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.b = v => {\n    return base58btc.baseEncode(v);\n  };\n\n  const logger = Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  });\n  return logger;\n};\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code() {\n    return 'ETIMEDOUT';\n  }\n\n};\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @template T\n * @param {(...args: any[]) => Promise<T>} asyncFn\n * @param {number} [time]\n */\n\nexports.withTimeout = (asyncFn, time) => {\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  async function timeoutFn(...args) {\n    if (!time) {\n      return asyncFn(...args);\n    }\n\n    let res;\n\n    try {\n      res = await pTimeout(asyncFn(...args), time);\n    } catch (err) {\n      if (err instanceof pTimeout.TimeoutError) {\n        throw errcode(err, 'ETIMEDOUT');\n      }\n\n      throw err;\n    }\n\n    return res;\n  }\n\n  return timeoutFn;\n};\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @template T\n * @template O\n *\n * @param {AsyncIterable<T>} asyncIterator\n * @param {(arg0: T) => Promise<O>} asyncFn\n */\n\n\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = [];\n\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item));\n  }\n\n  return Promise.all(tasks);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-kad-dht/src/utils.js"],"names":["debug","require","sha256","base58btc","Key","distance","pMap","Record","PeerId","errcode","fromString","uint8ArrayFromString","toString","uint8ArrayToString","concat","uint8ArrayConcat","pTimeout","exports","convertBuffer","buf","digest","convertPeerId","peer","id","bufferToKey","encodeBase32","keyForPublicKey","isPublicKeyKey","key","slice","fromPublicKeyKey","now","Date","decodeBase32","raw","sortClosestPeers","peers","target","distances","sort","xorCompare","map","d","a","b","compare","pathSize","resultsWanted","numPaths","Math","ceil","createPutRecord","value","timeReceived","rec","serialize","logger","subsystem","name","push","toB58String","formatters","v","baseEncode","Object","assign","join","error","TimeoutError","Error","code","withTimeout","asyncFn","time","timeoutFn","args","res","err","mapParallel","asyncIterator","tasks","item","Promise","all"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst { base58btc } = require('multiformats/bases/base58')\nconst { Key } = require('interface-datastore')\n// @ts-ignore\nconst distance = require('xor-distance')\nconst pMap = require('p-map')\nconst { Record } = require('libp2p-record')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst pTimeout = require('p-timeout')\n\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\nexports.convertBuffer = async (buf) => {\n  return (await sha256.digest(buf)).digest\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\nexports.convertPeerId = async (peer) => {\n  return (await sha256.digest(peer.id)).digest\n}\n\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\nexports.bufferToKey = (buf) => {\n  return new Key('/' + exports.encodeBase32(buf), false)\n}\n\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\nexports.keyForPublicKey = (peer) => {\n  return uint8ArrayConcat([\n    uint8ArrayFromString('/pk/'),\n    peer.id\n  ])\n}\n\n/**\n * @param {Uint8Array} key\n */\nexports.isPublicKeyKey = (key) => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/'\n}\n\n/**\n * @param {Uint8Array} key\n */\nexports.fromPublicKeyKey = (key) => {\n  return new PeerId(key.slice(4))\n}\n\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\nexports.now = () => {\n  return Date.now()\n}\n\n/**\n * Encode a given Uint8Array into a base32 string.\n *\n * @param {Uint8Array} buf\n * @returns {string}\n */\nexports.encodeBase32 = (buf) => {\n  return uint8ArrayToString(buf, 'base32')\n}\n\n/**\n * Decode a given base32 string into a Uint8Array.\n *\n * @param {string} raw\n * @returns {Uint8Array}\n */\nexports.decodeBase32 = (raw) => {\n  return uint8ArrayFromString(raw, 'base32')\n}\n\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Uint8Array} target\n */\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async (peer) => {\n    const id = await exports.convertPeerId(peer)\n\n    return {\n      peer: peer,\n      distance: distance(id, target)\n    }\n  })\n\n  return distances.sort(exports.xorCompare).map((d) => d.peer)\n}\n\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {{ distance: Uint8Array }} a\n * @param {{ distance: Uint8Array }} b\n */\nexports.xorCompare = (a, b) => {\n  return distance.compare(a.distance, b.distance)\n}\n\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n */\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths)\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date()\n  const rec = new Record(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n */\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`)\n  }\n\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = (v) => {\n    return base58btc.baseEncode(v)\n  }\n\n  const logger = Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  })\n\n  return logger\n}\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code () {\n    return 'ETIMEDOUT'\n  }\n}\n\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @template T\n * @param {(...args: any[]) => Promise<T>} asyncFn\n * @param {number} [time]\n */\nexports.withTimeout = (asyncFn, time) => {\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  async function timeoutFn (...args) {\n    if (!time) {\n      return asyncFn(...args)\n    }\n\n    let res\n\n    try {\n      res = await pTimeout(asyncFn(...args), time)\n    } catch (err) {\n      if (err instanceof pTimeout.TimeoutError) {\n        throw errcode(err, 'ETIMEDOUT')\n      }\n\n      throw err\n    }\n\n    return res\n  }\n\n  return timeoutFn\n}\n\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @template T\n * @template O\n *\n * @param {AsyncIterable<T>} asyncIterator\n * @param {(arg0: T) => Promise<O>} asyncFn\n */\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = []\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item))\n  }\n  return Promise.all(tasks)\n}\n"]},"metadata":{},"sourceType":"script"}
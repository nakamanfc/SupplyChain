{"ast":null,"code":"'use strict';\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar rawCodec = require('multiformats/codecs/raw');\n\nvar flat = require('./flat.js');\n\nvar balanced = require('./balanced.js');\n\nvar trickle = require('./trickle.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespaceDefaultOnly(e) {\n  return Object.freeze({\n    __proto__: null,\n    'default': e\n  });\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\n\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = (await Promise.resolve().then(function () {\n      return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./buffer-importer.js'));\n    })).default;\n  }\n\n  for await (const entry of parallelBatch__default['default'](bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n\n    yield entry;\n  }\n\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\n\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n\n      if (leaf.cid.code === rawCodec__namespace.code && (file.mtime !== undefined || file.mode !== undefined)) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({\n          Data: leaf.unixfs.marshal()\n        }));\n        leaf.cid = await persist(buffer, blockstore, { ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n\n  return reducer;\n};\n\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n\n  if (!dagBuilder) {\n    throw errCode__default['default'](new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY');\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-importer/cjs/src/dag-builder/file/index.js"],"names":["errCode","require","ipfsUnixfs","persist","dagPb","parallelBatch","rawCodec","flat","balanced","trickle","_interopDefaultLegacy","e","_interopNamespaceDefaultOnly","Object","freeze","__proto__","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","errCode__default","dagPb__namespace","parallelBatch__default","rawCodec__namespace","dagBuilders","buildFileBatch","file","blockstore","options","count","previous","bufferImporter","Promise","resolve","then","default","entry","blockWriteConcurrency","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","cid","code","mtime","undefined","mode","buffer","unixfs","UnixFS","type","data","encode","prepare","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAArB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,yBAAD,CAAtB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIQ,OAAO,GAAGR,OAAO,CAAC,cAAD,CAArB;;AAEA,SAASS,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,SAASC,4BAAT,CAAsCD,CAAtC,EAAyC;AACvC,SAAOE,MAAM,CAACC,MAAP,CAAc;AAACC,IAAAA,SAAS,EAAE,IAAZ;AAAkB,eAAWJ;AAA7B,GAAd,CAAP;AACD;;AAED,SAASK,iBAAT,CAA2BL,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACM,UAAX,EAAuB,OAAON,CAAP;AACvB,MAAIO,CAAC,GAAGL,MAAM,CAACM,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIR,CAAJ,EAAO;AACLE,IAAAA,MAAM,CAACO,IAAP,CAAYT,CAAZ,EAAeU,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGV,MAAM,CAACW,wBAAP,CAAgCb,CAAhC,EAAmCW,CAAnC,CAAR;AACAT,QAAAA,MAAM,CAACY,cAAP,CAAsBP,CAAtB,EAAyBI,CAAzB,EAA4BC,CAAC,CAACG,GAAF,GAAQH,CAAR,GAAY;AACtCI,UAAAA,UAAU,EAAE,IAD0B;AAEtCD,UAAAA,GAAG,EAAE,YAAY;AACf,mBAAOf,CAAC,CAACW,CAAD,CAAR;AACD;AAJqC,SAAxC;AAMD;AACF,KAVD;AAWD;;AACDJ,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeP,CAAf;AACA,SAAOE,MAAM,CAACC,MAAP,CAAcI,CAAd,CAAP;AACD;;AAED,IAAIU,gBAAgB,GAAG,aAAalB,qBAAqB,CAACV,OAAD,CAAzD;;AACA,IAAI6B,gBAAgB,GAAG,aAAab,iBAAiB,CAACZ,KAAD,CAArD;;AACA,IAAI0B,sBAAsB,GAAG,aAAapB,qBAAqB,CAACL,aAAD,CAA/D;;AACA,IAAI0B,mBAAmB,GAAG,aAAaf,iBAAiB,CAACV,QAAD,CAAxD;;AAEA,MAAM0B,WAAW,GAAG;AAClBzB,EAAAA,IAAI,EAAEA,IADY;AAElBC,EAAAA,QAAQ,EAAEA,QAFQ;AAGlBC,EAAAA,OAAO,EAAEA;AAHS,CAApB;;AAKA,gBAAgBwB,cAAhB,CAA+BC,IAA/B,EAAqCC,UAArC,EAAiDC,OAAjD,EAA0D;AACxD,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,QAAJ;AACA,MAAIC,cAAJ;;AACA,MAAI,OAAOH,OAAO,CAACG,cAAf,KAAkC,UAAtC,EAAkD;AAChDA,IAAAA,cAAc,GAAGH,OAAO,CAACG,cAAzB;AACD,GAFD,MAEO;AACLA,IAAAA,cAAc,GAAG,CAAC,MAAMC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AAAE,aAAO,aAAa9B,4BAA4B,CAACX,OAAO,CAAC,sBAAD,CAAR,CAAhD;AAAoF,KAAzH,CAAP,EAAmI0C,OAApJ;AACD;;AACD,aAAW,MAAMC,KAAjB,IAA0Bd,sBAAsB,CAAC,SAAD,CAAtB,CAAkCS,cAAc,CAACL,IAAD,EAAOC,UAAP,EAAmBC,OAAnB,CAAhD,EAA6EA,OAAO,CAACS,qBAArF,CAA1B,EAAuI;AACrIR,IAAAA,KAAK;;AACL,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,QAAQ,GAAGM,KAAX;AACA;AACD,KAHD,MAGO,IAAIP,KAAK,KAAK,CAAV,IAAeC,QAAnB,EAA6B;AAClC,YAAMA,QAAN;AACAA,MAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,UAAMM,KAAN;AACD;;AACD,MAAIN,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACQ,MAAT,GAAkB,IAAlB;AACA,UAAMR,QAAN;AACD;AACF;;AACD,MAAMS,MAAM,GAAG,CAACb,IAAD,EAAOC,UAAP,EAAmBC,OAAnB,KAA+B;AAC5C,iBAAeY,OAAf,CAAuBC,MAAvB,EAA+B;AAC7B,QAAIA,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAuBD,MAAM,CAAC,CAAD,CAAN,CAAUH,MAAjC,IAA2CV,OAAO,CAACe,sBAAvD,EAA+E;AAC7E,YAAMC,IAAI,GAAGH,MAAM,CAAC,CAAD,CAAnB;;AACA,UAAIG,IAAI,CAACC,GAAL,CAASC,IAAT,KAAkBvB,mBAAmB,CAACuB,IAAtC,KAA+CpB,IAAI,CAACqB,KAAL,KAAeC,SAAf,IAA4BtB,IAAI,CAACuB,IAAL,KAAcD,SAAzF,CAAJ,EAAyG;AACvG,YAAIE,MAAM,GAAG,MAAMvB,UAAU,CAACT,GAAX,CAAe0B,IAAI,CAACC,GAApB,CAAnB;AACAD,QAAAA,IAAI,CAACO,MAAL,GAAc,IAAIzD,UAAU,CAAC0D,MAAf,CAAsB;AAClCC,UAAAA,IAAI,EAAE,MAD4B;AAElCN,UAAAA,KAAK,EAAErB,IAAI,CAACqB,KAFsB;AAGlCE,UAAAA,IAAI,EAAEvB,IAAI,CAACuB,IAHuB;AAIlCK,UAAAA,IAAI,EAAEJ;AAJ4B,SAAtB,CAAd;AAMAA,QAAAA,MAAM,GAAGtD,KAAK,CAAC2D,MAAN,CAAa3D,KAAK,CAAC4D,OAAN,CAAc;AAAEC,UAAAA,IAAI,EAAEb,IAAI,CAACO,MAAL,CAAYO,OAAZ;AAAR,SAAd,CAAb,CAAT;AACAd,QAAAA,IAAI,CAACC,GAAL,GAAW,MAAMlD,OAAO,CAACuD,MAAD,EAASvB,UAAT,EAAqB,EAC3C,GAAGC,OADwC;AAE3C+B,UAAAA,KAAK,EAAEtC,gBAFoC;AAG3CuC,UAAAA,MAAM,EAAEhC,OAAO,CAACgC,MAH2B;AAI3CC,UAAAA,UAAU,EAAEjC,OAAO,CAACiC;AAJuB,SAArB,CAAxB;AAMAjB,QAAAA,IAAI,CAACkB,IAAL,GAAYZ,MAAM,CAACR,MAAnB;AACD;;AACD,aAAO;AACLG,QAAAA,GAAG,EAAED,IAAI,CAACC,GADL;AAELkB,QAAAA,IAAI,EAAErC,IAAI,CAACqC,IAFN;AAGLZ,QAAAA,MAAM,EAAEP,IAAI,CAACO,MAHR;AAILW,QAAAA,IAAI,EAAElB,IAAI,CAACkB;AAJN,OAAP;AAMD;;AACD,UAAME,CAAC,GAAG,IAAItE,UAAU,CAAC0D,MAAf,CAAsB;AAC9BC,MAAAA,IAAI,EAAE,MADwB;AAE9BN,MAAAA,KAAK,EAAErB,IAAI,CAACqB,KAFkB;AAG9BE,MAAAA,IAAI,EAAEvB,IAAI,CAACuB;AAHmB,KAAtB,CAAV;AAKA,UAAMgB,KAAK,GAAGxB,MAAM,CAACyB,MAAP,CAActB,IAAI,IAAI;AAClC,UAAIA,IAAI,CAACC,GAAL,CAASC,IAAT,KAAkBvB,mBAAmB,CAACuB,IAAtC,IAA8CF,IAAI,CAACkB,IAAvD,EAA6D;AAC3D,eAAO,IAAP;AACD;;AACD,UAAIlB,IAAI,CAACO,MAAL,IAAe,CAACP,IAAI,CAACO,MAAL,CAAYG,IAA5B,IAAoCV,IAAI,CAACO,MAAL,CAAYgB,QAAZ,EAAxC,EAAgE;AAC9D,eAAO,IAAP;AACD;;AACD,aAAOC,OAAO,CAACxB,IAAI,CAACO,MAAL,IAAeP,IAAI,CAACO,MAAL,CAAYG,IAA3B,IAAmCV,IAAI,CAACO,MAAL,CAAYG,IAAZ,CAAiBZ,MAArD,CAAd;AACD,KARa,EAQX2B,GARW,CAQPzB,IAAI,IAAI;AACb,UAAIA,IAAI,CAACC,GAAL,CAASC,IAAT,KAAkBvB,mBAAmB,CAACuB,IAA1C,EAAgD;AAC9CkB,QAAAA,CAAC,CAACM,YAAF,CAAe1B,IAAI,CAACkB,IAApB;AACA,eAAO;AACLS,UAAAA,IAAI,EAAE,EADD;AAELC,UAAAA,KAAK,EAAE5B,IAAI,CAACkB,IAFP;AAGLW,UAAAA,IAAI,EAAE7B,IAAI,CAACC;AAHN,SAAP;AAKD;;AACD,UAAI,CAACD,IAAI,CAACO,MAAN,IAAgB,CAACP,IAAI,CAACO,MAAL,CAAYG,IAAjC,EAAuC;AACrCU,QAAAA,CAAC,CAACM,YAAF,CAAe1B,IAAI,CAACO,MAAL,IAAeP,IAAI,CAACO,MAAL,CAAYgB,QAAZ,EAAf,IAAyC,CAAxD;AACD,OAFD,MAEO;AACLH,QAAAA,CAAC,CAACM,YAAF,CAAe1B,IAAI,CAACO,MAAL,CAAYG,IAAZ,CAAiBZ,MAAhC;AACD;;AACD,aAAO;AACL6B,QAAAA,IAAI,EAAE,EADD;AAELC,QAAAA,KAAK,EAAE5B,IAAI,CAACkB,IAFP;AAGLW,QAAAA,IAAI,EAAE7B,IAAI,CAACC;AAHN,OAAP;AAKD,KA3Ba,CAAd;AA4BA,UAAM6B,IAAI,GAAG;AACXjB,MAAAA,IAAI,EAAEO,CAAC,CAACN,OAAF,EADK;AAEXiB,MAAAA,KAAK,EAAEV;AAFI,KAAb;AAIA,UAAMf,MAAM,GAAGtD,KAAK,CAAC2D,MAAN,CAAa3D,KAAK,CAAC4D,OAAN,CAAckB,IAAd,CAAb,CAAf;AACA,UAAM7B,GAAG,GAAG,MAAMlD,OAAO,CAACuD,MAAD,EAASvB,UAAT,EAAqBC,OAArB,CAAzB;AACA,WAAO;AACLiB,MAAAA,GADK;AAELkB,MAAAA,IAAI,EAAErC,IAAI,CAACqC,IAFN;AAGLZ,MAAAA,MAAM,EAAEa,CAHH;AAILF,MAAAA,IAAI,EAAEZ,MAAM,CAACR,MAAP,GAAgBgC,IAAI,CAACC,KAAL,CAAWpC,MAAX,CAAkB,CAACqC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACL,KAA5C,EAAmD,CAAnD;AAJjB,KAAP;AAMD;;AACD,SAAOhC,OAAP;AACD,CA3ED;;AA4EA,SAASsC,WAAT,CAAqBpD,IAArB,EAA2BqD,KAA3B,EAAkCnD,OAAlC,EAA2C;AACzC,QAAMoD,UAAU,GAAGxD,WAAW,CAACI,OAAO,CAACqD,QAAT,CAA9B;;AACA,MAAI,CAACD,UAAL,EAAiB;AACf,UAAM5D,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAI8D,KAAJ,CAAW,yCAAyCtD,OAAO,CAACqD,QAAU,EAAtE,CAA5B,EAAsG,kBAAtG,CAAN;AACD;;AACD,SAAOD,UAAU,CAACvD,cAAc,CAACC,IAAD,EAAOqD,KAAP,EAAcnD,OAAd,CAAf,EAAuCW,MAAM,CAACb,IAAD,EAAOqD,KAAP,EAAcnD,OAAd,CAA7C,EAAqEA,OAArE,CAAjB;AACD;;AAEDuD,MAAM,CAACC,OAAP,GAAiBN,WAAjB","sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar parallelBatch = require('it-parallel-batch');\nvar rawCodec = require('multiformats/codecs/raw');\nvar flat = require('./flat.js');\nvar balanced = require('./balanced.js');\nvar trickle = require('./trickle.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespaceDefaultOnly(e) {\n  return Object.freeze({__proto__: null, 'default': e});\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = (await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./buffer-importer.js')); })).default;\n  }\n  for await (const entry of parallelBatch__default['default'](bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (leaf.cid.code === rawCodec__namespace.code && (file.mtime !== undefined || file.mode !== undefined)) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode__default['default'](new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;\n"]},"metadata":{},"sourceType":"script"}
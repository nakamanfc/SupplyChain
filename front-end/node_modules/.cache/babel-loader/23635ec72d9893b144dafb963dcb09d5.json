{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"addrs\"]}\n   */\n  async function addrs(options = {}) {\n    // eslint-disable-line require-await\n    const peers = [];\n    const {\n      libp2p\n    } = await network.use(options);\n\n    for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n      peers.push({\n        id: peerId,\n        // @ts-ignore - libp2p types are missing\n        addrs: peer.addresses.map(mi => mi.multiaddr)\n      });\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption(addrs);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/swarm/addrs.js"],"names":["withTimeoutOption","require","module","exports","network","addrs","options","peers","libp2p","use","peerId","peer","peerStore","entries","push","id","addresses","map","mi","multiaddr"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AAAE;AACpC,UAAMC,KAAK,GAAG,EAAd;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMJ,OAAO,CAACK,GAAR,CAAYH,OAAZ,CAAzB;;AACA,SAAK,MAAM,CAACI,MAAD,EAASC,IAAT,CAAX,IAA6BH,MAAM,CAACI,SAAP,CAAiBL,KAAjB,CAAuBM,OAAvB,EAA7B,EAA+D;AAC7DN,MAAAA,KAAK,CAACO,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAEL,MADK;AAET;AACAL,QAAAA,KAAK,EAAEM,IAAI,CAACK,SAAL,CAAeC,GAAf,CAAoBC,EAAD,IAAQA,EAAE,CAACC,SAA9B;AAHE,OAAX;AAKD;;AACD,WAAOZ,KAAP;AACD;;AAED,SAAOP,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlBD","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"addrs\"]}\n   */\n  async function addrs (options = {}) { // eslint-disable-line require-await\n    const peers = []\n    const { libp2p } = await network.use(options)\n    for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n      peers.push({\n        id: peerId,\n        // @ts-ignore - libp2p types are missing\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    }\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n"]},"metadata":{},"sourceType":"script"}
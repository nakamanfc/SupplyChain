{"ast":null,"code":"'use strict';\n\nconst Key = require('./key');\n\nconst Adapter = require('./adapter');\n\nconst Errors = require('./errors');\n/**\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Datastore} Datastore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryDatastore\n * @implements {Datastore}\n */\n\n\nclass MemoryDatastore extends Adapter {\n  constructor() {\n    super();\n    /** @type {Record<string, Uint8Array>} */\n\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   */\n\n\n  async put(key, val) {\n    // eslint-disable-line require-await\n    this.data[key.toString()] = val;\n  }\n  /**\n   * @param {Key} key\n   */\n\n\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists) throw Errors.notFoundError();\n    return this.data[key.toString()];\n  }\n  /**\n   * @param {Key} key\n   */\n\n\n  async has(key) {\n    // eslint-disable-line require-await\n    return this.data[key.toString()] !== undefined;\n  }\n  /**\n   * @param {Key} key\n   */\n\n\n  async delete(key) {\n    // eslint-disable-line require-await\n    delete this.data[key.toString()];\n  }\n\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: new Key(key),\n      value\n    }));\n  }\n\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => new Key(key));\n  }\n\n}\n\nmodule.exports = MemoryDatastore;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/interface-datastore/src/memory.js"],"names":["Key","require","Adapter","Errors","MemoryDatastore","constructor","data","open","Promise","resolve","close","put","key","val","toString","get","exists","has","notFoundError","undefined","delete","_all","Object","entries","map","value","_allKeys","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,eAAN,SAA8BF,OAA9B,CAAsC;AACpCG,EAAAA,WAAW,GAAI;AACb;AAEA;;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AAEDC,EAAAA,IAAI,GAAI;AACN,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDC,EAAAA,KAAK,GAAI;AACP,WAAOF,OAAO,CAACC,OAAR,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACW,QAAHE,GAAG,CAAEC,GAAF,EAAOC,GAAP,EAAY;AAAE;AACrB,SAAKP,IAAL,CAAUM,GAAG,CAACE,QAAJ,EAAV,IAA4BD,GAA5B;AACD;AAED;AACF;AACA;;;AACW,QAAHE,GAAG,CAAEH,GAAF,EAAO;AACd,UAAMI,MAAM,GAAG,MAAM,KAAKC,GAAL,CAASL,GAAT,CAArB;AACA,QAAI,CAACI,MAAL,EAAa,MAAMb,MAAM,CAACe,aAAP,EAAN;AACb,WAAO,KAAKZ,IAAL,CAAUM,GAAG,CAACE,QAAJ,EAAV,CAAP;AACD;AAED;AACF;AACA;;;AACW,QAAHG,GAAG,CAAEL,GAAF,EAAO;AAAE;AAChB,WAAO,KAAKN,IAAL,CAAUM,GAAG,CAACE,QAAJ,EAAV,MAA8BK,SAArC;AACD;AAED;AACF;AACA;;;AACc,QAANC,MAAM,CAAER,GAAF,EAAO;AAAE;AACnB,WAAO,KAAKN,IAAL,CAAUM,GAAG,CAACE,QAAJ,EAAV,CAAP;AACD;;AAEW,SAAJO,IAAI,GAAI;AACd,WAAQC,MAAM,CAACC,OAAP,CAAe,KAAKjB,IAApB,EACLkB,GADK,CACD,CAAC,CAACZ,GAAD,EAAMa,KAAN,CAAD,MAAmB;AAAEb,MAAAA,GAAG,EAAE,IAAIZ,GAAJ,CAAQY,GAAR,CAAP;AAAqBa,MAAAA;AAArB,KAAnB,CADC,CAAR;AAED;;AAEe,SAARC,QAAQ,GAAI;AAClB,WAAQJ,MAAM,CAACC,OAAP,CAAe,KAAKjB,IAApB,EACLkB,GADK,CACD,CAAC,CAACZ,GAAD,CAAD,KAAW,IAAIZ,GAAJ,CAAQY,GAAR,CADV,CAAR;AAED;;AAvDmC;;AA0DtCe,MAAM,CAACC,OAAP,GAAiBxB,eAAjB","sourcesContent":["'use strict'\n\nconst Key = require('./key')\nconst Adapter = require('./adapter')\nconst Errors = require('./errors')\n\n/**\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Datastore} Datastore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryDatastore\n * @implements {Datastore}\n */\nclass MemoryDatastore extends Adapter {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[key.toString()] = val\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[key.toString()]\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[key.toString()] !== undefined\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[key.toString()]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: new Key(key), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => new Key(key))\n  }\n}\n\nmodule.exports = MemoryDatastore\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  codes\n} = require('./errors');\n/**\n * Converts the given `peer` to a `Peer` object.\n * If a multiaddr is received, the addressBook is updated.\n *\n * @param {PeerId|Multiaddr|string} peer\n * @returns {{ id: PeerId, multiaddrs: Multiaddr[]|undefined }}\n */\n\n\nfunction getPeer(peer) {\n  if (typeof peer === 'string') {\n    peer = new Multiaddr(peer);\n  }\n\n  let addr;\n\n  if (Multiaddr.isMultiaddr(peer)) {\n    addr = peer;\n    const idStr = peer.getPeerId();\n\n    if (!idStr) {\n      throw errCode(new Error(`${peer} does not have a valid peer type`), codes.ERR_INVALID_MULTIADDR);\n    }\n\n    try {\n      peer = PeerId.createFromB58String(idStr);\n    } catch (err) {\n      throw errCode(new Error(`${peer} is not a valid peer type`), codes.ERR_INVALID_MULTIADDR);\n    }\n  }\n\n  return {\n    id: peer,\n    multiaddrs: addr ? [addr] : undefined\n  };\n}\n\nmodule.exports = getPeer;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p/src/get-peer.js"],"names":["PeerId","require","Multiaddr","errCode","codes","getPeer","peer","addr","isMultiaddr","idStr","getPeerId","Error","ERR_INVALID_MULTIADDR","createFromB58String","err","id","multiaddrs","undefined","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAM;AAAEG,EAAAA;AAAF,IAAYH,OAAO,CAAC,UAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG,IAAIJ,SAAJ,CAAcI,IAAd,CAAP;AACD;;AAED,MAAIC,IAAJ;;AACA,MAAIL,SAAS,CAACM,WAAV,CAAsBF,IAAtB,CAAJ,EAAiC;AAC/BC,IAAAA,IAAI,GAAGD,IAAP;AACA,UAAMG,KAAK,GAAGH,IAAI,CAACI,SAAL,EAAd;;AAEA,QAAI,CAACD,KAAL,EAAY;AACV,YAAMN,OAAO,CACX,IAAIQ,KAAJ,CAAW,GAAEL,IAAK,kCAAlB,CADW,EAEXF,KAAK,CAACQ,qBAFK,CAAb;AAID;;AAED,QAAI;AACFN,MAAAA,IAAI,GAAGN,MAAM,CAACa,mBAAP,CAA2BJ,KAA3B,CAAP;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,YAAMX,OAAO,CACX,IAAIQ,KAAJ,CAAW,GAAEL,IAAK,2BAAlB,CADW,EAEXF,KAAK,CAACQ,qBAFK,CAAb;AAID;AACF;;AAED,SAAO;AACLG,IAAAA,EAAE,EAAET,IADC;AAELU,IAAAA,UAAU,EAAET,IAAI,GAAG,CAACA,IAAD,CAAH,GAAYU;AAFvB,GAAP;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\nconst errCode = require('err-code')\n\nconst { codes } = require('./errors')\n\n/**\n * Converts the given `peer` to a `Peer` object.\n * If a multiaddr is received, the addressBook is updated.\n *\n * @param {PeerId|Multiaddr|string} peer\n * @returns {{ id: PeerId, multiaddrs: Multiaddr[]|undefined }}\n */\nfunction getPeer (peer) {\n  if (typeof peer === 'string') {\n    peer = new Multiaddr(peer)\n  }\n\n  let addr\n  if (Multiaddr.isMultiaddr(peer)) {\n    addr = peer\n    const idStr = peer.getPeerId()\n\n    if (!idStr) {\n      throw errCode(\n        new Error(`${peer} does not have a valid peer type`),\n        codes.ERR_INVALID_MULTIADDR\n      )\n    }\n\n    try {\n      peer = PeerId.createFromB58String(idStr)\n    } catch (err) {\n      throw errCode(\n        new Error(`${peer} is not a valid peer type`),\n        codes.ERR_INVALID_MULTIADDR\n      )\n    }\n  }\n\n  return {\n    id: peer,\n    multiaddrs: addr ? [addr] : undefined\n  }\n}\n\nmodule.exports = getPeer\n"]},"metadata":{},"sourceType":"script"}
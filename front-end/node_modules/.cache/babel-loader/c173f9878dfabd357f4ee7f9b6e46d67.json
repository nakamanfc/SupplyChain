{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promisify = promisify; // Symbols is a better way to do this, but not all browsers have good support,\n// so instead we'll just make do with a very unlikely string.\n\nvar customArgumentsToken = \"__ES6-PROMISIFY--CUSTOM-ARGUMENTS__\";\n/**\n * promisify()\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) --\n * into an ES6-compatible Promise. Promisify provides a default callback of the\n * form (error, result) and rejects when `error` is truthy.\n *\n * @param {function} original - The function to promisify\n * @return {function} A promisified version of `original`\n */\n\nfunction promisify(original) {\n  // Ensure the argument is a function\n  if (typeof original !== \"function\") {\n    throw new TypeError(\"Argument to promisify must be a function\");\n  } // If the user has asked us to decode argument names for them, honour that\n\n\n  var argumentNames = original[customArgumentsToken]; // If the user has supplied a custom Promise implementation, use it.\n  // Otherwise fall back to whatever we can find on the global object.\n\n  var ES6Promise = promisify.Promise || Promise; // If we can find no Promise implemention, then fail now.\n\n  if (typeof ES6Promise !== \"function\") {\n    throw new Error(\"No Promise implementation found; do you need a polyfill?\");\n  }\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new ES6Promise(function (resolve, reject) {\n      // Append the callback bound to the context\n      args.push(function callback(err) {\n        if (err) {\n          return reject(err);\n        }\n\n        for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          values[_key2 - 1] = arguments[_key2];\n        }\n\n        if (values.length === 1 || !argumentNames) {\n          return resolve(values[0]);\n        }\n\n        var o = {};\n        values.forEach(function (value, index) {\n          var name = argumentNames[index];\n\n          if (name) {\n            o[name] = value;\n          }\n        });\n        resolve(o);\n      }); // Call the function.\n\n      original.apply(_this, args);\n    });\n  };\n} // Attach this symbol to the exported function, so users can use it\n\n\npromisify.argumentNames = customArgumentsToken;\npromisify.Promise = undefined; // Export the public API","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/es6-promisify/dist/promisify.js"],"names":["Object","defineProperty","exports","value","promisify","customArgumentsToken","original","TypeError","argumentNames","ES6Promise","Promise","Error","_this","_len","arguments","length","args","Array","_key","resolve","reject","push","callback","err","_len2","values","_key2","o","forEach","index","name","apply","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB,C,CACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,qCAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,SAAT,CAAmBE,QAAnB,EAA6B;AAC3B;AACA,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAIC,SAAJ,CAAc,0CAAd,CAAN;AACD,GAJ0B,CAIzB;;;AAGF,MAAIC,aAAa,GAAGF,QAAQ,CAACD,oBAAD,CAA5B,CAP2B,CAOyB;AACpD;;AAEA,MAAII,UAAU,GAAGL,SAAS,CAACM,OAAV,IAAqBA,OAAtC,CAV2B,CAUoB;;AAE/C,MAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;AACpC,UAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,SAAO,YAAY;AACjB,QAAIC,KAAK,GAAG,IAAZ;;AAEA,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAO,IAAIT,UAAJ,CAAe,UAAUU,OAAV,EAAmBC,MAAnB,EAA2B;AAC/C;AACAJ,MAAAA,IAAI,CAACK,IAAL,CAAU,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAC/B,YAAIA,GAAJ,EAAS;AACP,iBAAOH,MAAM,CAACG,GAAD,CAAb;AACD;;AAED,aAAK,IAAIC,KAAK,GAAGV,SAAS,CAACC,MAAtB,EAA8BU,MAAM,GAAG,IAAIR,KAAJ,CAAUO,KAAK,GAAG,CAAR,GAAYA,KAAK,GAAG,CAApB,GAAwB,CAAlC,CAAvC,EAA6EE,KAAK,GAAG,CAA1F,EAA6FA,KAAK,GAAGF,KAArG,EAA4GE,KAAK,EAAjH,EAAqH;AACnHD,UAAAA,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,GAAoBZ,SAAS,CAACY,KAAD,CAA7B;AACD;;AAED,YAAID,MAAM,CAACV,MAAP,KAAkB,CAAlB,IAAuB,CAACP,aAA5B,EAA2C;AACzC,iBAAOW,OAAO,CAACM,MAAM,CAAC,CAAD,CAAP,CAAd;AACD;;AAED,YAAIE,CAAC,GAAG,EAAR;AACAF,QAAAA,MAAM,CAACG,OAAP,CAAe,UAAUzB,KAAV,EAAiB0B,KAAjB,EAAwB;AACrC,cAAIC,IAAI,GAAGtB,aAAa,CAACqB,KAAD,CAAxB;;AAEA,cAAIC,IAAJ,EAAU;AACRH,YAAAA,CAAC,CAACG,IAAD,CAAD,GAAU3B,KAAV;AACD;AACF,SAND;AAOAgB,QAAAA,OAAO,CAACQ,CAAD,CAAP;AACD,OAtBD,EAF+C,CAwB3C;;AAEJrB,MAAAA,QAAQ,CAACyB,KAAT,CAAenB,KAAf,EAAsBI,IAAtB;AACD,KA3BM,CAAP;AA4BD,GAnCD;AAoCD,C,CAAC;;;AAGFZ,SAAS,CAACI,aAAV,GAA0BH,oBAA1B;AACAD,SAAS,CAACM,OAAV,GAAoBsB,SAApB,C,CAA+B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promisify = promisify;\n// Symbols is a better way to do this, but not all browsers have good support,\n// so instead we'll just make do with a very unlikely string.\nvar customArgumentsToken = \"__ES6-PROMISIFY--CUSTOM-ARGUMENTS__\";\n/**\n * promisify()\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) --\n * into an ES6-compatible Promise. Promisify provides a default callback of the\n * form (error, result) and rejects when `error` is truthy.\n *\n * @param {function} original - The function to promisify\n * @return {function} A promisified version of `original`\n */\n\nfunction promisify(original) {\n  // Ensure the argument is a function\n  if (typeof original !== \"function\") {\n    throw new TypeError(\"Argument to promisify must be a function\");\n  } // If the user has asked us to decode argument names for them, honour that\n\n\n  var argumentNames = original[customArgumentsToken]; // If the user has supplied a custom Promise implementation, use it.\n  // Otherwise fall back to whatever we can find on the global object.\n\n  var ES6Promise = promisify.Promise || Promise; // If we can find no Promise implemention, then fail now.\n\n  if (typeof ES6Promise !== \"function\") {\n    throw new Error(\"No Promise implementation found; do you need a polyfill?\");\n  }\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new ES6Promise(function (resolve, reject) {\n      // Append the callback bound to the context\n      args.push(function callback(err) {\n        if (err) {\n          return reject(err);\n        }\n\n        for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          values[_key2 - 1] = arguments[_key2];\n        }\n\n        if (values.length === 1 || !argumentNames) {\n          return resolve(values[0]);\n        }\n\n        var o = {};\n        values.forEach(function (value, index) {\n          var name = argumentNames[index];\n\n          if (name) {\n            o[name] = value;\n          }\n        });\n        resolve(o);\n      }); // Call the function.\n\n      original.apply(_this, args);\n    });\n  };\n} // Attach this symbol to the exported function, so users can use it\n\n\npromisify.argumentNames = customArgumentsToken;\npromisify.Promise = undefined; // Export the public API"]},"metadata":{},"sourceType":"script"}
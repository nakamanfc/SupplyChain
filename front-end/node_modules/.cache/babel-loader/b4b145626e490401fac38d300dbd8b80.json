{"ast":null,"code":"'use strict';\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  const get = require('./get')({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"stat\"]}\n   */\n\n\n  async function stat(cid, options = {}) {\n    const node = await get(cid, options);\n    const serialized = dagPb.encode(node);\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/object/stat.js"],"names":["dagPb","require","withTimeoutOption","module","exports","repo","preload","get","stat","cid","options","node","serialized","encode","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC,QAAMC,GAAG,GAAGN,OAAO,CAAC,OAAD,CAAP,CAAiB;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB,CAAZ;AAEA;AACF;AACA;;;AACE,iBAAeE,IAAf,CAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AACtC,UAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACE,GAAD,EAAMC,OAAN,CAAtB;AACA,UAAME,UAAU,GAAGZ,KAAK,CAACa,MAAN,CAAaF,IAAb,CAAnB;AACA,UAAMG,SAAS,GAAGF,UAAU,CAACG,MAA7B;AACA,UAAMC,UAAU,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,CAACC,KAAF,IAAW,CAAf,CAA7B,EAAgD,CAAhD,CAAnB;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAEb,GADD;AAELc,MAAAA,QAAQ,EAAEZ,IAAI,CAACM,KAAL,CAAWF,MAFhB;AAGLS,MAAAA,SAAS,EAAEV,SAHN;AAILW,MAAAA,SAAS,EAAEX,SAAS,GAAG,CAACH,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MAJpC;AAKLY,MAAAA,QAAQ,EAAE,CAAChB,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MALvB;AAMLa,MAAAA,cAAc,EAAEd,SAAS,GAAGE;AANvB,KAAP;AAQD;;AAED,SAAOd,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAvBD","sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  const get = require('./get')({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPb.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"script"}
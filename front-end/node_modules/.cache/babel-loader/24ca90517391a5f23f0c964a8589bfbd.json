{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:hop'), {\n  error: debug('libp2p:circuit:hop:err')\n});\n\nconst errCode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst {\n  validateAddrs\n} = require('./utils');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst {\n  codes: Errors\n} = require('../../errors');\n\nconst {\n  stop\n} = require('./stop');\n\nconst multicodec = require('./../multicodec');\n/**\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../transport')} Transport\n */\n\n/**\n * @typedef {Object} HopRequest\n * @property {Connection} connection\n * @property {ICircuitRelay} request\n * @property {StreamHandler} streamHandler\n * @property {Transport} circuit\n */\n\n/**\n * @param {HopRequest} options\n * @returns {Promise<void>}\n */\n\n\nasync function handleHop({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    });\n  } // Validate the HOP request has the required input\n\n\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err);\n  }\n\n  if (!request.dstPeer) {\n    log('HOP request received but we do not receive a dstPeer');\n    return;\n  } // Get the connection to the destination (stop) peer\n\n\n  const destinationPeer = new PeerId(request.dstPeer.id);\n\n  const destinationConnection = circuit._connectionManager.get(destinationPeer);\n\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    });\n  } // TODO: Handle being an active relay\n\n\n  if (!destinationConnection) {\n    return;\n  } // Handle the incoming HOP request by performing a STOP request\n\n\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  };\n  let destinationStream;\n\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest\n    });\n  } catch (err) {\n    return log.error(err);\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String());\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  const sourceStream = streamHandler.rest(); // Short circuit the two streams to create the relayed connection\n\n  return pipe(sourceStream, destinationStream, sourceStream);\n}\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @param {ICircuitRelay} options.request\n * @returns {Promise<MuxedStream>}\n */\n\n\nasync function hop({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]); // Send the HOP request\n\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (!response) {\n    throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED);\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful');\n    return streamHandler.rest();\n  }\n\n  log('hop request failed with code %d, closing stream', response.code);\n  streamHandler.close();\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED);\n}\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @returns {Promise<boolean>}\n */\n\n\nasync function canHop({\n  connection\n}) {\n  // Create a new stream to the relay\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]); // Send the HOP request\n\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write({\n    type: CircuitPB.Type.CAN_HOP\n  });\n  const response = await streamHandler.read();\n  await streamHandler.close();\n\n  if (!response || response.code !== CircuitPB.Status.SUCCESS) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n *\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {StreamHandler} options.streamHandler\n * @param {Transport} options.circuit\n * @private\n */\n\n\nfunction handleCanHop({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled;\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  });\n}\n\nmodule.exports = {\n  handleHop,\n  hop,\n  canHop,\n  handleCanHop\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p/src/circuit/circuit/hop.js"],"names":["debug","require","log","Object","assign","error","errCode","PeerId","validateAddrs","StreamHandler","CircuitRelay","CircuitPB","pipe","codes","Errors","stop","multicodec","handleHop","connection","request","streamHandler","circuit","_options","hop","enabled","end","type","Type","STATUS","code","Status","HOP_CANT_SPEAK_RELAY","err","remotePeer","toB58String","dstPeer","destinationPeer","id","destinationConnection","_connectionManager","get","active","HOP_NO_CONN_TO_DST","stopRequest","STOP","srcPeer","destinationStream","write","SUCCESS","sourceStream","rest","stream","newStream","relay","response","read","Error","ERR_HOP_REQUEST_FAILED","close","canHop","CAN_HOP","handleCanHop","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:hop'), {\n  error: debug('libp2p:circuit:hop:err')\n})\nconst errCode = require('err-code')\n\nconst PeerId = require('peer-id')\nconst { validateAddrs } = require('./utils')\nconst StreamHandler = require('./stream-handler')\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst { pipe } = require('it-pipe')\nconst { codes: Errors } = require('../../errors')\n\nconst { stop } = require('./stop')\n\nconst multicodec = require('./../multicodec')\n\n/**\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../transport')} Transport\n */\n\n/**\n * @typedef {Object} HopRequest\n * @property {Connection} connection\n * @property {ICircuitRelay} request\n * @property {StreamHandler} streamHandler\n * @property {Transport} circuit\n */\n\n/**\n * @param {HopRequest} options\n * @returns {Promise<void>}\n */\nasync function handleHop ({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    })\n  }\n\n  // Validate the HOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  if (!request.dstPeer) {\n    log('HOP request received but we do not receive a dstPeer')\n    return\n  }\n\n  // Get the connection to the destination (stop) peer\n  const destinationPeer = new PeerId(request.dstPeer.id)\n\n  const destinationConnection = circuit._connectionManager.get(destinationPeer)\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    })\n  }\n\n  // TODO: Handle being an active relay\n  if (!destinationConnection) {\n    return\n  }\n\n  // Handle the incoming HOP request by performing a STOP request\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  }\n\n  let destinationStream\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest\n    })\n  } catch (err) {\n    return log.error(err)\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String())\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  const sourceStream = streamHandler.rest()\n\n  // Short circuit the two streams to create the relayed connection\n  return pipe(\n    sourceStream,\n    destinationStream,\n    sourceStream\n  )\n}\n\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @param {ICircuitRelay} options.request\n * @returns {Promise<MuxedStream>}\n */\nasync function hop ({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const { stream } = await connection.newStream([multicodec.relay])\n  // Send the HOP request\n  const streamHandler = new StreamHandler({ stream })\n  streamHandler.write(request)\n\n  const response = await streamHandler.read()\n\n  if (!response) {\n    throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED)\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful')\n    return streamHandler.rest()\n  }\n\n  log('hop request failed with code %d, closing stream', response.code)\n  streamHandler.close()\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED)\n}\n\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @returns {Promise<boolean>}\n */\nasync function canHop ({\n  connection\n}) {\n  // Create a new stream to the relay\n  const { stream } = await connection.newStream([multicodec.relay])\n  // Send the HOP request\n  const streamHandler = new StreamHandler({ stream })\n  streamHandler.write({\n    type: CircuitPB.Type.CAN_HOP\n  })\n\n  const response = await streamHandler.read()\n  await streamHandler.close()\n\n  if (!response || response.code !== CircuitPB.Status.SUCCESS) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n *\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {StreamHandler} options.streamHandler\n * @param {Transport} options.circuit\n * @private\n */\nfunction handleCanHop ({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String())\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  })\n}\n\nmodule.exports = {\n  handleHop,\n  hop,\n  canHop,\n  handleCanHop\n}\n"]},"metadata":{},"sourceType":"script"}
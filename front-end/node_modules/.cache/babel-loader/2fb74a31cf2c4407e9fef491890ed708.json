{"ast":null,"code":"'use strict';\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst {\n  resolvePath\n} = require('../../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  PinTypes\n} = require('ipfs-repo');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = ({\n  repo,\n  codecs\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"rmAll\"]}\n   */\n  async function* rmAll(source, _options = {}) {\n    const release = await repo.gcLock.readLock();\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const {\n        path,\n        recursive\n      } of normaliseInput(source)) {\n        const {\n          cid\n        } = await resolvePath(repo, codecs, path);\n        const {\n          pinned,\n          reason\n        } = await repo.pins.isPinnedWithType(cid, PinTypes.all);\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`);\n        }\n\n        switch (reason) {\n          case PinTypes.recursive:\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`);\n            }\n\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n\n          case PinTypes.direct:\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`);\n        }\n      }\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(rmAll);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/pin/rm-all.js"],"names":["normaliseInput","require","resolvePath","withTimeoutOption","PinTypes","module","exports","repo","codecs","rmAll","source","_options","release","gcLock","readLock","path","recursive","cid","pinned","reason","pins","isPinnedWithType","all","Error","unpin","direct"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAqBC,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,WAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AACrC;AACF;AACA;AACE,kBAAiBC,KAAjB,CAAwBC,MAAxB,EAAgCC,QAAQ,GAAG,EAA3C,EAA+C;AAC7C,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAtB;;AAEA,QAAI;AACF;AACA,iBAAW,MAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAjB,IAAwChB,cAAc,CAACU,MAAD,CAAtD,EAAgE;AAC9D,cAAM;AAAEO,UAAAA;AAAF,YAAU,MAAMf,WAAW,CAACK,IAAD,EAAOC,MAAP,EAAeO,IAAf,CAAjC;AACA,cAAM;AAAEG,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAqB,MAAMZ,IAAI,CAACa,IAAL,CAAUC,gBAAV,CAA2BJ,GAA3B,EAAgCb,QAAQ,CAACkB,GAAzC,CAAjC;;AAEA,YAAI,CAACJ,MAAL,EAAa;AACX,gBAAM,IAAIK,KAAJ,CAAW,GAAEN,GAAI,gBAAjB,CAAN;AACD;;AAED,gBAAQE,MAAR;AACE,eAAMf,QAAQ,CAACY,SAAf;AACE,gBAAI,CAACA,SAAL,EAAgB;AACd,oBAAM,IAAIO,KAAJ,CAAW,GAAEN,GAAI,wBAAjB,CAAN;AACD;;AAED,kBAAMV,IAAI,CAACa,IAAL,CAAUI,KAAV,CAAgBP,GAAhB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF,eAAMb,QAAQ,CAACqB,MAAf;AACE,kBAAMlB,IAAI,CAACa,IAAL,CAAUI,KAAV,CAAgBP,GAAhB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF;AACE,kBAAM,IAAIM,KAAJ,CAAW,GAAEN,GAAI,+BAA8BE,MAAO,EAAtD,CAAN;AAlBJ;AAoBD;AACF,KA/BD,SA+BU;AACRP,MAAAA,OAAO;AACR;AACF;;AAED,SAAOT,iBAAiB,CAACM,KAAD,CAAxB;AACD,CA5CD","sourcesContent":["'use strict'\n\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { PinTypes } = require('ipfs-repo')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n"]},"metadata":{},"sourceType":"script"}
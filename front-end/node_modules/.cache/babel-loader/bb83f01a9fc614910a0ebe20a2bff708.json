{"ast":null,"code":"import * as v6 from './constants';\nimport { sprintf } from 'sprintf-js';\nexport function groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\nexport function padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\nexport const ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\nexport function simpleRegularExpression(groups) {\n  const zeroIndexes = [];\n  groups.forEach((group, i) => {\n    const groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  const possibilities = zeroIndexes.map(zeroIndex => groups.map((group, i) => {\n    if (i === zeroIndex) {\n      const elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n      return groupPossibilities([padGroup(group), elision]);\n    }\n\n    return padGroup(group);\n  }).join(':')); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\nexport function possibleElisions(elidedGroups, moreLeft, moreRight) {\n  const left = moreLeft ? '' : ':';\n  const right = moreRight ? '' : ':';\n  const possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (let groups = 1; groups < elidedGroups - 1; groups++) {\n    for (let position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}","map":{"version":3,"sources":["../../../../lib/v6/regular-expressions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as v6 from './constants';\nimport { sprintf } from 'sprintf-js';\nexport function groupPossibilities(possibilities) {\n    return sprintf('(%s)', possibilities.join('|'));\n}\nexport function padGroup(group) {\n    if (group.length < 4) {\n        return sprintf('0{0,%d}%s', 4 - group.length, group);\n    }\n    return group;\n}\nexport const ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\nexport function simpleRegularExpression(groups) {\n    const zeroIndexes = [];\n    groups.forEach((group, i) => {\n        const groupInteger = parseInt(group, 16);\n        if (groupInteger === 0) {\n            zeroIndexes.push(i);\n        }\n    });\n    // You can technically elide a single 0, this creates the regular expressions\n    // to match that eventuality\n    const possibilities = zeroIndexes.map((zeroIndex) => groups\n        .map((group, i) => {\n        if (i === zeroIndex) {\n            const elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n            return groupPossibilities([padGroup(group), elision]);\n        }\n        return padGroup(group);\n    })\n        .join(':'));\n    // The simplest case\n    possibilities.push(groups.map(padGroup).join(':'));\n    return groupPossibilities(possibilities);\n}\nexport function possibleElisions(elidedGroups, moreLeft, moreRight) {\n    const left = moreLeft ? '' : ':';\n    const right = moreRight ? '' : ':';\n    const possibilities = [];\n    // 1. elision of everything (::)\n    if (!moreLeft && !moreRight) {\n        possibilities.push('::');\n    }\n    // 2. complete elision of the middle\n    if (moreLeft && moreRight) {\n        possibilities.push('');\n    }\n    if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\n        // 3. complete elision of one side\n        possibilities.push(':');\n    }\n    // 4. elision from the left side\n    possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n    // 5. elision from the right side\n    possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n    // 6. no elision\n    possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n    // 7. elision (including sloppy elision) from the middle\n    for (let groups = 1; groups < elidedGroups - 1; groups++) {\n        for (let position = 1; position < elidedGroups - groups; position++) {\n            possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n        }\n    }\n    return groupPossibilities(possibilities);\n}\n//# sourceMappingURL=regular-expressions.js.map"]},"metadata":{},"sourceType":"module"}
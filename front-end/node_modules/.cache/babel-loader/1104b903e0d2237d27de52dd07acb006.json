{"ast":null,"code":"import { sprintf } from 'sprintf-js';\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\n\nexport function spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with each character contained in a <span>\n */\n\nexport function spanAll(s, offset = 0) {\n  const letters = s.split('');\n  return letters.map((n, i) => sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?\n  ).join('');\n}\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\n\n\nexport function spanLeadingZeroes(address) {\n  const groups = address.split(':');\n  return groups.map(g => spanLeadingZeroesSimple(g)).join(':');\n}\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\n\nexport function simpleGroup(addressString, offset = 0) {\n  const groups = addressString.split(':');\n  return groups.map((g, i) => {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  });\n}","map":{"version":3,"sources":["../../../../lib/v6/helpers.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,YAAxB;AAEA;;AAEG;;AACH,OAAM,SAAU,aAAV,CAAwB,CAAxB,EAAiC;AACrC,SAAO,CAAC,CAAC,OAAF,CAAU,OAAV,EAAmB,8BAAnB,CAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,OAAV,CAAkB,CAAlB,EAA6B,MAAA,GAAiB,CAA9C,EAA+C;AACnD,QAAM,OAAO,GAAG,CAAC,CAAC,KAAF,CAAQ,EAAR,CAAhB;AAEA,SAAO,OAAO,CACX,GADI,CAEH,CAAC,CAAD,EAAI,CAAJ,KACE,OAAO,CACL,oDADK,EAEL,CAFK,EAGL,CAAC,GAAG,MAHC,EAIL,aAAa,CAAC,CAAD,CAJR,CAHN,CAQC;AARD,IAUJ,IAVI,CAUC,EAVD,CAAP;AAWD;;AAED,SAAS,uBAAT,CAAiC,KAAjC,EAA8C;AAC5C,SAAO,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,8BAAvB,CAAP;AACD;AAED;;AAEG;;;AACH,OAAM,SAAU,iBAAV,CAA4B,OAA5B,EAA2C;AAC/C,QAAM,MAAM,GAAG,OAAO,CAAC,KAAR,CAAc,GAAd,CAAf;AAEA,SAAO,MAAM,CAAC,GAAP,CAAY,CAAD,IAAO,uBAAuB,CAAC,CAAD,CAAzC,EAA8C,IAA9C,CAAmD,GAAnD,CAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,WAAV,CAAsB,aAAtB,EAA6C,MAAA,GAAiB,CAA9D,EAA+D;AACnE,QAAM,MAAM,GAAG,aAAa,CAAC,KAAd,CAAoB,GAApB,CAAf;AAEA,SAAO,MAAM,CAAC,GAAP,CAAW,CAAC,CAAD,EAAI,CAAJ,KAAS;AACzB,QAAI,WAAW,IAAX,CAAgB,CAAhB,CAAJ,EAAwB;AACtB,aAAO,CAAP;AACD;;AAED,WAAO,OAAO,CACZ,8CADY,EAEZ,CAAC,GAAG,MAFQ,EAGZ,uBAAuB,CAAC,CAAD,CAHX,CAAd;AAKD,GAVM,CAAP;AAWD","sourceRoot":"","sourcesContent":["import { sprintf } from 'sprintf-js';\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nexport function spanAllZeroes(s) {\n    return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexport function spanAll(s, offset = 0) {\n    const letters = s.split('');\n    return letters\n        .map((n, i) => sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?\n    )\n        .join('');\n}\nfunction spanLeadingZeroesSimple(group) {\n    return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexport function spanLeadingZeroes(address) {\n    const groups = address.split(':');\n    return groups.map((g) => spanLeadingZeroesSimple(g)).join(':');\n}\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexport function simpleGroup(addressString, offset = 0) {\n    const groups = addressString.split(':');\n    return groups.map((g, i) => {\n        if (/group-v4/.test(g)) {\n            return g;\n        }\n        return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n    });\n}\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}
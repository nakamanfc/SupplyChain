{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree');\n\nconst addLink = require('./add-link');\n\nconst {\n  decode\n} = require('@ipld/dag-pb');\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\n\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block);\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      };\n      continue;\n    }\n    /** @type {{ cid: CID, size: number }} */\n\n\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    }); // new child for next loop\n\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    };\n  } // @ts-ignore - child is possibly undefined\n\n\n  const {\n    cid\n  } = child;\n  log(`Final CID ${cid}`);\n  return cid;\n};\n\nmodule.exports = updateTree;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/utils/update-tree.js"],"names":["log","require","addLink","decode","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","child","block","repo","blocks","getMany","map","node","cid","name","size","length","result","parent","flush","hashAlg","cidVersion","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAZ;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,cAAD,CAFX;;AAIA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE;AADA,CAAvB;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,OAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,OAAvB,KAAmC;AACpDA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;AAEAT,EAAAA,GAAG,CAAC,OAAD,EAAUQ,KAAV,CAAH;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;AAEA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AAEA,aAAW,MAAMC,KAAjB,IAA0BT,OAAO,CAACU,IAAR,CAAaC,MAAb,CAAoBC,OAApB,CAA4BX,KAAK,CAACY,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAA5B,CAA1B,EAAoF;AAClF,UAAMD,IAAI,GAAGlB,MAAM,CAACa,KAAD,CAAnB;AACA,UAAMM,GAAG,GAAGd,KAAK,CAACM,KAAD,CAAL,CAAaQ,GAAzB;AACA,UAAMC,IAAI,GAAGf,KAAK,CAACM,KAAD,CAAL,CAAaS,IAA1B;AACAT,IAAAA,KAAK;;AAEL,QAAI,CAACC,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG;AACNO,QAAAA,GADM;AAENC,QAAAA,IAFM;AAGNC,QAAAA,IAAI,EAAER,KAAK,CAACS;AAHN,OAAR;AAMA;AACD;AAED;;;AACA,UAAMC,MAAM,GAAG,MAAMxB,OAAO,CAACK,OAAD,EAAU;AACpCoB,MAAAA,MAAM,EAAEN,IAD4B;AAEpCE,MAAAA,IAAI,EAAER,KAAK,CAACQ,IAFwB;AAGpCD,MAAAA,GAAG,EAAEP,KAAK,CAACO,GAHyB;AAIpC;AACAE,MAAAA,IAAI,EAAET,KAAK,CAACS,IALwB;AAMpCI,MAAAA,KAAK,EAAEnB,OAAO,CAACmB,KANqB;AAOpCvB,MAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBAPO;AAQpCwB,MAAAA,OAAO,EAAEpB,OAAO,CAACoB,OARmB;AASpCC,MAAAA,UAAU,EAAErB,OAAO,CAACqB;AATgB,KAAV,CAA5B,CAjBkF,CA6BlF;;AACAf,IAAAA,KAAK,GAAG;AACNO,MAAAA,GAAG,EAAEI,MAAM,CAACJ,GADN;AAENC,MAAAA,IAFM;AAGN;AACAC,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAJP,KAAR;AAMD,GA7CmD,CA+CpD;;;AACA,QAAM;AAAEF,IAAAA;AAAF,MAAUP,KAAhB;AACAf,EAAAA,GAAG,CAAE,aAAYsB,GAAI,EAAlB,CAAH;AAEA,SAAOA,GAAP;AACD,CApDD;;AAsDAS,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree')\nconst addLink = require('./add-link')\nconst {\n  decode\n} = require('@ipld/dag-pb')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-ignore - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n\nmodule.exports = updateTree\n"]},"metadata":{},"sourceType":"script"}
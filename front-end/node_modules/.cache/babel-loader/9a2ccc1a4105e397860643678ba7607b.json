{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package chacha implements ChaCha stream cipher.\n */\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\"); // Number of ChaCha rounds (ChaCha20).\n\n\nvar ROUNDS = 20; // Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\n\nfunction core(out, input, key) {\n  var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n\n  var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n\n  var j2 = 0x79622D32; // \"2-by\"\n\n  var j3 = 0x6B206574; // \"te k\"\n\n  var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];\n  var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];\n  var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];\n  var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];\n  var x0 = j0;\n  var x1 = j1;\n  var x2 = j2;\n  var x3 = j3;\n  var x4 = j4;\n  var x5 = j5;\n  var x6 = j6;\n  var x7 = j7;\n  var x8 = j8;\n  var x9 = j9;\n  var x10 = j10;\n  var x11 = j11;\n  var x12 = j12;\n  var x13 = j13;\n  var x14 = j14;\n  var x15 = j15;\n\n  for (var i = 0; i < ROUNDS; i += 2) {\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n  }\n\n  binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n  binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n  binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n  binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n  binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n  binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n  binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n  binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n  binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n  binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n  binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n  binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n  binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n  binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n  binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n  binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\n\n\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  } // We only support 256-bit keys.\n\n\n  if (key.length !== 32) {\n    throw new Error(\"ChaCha: key size must be 32 bytes\");\n  }\n\n  if (dst.length < src.length) {\n    throw new Error(\"ChaCha: destination is shorter than source\");\n  }\n\n  var nc;\n  var counterLength;\n\n  if (nonceInplaceCounterLength === 0) {\n    if (nonce.length !== 8 && nonce.length !== 12) {\n      throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n    }\n\n    nc = new Uint8Array(16); // First counterLength bytes of nc are counter, starting with zero.\n\n    counterLength = nc.length - nonce.length; // Last bytes of nc after counterLength are nonce, set them.\n\n    nc.set(nonce, counterLength);\n  } else {\n    if (nonce.length !== 16) {\n      throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n    } // This will update passed nonce with counter inplace.\n\n\n    nc = nonce;\n    counterLength = nonceInplaceCounterLength;\n  } // Allocate temporary space for ChaCha block.\n\n\n  var block = new Uint8Array(64);\n\n  for (var i = 0; i < src.length; i += 64) {\n    // Generate a block.\n    core(block, nc, key); // XOR block bytes with src into dst.\n\n    for (var j = i; j < i + 64 && j < src.length; j++) {\n      dst[j] = src[j] ^ block[j - i];\n    } // Increment counter.\n\n\n    incrementCounter(nc, 0, counterLength);\n  } // Cleanup temporary space.\n\n\n  wipe_1.wipe(block);\n\n  if (nonceInplaceCounterLength === 0) {\n    // Cleanup counter.\n    wipe_1.wipe(nc);\n  }\n\n  return dst;\n}\n\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\n\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\n\nexports.stream = stream;\n\nfunction incrementCounter(counter, pos, len) {\n  var carry = 1;\n\n  while (len--) {\n    carry = carry + (counter[pos] & 0xff) | 0;\n    counter[pos] = carry & 0xff;\n    carry >>>= 8;\n    pos++;\n  }\n\n  if (carry > 0) {\n    throw new Error(\"ChaCha: counter overflow\");\n  }\n}","map":{"version":3,"sources":["../chacha.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package chacha implements ChaCha stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out, input, key) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622D32; // \"2-by\"\n    var j3 = 0x6B206574; // \"te k\"\n    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];\n    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];\n    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];\n    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for (var i = 0; i < ROUNDS; i += 2) {\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n    }\n    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n    var nc;\n    var counterLength;\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    }\n    else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n    // Allocate temporary space for ChaCha block.\n    var block = new Uint8Array(64);\n    for (var i = 0; i < src.length; i += 64) {\n        // Generate a block.\n        core(block, nc, key);\n        // XOR block bytes with src into dst.\n        for (var j = i; j < i + 64 && j < src.length; j++) {\n            dst[j] = src[j] ^ block[j - i];\n        }\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n    // Cleanup temporary space.\n    wipe_1.wipe(block);\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe_1.wipe(nc);\n    }\n    return dst;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n    var carry = 1;\n    while (len--) {\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n}\n//# sourceMappingURL=chacha.js.map"]},"metadata":{},"sourceType":"script"}
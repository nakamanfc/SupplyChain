{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ip-port-to-multiaddr'), {\n  error: debug('libp2p:ip-port-to-multiaddr:err')\n});\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  Address4,\n  Address6\n} = require('ip-address');\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n};\n/**\n * Transform an IP, Port pair into a multiaddr\n *\n * @param {string} ip\n * @param {number|string} port\n */\n\nfunction ipPortToMultiaddr(ip, port) {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER);\n  }\n\n  if (typeof port === 'string') {\n    port = parseInt(port);\n  }\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER);\n  }\n\n  try {\n    // Test valid IPv4\n    new Address4(ip); // eslint-disable-line no-new\n\n    return new Multiaddr(`/ip4/${ip}/tcp/${port}`);\n  } catch {}\n\n  try {\n    // Test valid IPv6\n    const ip6 = new Address6(ip);\n    return ip6.is4() ? new Multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`) : new Multiaddr(`/ip6/${ip}/tcp/${port}`);\n  } catch (err) {\n    const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`;\n    log.error(errMsg);\n    throw errCode(new Error(errMsg), errors.ERR_INVALID_IP);\n  }\n}\n\nmodule.exports = ipPortToMultiaddr;\nmodule.exports.Errors = errors;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js"],"names":["debug","require","log","Object","assign","error","Multiaddr","errCode","Address4","Address6","errors","ERR_INVALID_IP_PARAMETER","ERR_INVALID_PORT_PARAMETER","ERR_INVALID_IP","ipPortToMultiaddr","ip","port","Error","parseInt","isNaN","ip6","is4","to4","correctForm","err","errMsg","module","exports","Errors"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,6BAAD,CAAnB,EAAoD;AAC9DK,EAAAA,KAAK,EAAEL,KAAK,CAAC,iCAAD;AADkD,CAApD,CAAZ;;AAGA,MAAM;AAAEM,EAAAA;AAAF,IAAgBL,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEO,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAyBR,OAAO,CAAC,YAAD,CAAtC;;AAEA,MAAMS,MAAM,GAAG;AACbC,EAAAA,wBAAwB,EAAE,0BADb;AAEbC,EAAAA,0BAA0B,EAAE,4BAFf;AAGbC,EAAAA,cAAc,EAAE;AAHH,CAAf;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA4BC,EAA5B,EAAgCC,IAAhC,EAAsC;AACpC,MAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;AAC1B,UAAMR,OAAO,CAAC,IAAIU,KAAJ,CAAW,wBAAuBF,EAAG,EAArC,CAAD,EAA0CL,MAAM,CAACC,wBAAjD,CAAb;AACD;;AAED,MAAI,OAAOK,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAD,CAAf;AACD;;AAED,MAAIG,KAAK,CAACH,IAAD,CAAT,EAAiB;AACf,UAAMT,OAAO,CAAC,IAAIU,KAAJ,CAAW,0BAAyBD,IAAK,EAAzC,CAAD,EAA8CN,MAAM,CAACE,0BAArD,CAAb;AACD;;AAED,MAAI;AACF;AACA,QAAIJ,QAAJ,CAAaO,EAAb,EAFE,CAEe;;AACjB,WAAO,IAAIT,SAAJ,CAAe,QAAOS,EAAG,QAAOC,IAAK,EAArC,CAAP;AACD,GAJD,CAIE,MAAM,CAAE;;AAEV,MAAI;AACF;AACA,UAAMI,GAAG,GAAG,IAAIX,QAAJ,CAAaM,EAAb,CAAZ;AACA,WAAOK,GAAG,CAACC,GAAJ,KACH,IAAIf,SAAJ,CAAe,QAAOc,GAAG,CAACE,GAAJ,GAAUC,WAAV,EAAwB,QAAOP,IAAK,EAA1D,CADG,GAEH,IAAIV,SAAJ,CAAe,QAAOS,EAAG,QAAOC,IAAK,EAArC,CAFJ;AAGD,GAND,CAME,OAAOQ,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAI,6CAA4CV,EAAG,IAAGC,IAAK,EAAvE;AACAd,IAAAA,GAAG,CAACG,KAAJ,CAAUoB,MAAV;AACA,UAAMlB,OAAO,CAAC,IAAIU,KAAJ,CAAUQ,MAAV,CAAD,EAAoBf,MAAM,CAACG,cAA3B,CAAb;AACD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiBb,iBAAjB;AAEAY,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBlB,MAAxB","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:ip-port-to-multiaddr'), {\n  error: debug('libp2p:ip-port-to-multiaddr:err')\n})\nconst { Multiaddr } = require('multiaddr')\nconst errCode = require('err-code')\nconst { Address4, Address6 } = require('ip-address')\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n}\n\n/**\n * Transform an IP, Port pair into a multiaddr\n *\n * @param {string} ip\n * @param {number|string} port\n */\nfunction ipPortToMultiaddr (ip, port) {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER)\n  }\n\n  if (typeof port === 'string') {\n    port = parseInt(port)\n  }\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER)\n  }\n\n  try {\n    // Test valid IPv4\n    new Address4(ip) // eslint-disable-line no-new\n    return new Multiaddr(`/ip4/${ip}/tcp/${port}`)\n  } catch {}\n\n  try {\n    // Test valid IPv6\n    const ip6 = new Address6(ip)\n    return ip6.is4()\n      ? new Multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)\n      : new Multiaddr(`/ip6/${ip}/tcp/${port}`)\n  } catch (err) {\n    const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`\n    log.error(errMsg)\n    throw errCode(new Error(errMsg), errors.ERR_INVALID_IP)\n  }\n}\n\nmodule.exports = ipPortToMultiaddr\n\nmodule.exports.Errors = errors\n"]},"metadata":{},"sourceType":"script"}
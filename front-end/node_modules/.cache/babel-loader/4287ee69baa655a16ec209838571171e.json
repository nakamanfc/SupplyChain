{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport * as common from './common';\nimport * as constants from './v4/constants';\nimport { AddressError } from './address-error';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\n\nexport class Address4 {\n  constructor(address) {\n    this.groups = constants.GROUPS;\n    this.parsedAddress = [];\n    this.parsedSubnet = '';\n    this.subnet = '/32';\n    this.subnetMask = 32;\n    this.v4 = true;\n    /**\n     * Returns true if the address is correct, false otherwise\n     * @memberof Address4\n     * @instance\n     * @returns {Boolean}\n     */\n\n    this.isCorrect = common.isCorrect(constants.BITS);\n    /**\n     * Returns true if the given address is in the subnet of the current address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n\n    this.isInSubnet = common.isInSubnet;\n    this.address = address;\n    const subnet = constants.RE_SUBNET_STRING.exec(address);\n\n    if (subnet) {\n      this.parsedSubnet = subnet[0].replace('/', '');\n      this.subnetMask = parseInt(this.parsedSubnet, 10);\n      this.subnet = `/${this.subnetMask}`;\n\n      if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n        throw new AddressError('Invalid subnet mask.');\n      }\n\n      address = address.replace(constants.RE_SUBNET_STRING, '');\n    }\n\n    this.addressMinusSuffix = address;\n    this.parsedAddress = this.parse(address);\n  }\n\n  static isValid(address) {\n    try {\n      // eslint-disable-next-line no-new\n      new Address4(address);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /*\n   * Parses a v4 address\n   */\n\n\n  parse(address) {\n    const groups = address.split('.');\n\n    if (!address.match(constants.RE_ADDRESS)) {\n      throw new AddressError('Invalid IPv4 address.');\n    }\n\n    return groups;\n  }\n  /**\n   * Returns the correct form of an address\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  correctForm() {\n    return this.parsedAddress.map(part => parseInt(part, 10)).join('.');\n  }\n  /**\n   * Converts a hex string to an IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {string} hex - a hex string to convert\n   * @returns {Address4}\n   */\n\n\n  static fromHex(hex) {\n    const padded = hex.replace(/:/g, '').padStart(8, '0');\n    const groups = [];\n    let i;\n\n    for (i = 0; i < 8; i += 2) {\n      const h = padded.slice(i, i + 2);\n      groups.push(parseInt(h, 16));\n    }\n\n    return new Address4(groups.join('.'));\n  }\n  /**\n   * Converts an integer into a IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {integer} integer - a number to convert\n   * @returns {Address4}\n   */\n\n\n  static fromInteger(integer) {\n    return Address4.fromHex(integer.toString(16));\n  }\n  /**\n   * Return an address from in-addr.arpa form\n   * @memberof Address4\n   * @static\n   * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n   * @returns {Adress4}\n   * @example\n   * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n   * address.correctForm(); // '192.0.2.42'\n   */\n\n\n  static fromArpa(arpaFormAddress) {\n    // remove ending \".in-addr.arpa.\" or just \".\"\n    const leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n    const address = leader.split('.').reverse().join('.');\n    return new Address4(address);\n  }\n  /**\n   * Converts an IPv4 address object to a hex string\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  toHex() {\n    return this.parsedAddress.map(part => sprintf('%02x', parseInt(part, 10))).join(':');\n  }\n  /**\n   * Converts an IPv4 address object to an array of bytes\n   * @memberof Address4\n   * @instance\n   * @returns {Array}\n   */\n\n\n  toArray() {\n    return this.parsedAddress.map(part => parseInt(part, 10));\n  }\n  /**\n   * Converts an IPv4 address object to an IPv6 address group\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  toGroup6() {\n    const output = [];\n    let i;\n\n    for (i = 0; i < constants.GROUPS; i += 2) {\n      const hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n      output.push(sprintf('%x', parseInt(hex, 16)));\n    }\n\n    return output.join(':');\n  }\n  /**\n   * Returns the address as a BigInteger\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  bigInteger() {\n    return new BigInteger(this.parsedAddress.map(n => sprintf('%02x', parseInt(n, 10))).join(''), 16);\n  }\n  /**\n   * Helper function getting start address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  _startAddress() {\n    return new BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The first address in the range given by this address' subnet.\n   * Often referred to as the Network Address.\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  startAddress() {\n    return Address4.fromBigInteger(this._startAddress());\n  }\n  /**\n   * The first host address in the range given by this address's subnet ie\n   * the first address after the Network Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  startAddressExclusive() {\n    const adjust = new BigInteger('1');\n    return Address4.fromBigInteger(this._startAddress().add(adjust));\n  }\n  /**\n   * Helper function getting end address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  _endAddress() {\n    return new BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The last address in the range given by this address' subnet\n   * Often referred to as the Broadcast\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  endAddress() {\n    return Address4.fromBigInteger(this._endAddress());\n  }\n  /**\n   * The last host address in the range given by this address's subnet ie\n   * the last address prior to the Broadcast Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  endAddressExclusive() {\n    const adjust = new BigInteger('1');\n    return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n  }\n  /**\n   * Converts a BigInteger to a v4 address object\n   * @memberof Address4\n   * @static\n   * @param {BigInteger} bigInteger - a BigInteger to convert\n   * @returns {Address4}\n   */\n\n\n  static fromBigInteger(bigInteger) {\n    return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n  }\n  /**\n   * Returns the first n bits of the address, defaulting to the\n   * subnet mask\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  mask(mask) {\n    if (mask === undefined) {\n      mask = this.subnetMask;\n    }\n\n    return this.getBitsBase2(0, mask);\n  }\n  /**\n   * Returns the bits in the given range as a base-2 string\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  getBitsBase2(start, end) {\n    return this.binaryZeroPad().slice(start, end);\n  }\n  /**\n   * Return the reversed ip6.arpa form of the address\n   * @memberof Address4\n   * @param {Object} options\n   * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n   * @instance\n   * @returns {String}\n   */\n\n\n  reverseForm(options) {\n    if (!options) {\n      options = {};\n    }\n\n    const reversed = this.correctForm().split('.').reverse().join('.');\n\n    if (options.omitSuffix) {\n      return reversed;\n    }\n\n    return sprintf('%s.in-addr.arpa.', reversed);\n  }\n  /**\n   * Returns true if the given address is a multicast address\n   * @memberof Address4\n   * @instance\n   * @returns {boolean}\n   */\n\n\n  isMulticast() {\n    return this.isInSubnet(new Address4('224.0.0.0/4'));\n  }\n  /**\n   * Returns a zero-padded base-2 string representation of the address\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  binaryZeroPad() {\n    return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n  }\n  /**\n   * Groups an IPv4 address for inclusion at the end of an IPv6 address\n   * @returns {String}\n   */\n\n\n  groupForV6() {\n    const segments = this.parsedAddress;\n    return this.address.replace(constants.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  }\n\n}","map":{"version":3,"sources":["../../../lib/ipv4.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable no-param-reassign */\nimport * as common from './common';\nimport * as constants from './v4/constants';\nimport { AddressError } from './address-error';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\nexport class Address4 {\n    constructor(address) {\n        this.groups = constants.GROUPS;\n        this.parsedAddress = [];\n        this.parsedSubnet = '';\n        this.subnet = '/32';\n        this.subnetMask = 32;\n        this.v4 = true;\n        /**\n         * Returns true if the address is correct, false otherwise\n         * @memberof Address4\n         * @instance\n         * @returns {Boolean}\n         */\n        this.isCorrect = common.isCorrect(constants.BITS);\n        /**\n         * Returns true if the given address is in the subnet of the current address\n         * @memberof Address4\n         * @instance\n         * @returns {boolean}\n         */\n        this.isInSubnet = common.isInSubnet;\n        this.address = address;\n        const subnet = constants.RE_SUBNET_STRING.exec(address);\n        if (subnet) {\n            this.parsedSubnet = subnet[0].replace('/', '');\n            this.subnetMask = parseInt(this.parsedSubnet, 10);\n            this.subnet = `/${this.subnetMask}`;\n            if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n                throw new AddressError('Invalid subnet mask.');\n            }\n            address = address.replace(constants.RE_SUBNET_STRING, '');\n        }\n        this.addressMinusSuffix = address;\n        this.parsedAddress = this.parse(address);\n    }\n    static isValid(address) {\n        try {\n            // eslint-disable-next-line no-new\n            new Address4(address);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /*\n     * Parses a v4 address\n     */\n    parse(address) {\n        const groups = address.split('.');\n        if (!address.match(constants.RE_ADDRESS)) {\n            throw new AddressError('Invalid IPv4 address.');\n        }\n        return groups;\n    }\n    /**\n     * Returns the correct form of an address\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    correctForm() {\n        return this.parsedAddress.map((part) => parseInt(part, 10)).join('.');\n    }\n    /**\n     * Converts a hex string to an IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {string} hex - a hex string to convert\n     * @returns {Address4}\n     */\n    static fromHex(hex) {\n        const padded = hex.replace(/:/g, '').padStart(8, '0');\n        const groups = [];\n        let i;\n        for (i = 0; i < 8; i += 2) {\n            const h = padded.slice(i, i + 2);\n            groups.push(parseInt(h, 16));\n        }\n        return new Address4(groups.join('.'));\n    }\n    /**\n     * Converts an integer into a IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {integer} integer - a number to convert\n     * @returns {Address4}\n     */\n    static fromInteger(integer) {\n        return Address4.fromHex(integer.toString(16));\n    }\n    /**\n     * Return an address from in-addr.arpa form\n     * @memberof Address4\n     * @static\n     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n     * @returns {Adress4}\n     * @example\n     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n     * address.correctForm(); // '192.0.2.42'\n     */\n    static fromArpa(arpaFormAddress) {\n        // remove ending \".in-addr.arpa.\" or just \".\"\n        const leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n        const address = leader.split('.').reverse().join('.');\n        return new Address4(address);\n    }\n    /**\n     * Converts an IPv4 address object to a hex string\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    toHex() {\n        return this.parsedAddress.map((part) => sprintf('%02x', parseInt(part, 10))).join(':');\n    }\n    /**\n     * Converts an IPv4 address object to an array of bytes\n     * @memberof Address4\n     * @instance\n     * @returns {Array}\n     */\n    toArray() {\n        return this.parsedAddress.map((part) => parseInt(part, 10));\n    }\n    /**\n     * Converts an IPv4 address object to an IPv6 address group\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    toGroup6() {\n        const output = [];\n        let i;\n        for (i = 0; i < constants.GROUPS; i += 2) {\n            const hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n            output.push(sprintf('%x', parseInt(hex, 16)));\n        }\n        return output.join(':');\n    }\n    /**\n     * Returns the address as a BigInteger\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    bigInteger() {\n        return new BigInteger(this.parsedAddress.map((n) => sprintf('%02x', parseInt(n, 10))).join(''), 16);\n    }\n    /**\n     * Helper function getting start address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    _startAddress() {\n        return new BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The first address in the range given by this address' subnet.\n     * Often referred to as the Network Address.\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    startAddress() {\n        return Address4.fromBigInteger(this._startAddress());\n    }\n    /**\n     * The first host address in the range given by this address's subnet ie\n     * the first address after the Network Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    startAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address4.fromBigInteger(this._startAddress().add(adjust));\n    }\n    /**\n     * Helper function getting end address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    _endAddress() {\n        return new BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The last address in the range given by this address' subnet\n     * Often referred to as the Broadcast\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    endAddress() {\n        return Address4.fromBigInteger(this._endAddress());\n    }\n    /**\n     * The last host address in the range given by this address's subnet ie\n     * the last address prior to the Broadcast Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    endAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n    }\n    /**\n     * Converts a BigInteger to a v4 address object\n     * @memberof Address4\n     * @static\n     * @param {BigInteger} bigInteger - a BigInteger to convert\n     * @returns {Address4}\n     */\n    static fromBigInteger(bigInteger) {\n        return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n    }\n    /**\n     * Returns the first n bits of the address, defaulting to the\n     * subnet mask\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    mask(mask) {\n        if (mask === undefined) {\n            mask = this.subnetMask;\n        }\n        return this.getBitsBase2(0, mask);\n    }\n    /**\n     * Returns the bits in the given range as a base-2 string\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n    getBitsBase2(start, end) {\n        return this.binaryZeroPad().slice(start, end);\n    }\n    /**\n     * Return the reversed ip6.arpa form of the address\n     * @memberof Address4\n     * @param {Object} options\n     * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n     * @instance\n     * @returns {String}\n     */\n    reverseForm(options) {\n        if (!options) {\n            options = {};\n        }\n        const reversed = this.correctForm().split('.').reverse().join('.');\n        if (options.omitSuffix) {\n            return reversed;\n        }\n        return sprintf('%s.in-addr.arpa.', reversed);\n    }\n    /**\n     * Returns true if the given address is a multicast address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n    isMulticast() {\n        return this.isInSubnet(new Address4('224.0.0.0/4'));\n    }\n    /**\n     * Returns a zero-padded base-2 string representation of the address\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n    binaryZeroPad() {\n        return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n    }\n    /**\n     * Groups an IPv4 address for inclusion at the end of an IPv6 address\n     * @returns {String}\n     */\n    groupForV6() {\n        const segments = this.parsedAddress;\n        return this.address.replace(constants.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n    }\n}\n//# sourceMappingURL=ipv4.js.map"]},"metadata":{},"sourceType":"module"}
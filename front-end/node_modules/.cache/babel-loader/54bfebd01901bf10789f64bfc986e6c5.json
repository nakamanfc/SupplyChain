{"ast":null,"code":"'use strict';\n\nconst stat = require('./stat');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"flush\"]}\n   */\n  async function mfsFlush(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    const {\n      cid\n    } = await stat(context)(path, options);\n    return cid;\n  }\n\n  return withTimeoutOption(mfsFlush);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/flush.js"],"names":["stat","require","withTimeoutOption","mergeOptions","bind","ignoreUndefined","defaultOptions","module","exports","context","mfsFlush","path","options","cid"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBG,IAAzB,CAA8B;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA9B,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAG,EAAvB;AAEA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B;AACF;AACA;AACE,iBAAeC,QAAf,CAAyBC,IAAzB,EAA+BC,OAAO,GAAG,EAAzC,EAA6C;AAC3C;AACAA,IAAAA,OAAO,GAAGT,YAAY,CAACG,cAAD,EAAiBM,OAAjB,CAAtB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAU,MAAMb,IAAI,CAACS,OAAD,CAAJ,CAAcE,IAAd,EAAoBC,OAApB,CAAtB;AAEA,WAAOC,GAAP;AACD;;AAED,SAAOX,iBAAiB,CAACQ,QAAD,CAAxB;AACD,CAdD","sourcesContent":["'use strict'\n\nconst stat = require('./stat')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"flush\"]}\n   */\n  async function mfsFlush (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await stat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n"]},"metadata":{},"sourceType":"script"}
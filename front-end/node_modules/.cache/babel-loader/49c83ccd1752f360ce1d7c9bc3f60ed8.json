{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errCode = require('err-code');\n\nconst IPFS_PREFIX = '/ipfs/';\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\n\nconst toCidAndPath = string => {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n\n  if (string instanceof CID) {\n    return {\n      cid: string,\n      path: undefined\n    };\n  }\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n\n  const parts = string.split('/');\n  let cid;\n  let path;\n\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`;\n  }\n\n  return {\n    cid,\n    path\n  };\n};\n\nmodule.exports = toCidAndPath;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core-utils/src/to-cid-and-path.js"],"names":["CID","require","errCode","IPFS_PREFIX","toCidAndPath","string","Uint8Array","decode","err","cid","path","undefined","startsWith","substring","length","parts","split","parse","shift","join","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,WAAW,GAAG,QAApB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAC/B,MAAIA,MAAM,YAAYC,UAAtB,EAAkC;AAChC,QAAI;AACFD,MAAAA,MAAM,GAAGL,GAAG,CAACO,MAAJ,CAAWF,MAAX,CAAT;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,YAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;AACD;AACF;;AAED,MAAIH,MAAM,YAAYL,GAAtB,EAA2B;AACzB,WAAO;AACLS,MAAAA,GAAG,EAAEJ,MADA;AAELK,MAAAA,IAAI,EAAEC;AAFD,KAAP;AAID;;AAED,MAAIN,MAAM,CAACO,UAAP,CAAkBT,WAAlB,CAAJ,EAAoC;AAClCE,IAAAA,MAAM,GAAGA,MAAM,CAACQ,SAAP,CAAiBV,WAAW,CAACW,MAA7B,CAAT;AACD;;AAED,QAAMC,KAAK,GAAGV,MAAM,CAACW,KAAP,CAAa,GAAb,CAAd;AACA,MAAIP,GAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAI;AACFD,IAAAA,GAAG,GAAGT,GAAG,CAACiB,KAAJ,CAAUF,KAAK,CAACG,KAAN,MAAiB,EAA3B,CAAN;AACD,GAFD,CAEE,OAAOV,GAAP,EAAY;AACZ,UAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;AACD;;AAED,MAAIO,KAAK,CAACD,MAAV,EAAkB;AAChBJ,IAAAA,IAAI,GAAI,IAAGK,KAAK,CAACI,IAAN,CAAW,GAAX,CAAgB,EAA3B;AACD;;AAED,SAAO;AACLV,IAAAA,GADK;AAELC,IAAAA;AAFK,GAAP;AAID,CAtCD;;AAwCAU,MAAM,CAACC,OAAP,GAAiBjB,YAAjB","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errCode = require('err-code')\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nconst toCidAndPath = (string) => {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  if (string instanceof CID) {\n    return {\n      cid: string,\n      path: undefined\n    }\n  }\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let cid\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n\nmodule.exports = toCidAndPath\n"]},"metadata":{},"sourceType":"script"}
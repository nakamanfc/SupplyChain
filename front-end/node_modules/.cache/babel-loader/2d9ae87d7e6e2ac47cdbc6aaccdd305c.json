{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGossipPeers = void 0;\n\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n * that pass an optional filter function\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @param {Function} [filter] a function to filter acceptable peers\n * @returns {Set<string>}\n *\n */\n\n\nfunction getGossipPeers(router, topic, count, filter = () => true) {\n  const peersInTopic = router.topics.get(topic);\n\n  if (!peersInTopic) {\n    return new Set();\n  } // Adds all peers using our protocol\n  // that also pass the filter function\n\n\n  let peers = [];\n  peersInTopic.forEach(id => {\n    const peerStreams = router.peers.get(id);\n\n    if (!peerStreams) {\n      return;\n    }\n\n    if (utils_1.hasGossipProtocol(peerStreams.protocol) && filter(id)) {\n      peers.push(id);\n    }\n  }); // Pseudo-randomly shuffles peers\n\n  peers = utils_1.shuffle(peers);\n\n  if (count > 0 && peers.length > count) {\n    peers = peers.slice(0, count);\n  }\n\n  return new Set(peers);\n}\n\nexports.getGossipPeers = getGossipPeers;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-gossipsub/src/get-gossip-peers.js"],"names":["Object","defineProperty","exports","value","getGossipPeers","utils_1","require","router","topic","count","filter","peersInTopic","topics","get","Set","peers","forEach","id","peerStreams","hasGossipProtocol","protocol","push","shuffle","length","slice"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBG,MAAxB,EAAgCC,KAAhC,EAAuCC,KAAvC,EAA8CC,MAAM,GAAG,MAAM,IAA7D,EAAmE;AAC/D,QAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAP,CAAcC,GAAd,CAAkBL,KAAlB,CAArB;;AACA,MAAI,CAACG,YAAL,EAAmB;AACf,WAAO,IAAIG,GAAJ,EAAP;AACH,GAJ8D,CAK/D;AACA;;;AACA,MAAIC,KAAK,GAAG,EAAZ;AACAJ,EAAAA,YAAY,CAACK,OAAb,CAAsBC,EAAD,IAAQ;AACzB,UAAMC,WAAW,GAAGX,MAAM,CAACQ,KAAP,CAAaF,GAAb,CAAiBI,EAAjB,CAApB;;AACA,QAAI,CAACC,WAAL,EAAkB;AACd;AACH;;AACD,QAAIb,OAAO,CAACc,iBAAR,CAA0BD,WAAW,CAACE,QAAtC,KACAV,MAAM,CAACO,EAAD,CADV,EACgB;AACZF,MAAAA,KAAK,CAACM,IAAN,CAAWJ,EAAX;AACH;AACJ,GATD,EAR+D,CAkB/D;;AACAF,EAAAA,KAAK,GAAGV,OAAO,CAACiB,OAAR,CAAgBP,KAAhB,CAAR;;AACA,MAAIN,KAAK,GAAG,CAAR,IAAaM,KAAK,CAACQ,MAAN,GAAed,KAAhC,EAAuC;AACnCM,IAAAA,KAAK,GAAGA,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAef,KAAf,CAAR;AACH;;AACD,SAAO,IAAIK,GAAJ,CAAQC,KAAR,CAAP;AACH;;AACDb,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGossipPeers = void 0;\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n * that pass an optional filter function\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @param {Function} [filter] a function to filter acceptable peers\n * @returns {Set<string>}\n *\n */\nfunction getGossipPeers(router, topic, count, filter = () => true) {\n    const peersInTopic = router.topics.get(topic);\n    if (!peersInTopic) {\n        return new Set();\n    }\n    // Adds all peers using our protocol\n    // that also pass the filter function\n    let peers = [];\n    peersInTopic.forEach((id) => {\n        const peerStreams = router.peers.get(id);\n        if (!peerStreams) {\n            return;\n        }\n        if (utils_1.hasGossipProtocol(peerStreams.protocol) &&\n            filter(id)) {\n            peers.push(id);\n        }\n    });\n    // Pseudo-randomly shuffles peers\n    peers = utils_1.shuffle(peers);\n    if (count > 0 && peers.length > count) {\n        peers = peers.slice(0, count);\n    }\n    return new Set(peers);\n}\nexports.getGossipPeers = getGossipPeers;\n"]},"metadata":{},"sourceType":"script"}
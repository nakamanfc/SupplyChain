{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n\nconst {\n  NotEnabledError\n} = require('../errors');\n\nconst get = require('dlv');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\n\n\nmodule.exports = ({\n  network,\n  config\n}) => {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true);\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  };\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"subscribe\"]}\n   */\n\n  async function subscribe(topic, handler, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n    return libp2p.pubsub.subscribe(topic, handler, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"unsubscribe\"]}\n   */\n\n\n  async function unsubscribe(topic, handler, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options); // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n    libp2p.pubsub.unsubscribe(topic, handler, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"publish\"]}\n   */\n\n\n  async function publish(topic, data, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n    }\n\n    await libp2p.pubsub.publish(topic, data);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"ls\"]}\n   */\n\n\n  async function ls(options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    return libp2p.pubsub.getTopics();\n  }\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"peers\"]}\n   */\n\n\n  async function peers(topic, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    return libp2p.pubsub.getSubscribers(topic);\n  }\n};\n\nconst notEnabled = async () => {\n  // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled');\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/pubsub.js"],"names":["withTimeoutOption","require","errCode","NotEnabledError","get","module","exports","network","config","isEnabled","subscribe","notEnabled","unsubscribe","publish","ls","peers","topic","handler","options","libp2p","use","pubsub","data","Error","getTopics","getSubscribers"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst errCode = require('err-code')\nconst { NotEnabledError } = require('../errors')\nconst get = require('dlv')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\nmodule.exports = ({ network, config }) => {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true)\n\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"subscribe\"]}\n   */\n  async function subscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n    // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n    return libp2p.pubsub.subscribe(topic, handler, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n    // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n    libp2p.pubsub.unsubscribe(topic, handler, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const { libp2p } = await network.use(options)\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n    }\n    await libp2p.pubsub.publish(topic, data)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.pubsub.getTopics()\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.pubsub.getSubscribers(topic)\n  }\n}\n\nconst notEnabled = async () => { // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled')\n}\n"]},"metadata":{},"sourceType":"script"}
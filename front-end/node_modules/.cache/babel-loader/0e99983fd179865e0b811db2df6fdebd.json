{"ast":null,"code":"'use strict';\n\nconst _get = require('just-safe-get');\n\nconst debug = require('debug');\n\nconst errCode = require('err-code');\n\nconst migrator = require('ipfs-repo-migrations');\n\nconst bytes = require('bytes');\n\nconst merge = require('merge-options');\n\nconst constants = require('./constants');\n\nconst version = require('./version');\n\nconst config = require('./config');\n\nconst spec = require('./spec');\n\nconst apiAddr = require('./api-addr');\n\nconst createIdstore = require('./idstore');\n\nconst defaultOptions = require('./default-options');\n\nconst defaultDatastore = require('./default-datastore');\n\nconst ERRORS = require('./errors');\n\nconst {\n  PinManager,\n  PinTypes\n} = require('./pins');\n\nconst createPinnedBlockstore = require('./pinned-blockstore'); // @ts-ignore - no types\n\n\nconst mortice = require('mortice');\n\nconst gc = require('./gc');\n\nconst MemoryLock = require('./locks/memory');\n\nconst FSLock = require('./locks/fs');\n\nconst log = debug('ipfs:repo');\nconst noLimit = Number.MAX_SAFE_INTEGER;\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\n\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor(path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path');\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader');\n    }\n    /** @type {Options} */\n\n\n    this.options = merge(defaultOptions, options);\n    this.closed = true;\n    this.path = path;\n    this.root = backends.root;\n    this.datastore = backends.datastore;\n    this.keys = backends.keys;\n    const blockstore = backends.blocks;\n    const pinstore = backends.pins;\n    this.pins = new PinManager({\n      pinstore,\n      blockstore,\n      loadCodec\n    }); // this blockstore will not delete blocks that have been pinned\n\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore); // this blockstore will extract blocks from multihashes with the identity codec\n\n    this.blocks = createIdstore(pinnedBlockstore);\n    this.version = version(this.root);\n    this.config = config(this.root);\n    this.spec = spec(this.root);\n    this.apiAddr = apiAddr(this.root);\n    /** @type {GCLock} */\n\n    this.gcLock = mortice(path, {\n      singleProcess: this.options.repoOwner !== false\n    });\n    this.gc = gc({\n      gcLock: this.gcLock,\n      pins: this.pins,\n      blockstore: this.blocks,\n      root: this.root,\n      loadCodec\n    });\n  }\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n\n\n  async init(config) {\n    log('initializing at: %s', this.path);\n    await this._openRoot();\n    await this.config.replace(buildConfig(config));\n    await this.spec.set(buildDatastoreSpec(config));\n    await this.version.set(constants.repoVersion);\n  }\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  async isInitialized() {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true;\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot();\n      await this._checkInitialized();\n      await this.root.close();\n      return true;\n    } catch (err) {\n      // FIXME: do not use exceptions for flow control\n      return false;\n    }\n  }\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async open() {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN);\n    }\n\n    log('opening at: %s', this.path); // check if the repo is already initialized\n\n    try {\n      await this._openRoot();\n      await this._checkInitialized();\n      this._lockfile = await this._openLock();\n      log('acquired repo.lock');\n      const isCompatible = await this.version.check(constants.repoVersion);\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(constants.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          });\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');\n        }\n      }\n\n      log('creating datastore');\n      await this.datastore.open();\n      log('creating blocks');\n      this.blocks.open();\n      log('creating keystore');\n      await this.keys.open();\n      log('creating pins');\n      await this.pins.pinstore.open();\n      this.closed = false;\n      log('all opened');\n    } catch (err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock();\n          this._lockfile = null;\n        } catch (err2) {\n          log('error removing lock', err2);\n        }\n      }\n\n      throw err;\n    }\n  }\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n\n\n  async _openRoot() {\n    try {\n      await this.root.open();\n    } catch (err) {\n      if (err.message !== 'Already open') {\n        throw err;\n      }\n    }\n  }\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n\n\n  async _openLock() {\n    const lockfile = await this.options.repoLock.lock(this.path);\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');\n    }\n\n    return lockfile;\n  }\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n\n\n  _closeLock() {\n    return this._lockfile && this._lockfile.close();\n  }\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n\n\n  async _checkInitialized() {\n    log('init check');\n    let config;\n\n    try {\n      [config] = await Promise.all([this.config.exists(), this.spec.exists(), this.version.exists()]);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        });\n      }\n\n      throw err;\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      });\n    }\n  }\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async close() {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED);\n    }\n\n    log('closing at: %s', this.path);\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete();\n    } catch (err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err;\n      }\n    }\n\n    await Promise.all([this.root, this.blocks, this.keys, this.datastore, this.pins.pinstore].map(store => store && store.close()));\n    log('unlocking');\n    this.closed = true;\n    await this._closeLock();\n  }\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  exists() {\n    return this.version.exists();\n  }\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n\n\n  async stat() {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([this._storageMaxStat(), this._blockStat(), this.version.get(), getSize(this.datastore), getSize(this.keys)]);\n      const size = blocks.size + datastore + keys;\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      };\n    }\n\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  async _isAutoMigrationEnabled() {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate;\n    } // TODO we need to figure out the priority here, between repo options and config.\n\n\n    let autoMigrateConfig;\n\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY);\n    } catch (e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true; // Config's default value is True\n      } else {\n        throw e;\n      }\n    }\n\n    return autoMigrateConfig;\n  }\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n\n\n  async _migrate(toVersion, backends) {\n    const currentRepoVersion = await this.version.get();\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`);\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    } else {\n      log(`migrating to version ${toVersion}`);\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  async _storageMaxStat() {\n    try {\n      const max =\n      /** @type {number} */\n      await this.config.get('Datastore.StorageMax');\n      return BigInt(bytes(max));\n    } catch (err) {\n      return BigInt(noLimit);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  async _blockStat() {\n    let count = BigInt(0);\n    let size = BigInt(0);\n\n    if (this.blocks) {\n      for await (const {\n        key,\n        value\n      } of this.blocks.query({})) {\n        count += BigInt(1);\n        size += BigInt(value.byteLength);\n        size += BigInt(key.bytes.byteLength);\n      }\n    }\n\n    return {\n      count,\n      size\n    };\n  }\n\n}\n/**\n * @param {Datastore} datastore\n */\n\n\nasync function getSize(datastore) {\n  let sum = BigInt(0);\n\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength);\n    sum += BigInt(block.key.uint8Array().byteLength);\n  }\n\n  return sum;\n}\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\n\n\nfunction createRepo(path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options);\n}\n\nmodule.exports = {\n  createRepo,\n  repoVersion: constants.repoVersion,\n  errors: ERRORS,\n  utils: {\n    blockstore: require('./utils/blockstore')\n  },\n  locks: {\n    memory: MemoryLock,\n    fs: FSLock\n  },\n  PinTypes\n};\n/**\n * @param {import('./types').Config} _config\n */\n\nfunction buildConfig(_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'));\n  return _config;\n}\n/**\n * @param {import('./types').Config} _config\n */\n\n\nfunction buildDatastoreSpec(_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = { ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  };\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map(mounting => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  };\n}","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-repo/src/index.js"],"names":["_get","require","debug","errCode","migrator","bytes","merge","constants","version","config","spec","apiAddr","createIdstore","defaultOptions","defaultDatastore","ERRORS","PinManager","PinTypes","createPinnedBlockstore","mortice","gc","MemoryLock","FSLock","log","noLimit","Number","MAX_SAFE_INTEGER","AUTO_MIGRATE_CONFIG_KEY","Repo","constructor","path","loadCodec","backends","options","Error","closed","root","datastore","keys","blockstore","blocks","pinstore","pins","pinnedBlockstore","gcLock","singleProcess","repoOwner","init","_openRoot","replace","buildConfig","set","buildDatastoreSpec","repoVersion","isInitialized","_checkInitialized","close","err","open","ERR_REPO_ALREADY_OPEN","_lockfile","_openLock","isCompatible","check","_isAutoMigrationEnabled","_migrate","InvalidRepoVersionError","_closeLock","err2","message","lockfile","repoLock","lock","Promise","all","exists","code","ERR_REPO_NOT_INITIALIZED","ERR_REPO_ALREADY_CLOSED","delete","startsWith","map","store","stat","storageMax","_storageMaxStat","_blockStat","get","getSize","size","repoPath","numObjects","count","repoSize","autoMigrate","undefined","autoMigrateConfig","e","NotFoundError","toVersion","currentRepoVersion","revert","ignoreLock","onProgress","onMigrationProgress","migrate","max","BigInt","key","value","query","byteLength","sum","block","uint8Array","createRepo","module","exports","errors","utils","locks","memory","fs","_config","Datastore","Object","assign","Spec","type","mounts","mounting","mountpoint","child","shardFunc"],"mappings":"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","sourcesContent":["'use strict'\n\nconst _get = require('just-safe-get')\nconst debug = require('debug')\nconst errCode = require('err-code')\nconst migrator = require('ipfs-repo-migrations')\nconst bytes = require('bytes')\nconst merge = require('merge-options')\nconst constants = require('./constants')\nconst version = require('./version')\nconst config = require('./config')\nconst spec = require('./spec')\nconst apiAddr = require('./api-addr')\nconst createIdstore = require('./idstore')\nconst defaultOptions = require('./default-options')\nconst defaultDatastore = require('./default-datastore')\nconst ERRORS = require('./errors')\nconst { PinManager, PinTypes } = require('./pins')\nconst createPinnedBlockstore = require('./pinned-blockstore')\n// @ts-ignore - no types\nconst mortice = require('mortice')\nconst gc = require('./gc')\nconst MemoryLock = require('./locks/memory')\nconst FSLock = require('./locks/fs')\n\nconst log = debug('ipfs:repo')\n\nconst noLimit = Number.MAX_SAFE_INTEGER\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate'\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor (path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path')\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader')\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options)\n    this.closed = true\n    this.path = path\n    this.root = backends.root\n    this.datastore = backends.datastore\n    this.keys = backends.keys\n\n    const blockstore = backends.blocks\n    const pinstore = backends.pins\n\n    this.pins = new PinManager({ pinstore, blockstore, loadCodec })\n\n    // this blockstore will not delete blocks that have been pinned\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore)\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdstore(pinnedBlockstore)\n\n    this.version = version(this.root)\n    this.config = config(this.root)\n    this.spec = spec(this.root)\n    this.apiAddr = apiAddr(this.root)\n\n    /** @type {GCLock} */\n    this.gcLock = mortice(path, {\n      singleProcess: this.options.repoOwner !== false\n    })\n\n    this.gc = gc({ gcLock: this.gcLock, pins: this.pins, blockstore: this.blocks, root: this.root, loadCodec })\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  async init (config) {\n    log('initializing at: %s', this.path)\n    await this._openRoot()\n    await this.config.replace(buildConfig(config))\n    await this.spec.set(buildDatastoreSpec(config))\n    await this.version.set(constants.repoVersion)\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n  async isInitialized () {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot()\n      await this._checkInitialized()\n      await this.root.close()\n\n      return true\n    } catch (err) {\n      // FIXME: do not use exceptions for flow control\n      return false\n    }\n  }\n\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n  async open () {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)\n    }\n    log('opening at: %s', this.path)\n\n    // check if the repo is already initialized\n    try {\n      await this._openRoot()\n      await this._checkInitialized()\n\n      this._lockfile = await this._openLock()\n      log('acquired repo.lock')\n\n      const isCompatible = await this.version.check(constants.repoVersion)\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(constants.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          })\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.')\n        }\n      }\n\n      log('creating datastore')\n      await this.datastore.open()\n\n      log('creating blocks')\n      this.blocks.open()\n\n      log('creating keystore')\n      await this.keys.open()\n\n      log('creating pins')\n      await this.pins.pinstore.open()\n\n      this.closed = false\n      log('all opened')\n    } catch (err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock()\n          this._lockfile = null\n        } catch (err2) {\n          log('error removing lock', err2)\n        }\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n  async _openRoot () {\n    try {\n      await this.root.open()\n    } catch (err) {\n      if (err.message !== 'Already open') {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n  async _openLock () {\n    const lockfile = await this.options.repoLock.lock(this.path)\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION')\n    }\n\n    return lockfile\n  }\n\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n  _closeLock () {\n    return this._lockfile && this._lockfile.close()\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n  async _checkInitialized () {\n    log('init check')\n    let config\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ])\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        })\n      }\n\n      throw err\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      })\n    }\n  }\n\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)\n    }\n    log('closing at: %s', this.path)\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete()\n    } catch (err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err\n      }\n    }\n\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map((store) => store && store.close()))\n\n    log('unlocking')\n    this.closed = true\n    await this._closeLock()\n  }\n\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n  exists () {\n    return this.version.exists()\n  }\n\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n  async stat () {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ])\n      const size = blocks.size + datastore + keys\n\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      }\n    }\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    })\n  }\n\n  /**\n   * @private\n   */\n  async _isAutoMigrationEnabled () {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate\n    }\n\n    // TODO we need to figure out the priority here, between repo options and config.\n    let autoMigrateConfig\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY)\n    } catch (e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true // Config's default value is True\n      } else {\n        throw e\n      }\n    }\n\n    return autoMigrateConfig\n  }\n\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n  async _migrate (toVersion, backends) {\n    const currentRepoVersion = await this.version.get()\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`)\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    } else {\n      log(`migrating to version ${toVersion}`)\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _storageMaxStat () {\n    try {\n      const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))\n      return BigInt(bytes(max))\n    } catch (err) {\n      return BigInt(noLimit)\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _blockStat () {\n    let count = BigInt(0)\n    let size = BigInt(0)\n\n    if (this.blocks) {\n      for await (const { key, value } of this.blocks.query({})) {\n        count += BigInt(1)\n        size += BigInt(value.byteLength)\n        size += BigInt(key.bytes.byteLength)\n      }\n    }\n\n    return { count, size }\n  }\n}\n\n/**\n * @param {Datastore} datastore\n */\nasync function getSize (datastore) {\n  let sum = BigInt(0)\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength)\n    sum += BigInt(block.key.uint8Array().byteLength)\n  }\n  return sum\n}\n\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nfunction createRepo (path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options)\n}\n\nmodule.exports = {\n  createRepo,\n  repoVersion: constants.repoVersion,\n  errors: ERRORS,\n  utils: { blockstore: require('./utils/blockstore') },\n  locks: {\n    memory: MemoryLock,\n    fs: FSLock\n  },\n  PinTypes\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig (_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))\n\n  return _config\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec (_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  }\n\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map((mounting) => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
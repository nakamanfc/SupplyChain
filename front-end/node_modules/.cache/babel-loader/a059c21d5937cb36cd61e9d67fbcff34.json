{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  } // Open the repo if it's been closed\n\n\n  await context.repo.datastore.open(); // Load the MFS root CID\n\n  let cid;\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = CID.decode(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const buf = dagPb.encode({\n      Data: new UnixFS({\n        type: 'directory'\n      }).marshal(),\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    cid = CID.createV0(hash);\n    await context.repo.blocks.put(cid, buf);\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`);\n  return cid;\n};\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js"],"names":["CID","require","UnixFS","dagPb","sha256","log","errCode","MFS_ROOT_KEY","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","cid","buf","get","decode","err","code","encode","Data","type","marshal","Links","hash","digest","createV0","blocks","put","bytes","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAaH,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAM;AACJM,EAAAA;AADI,IAEFN,OAAO,CAAC,gBAAD,CAFX;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMO,WAAW,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAC9C,MAAIA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,UAAMN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA9C,CAAb;AACD,GAH6C,CAK9C;;;AACA,QAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EAAN,CAN8C,CAQ9C;;AACA,MAAIC,GAAJ;;AAEA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBI,GAAvB,CAA2Bb,YAA3B,CAAlB;AAEAW,IAAAA,GAAG,GAAGlB,GAAG,CAACqB,MAAJ,CAAWF,GAAX,CAAN;AACD,GAJD,CAIE,OAAOG,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,eAAjB,EAAkC;AAChC,YAAMD,GAAN;AACD;;AAEDjB,IAAAA,GAAG,CAAC,uBAAD,CAAH;AACA,UAAMc,GAAG,GAAGhB,KAAK,CAACqB,MAAN,CAAa;AACvBC,MAAAA,IAAI,EAAE,IAAIvB,MAAJ,CAAW;AAAEwB,QAAAA,IAAI,EAAE;AAAR,OAAX,EAAkCC,OAAlC,EADiB;AAEvBC,MAAAA,KAAK,EAAE;AAFgB,KAAb,CAAZ;AAIA,UAAMC,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,MAAP,CAAcX,GAAd,CAAnB;AACAD,IAAAA,GAAG,GAAGlB,GAAG,CAAC+B,QAAJ,CAAaF,IAAb,CAAN;AACA,UAAMpB,OAAO,CAACM,IAAR,CAAaiB,MAAb,CAAoBC,GAApB,CAAwBf,GAAxB,EAA6BC,GAA7B,CAAN;;AAEA,QAAIT,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,YAAMN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA9C,CAAb;AACD;;AAED,UAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBiB,GAAvB,CAA2B1B,YAA3B,EAAyCW,GAAG,CAACgB,KAA7C,CAAN;AACD;;AAED7B,EAAAA,GAAG,CAAE,yBAAwBa,GAAI,EAA9B,CAAH;AAEA,SAAOA,GAAP;AACD,CAvCD;;AAyCAiB,MAAM,CAACC,OAAP,GAAiB5B,WAAjB","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst errCode = require('err-code')\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPb.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('./query')} Query\n */\n\n/**\n * Keeps track of all running queries.\n */\n\nclass QueryManager {\n  /**\n   * Creates a new QueryManager.\n   */\n  constructor() {\n    this.queries = new Set();\n    this.running = false;\n  }\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n\n\n  queryStarted(query) {\n    this.queries.add(query);\n  }\n  /**\n   * Called when a query completes.\n   *\n   * @param {Query} query\n   */\n\n\n  queryCompleted(query) {\n    this.queries.delete(query);\n  }\n  /**\n   * Starts the query manager.\n   */\n\n\n  start() {\n    this.running = true;\n  }\n  /**\n   * Stops all queries.\n   */\n\n\n  stop() {\n    this.running = false;\n\n    for (const query of this.queries) {\n      query.stop();\n    }\n\n    this.queries.clear();\n  }\n\n}\n\nmodule.exports = QueryManager;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-kad-dht/src/query-manager.js"],"names":["QueryManager","constructor","queries","Set","running","queryStarted","query","add","queryCompleted","delete","start","stop","clear","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,YAAN,CAAmB;AACjB;AACF;AACA;AACEC,EAAAA,WAAW,GAAI;AACb,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,OAAL,GAAe,KAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CAAEC,KAAF,EAAS;AACnB,SAAKJ,OAAL,CAAaK,GAAb,CAAiBD,KAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,cAAc,CAAEF,KAAF,EAAS;AACrB,SAAKJ,OAAL,CAAaO,MAAb,CAAoBH,KAApB;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,KAAK,GAAI;AACP,SAAKN,OAAL,GAAe,IAAf;AACD;AAED;AACF;AACA;;;AACEO,EAAAA,IAAI,GAAI;AACN,SAAKP,OAAL,GAAe,KAAf;;AACA,SAAK,MAAME,KAAX,IAAoB,KAAKJ,OAAzB,EAAkC;AAChCI,MAAAA,KAAK,CAACK,IAAN;AACD;;AACD,SAAKT,OAAL,CAAaU,KAAb;AACD;;AA3CgB;;AA8CnBC,MAAM,CAACC,OAAP,GAAiBd,YAAjB","sourcesContent":["'use strict'\n\n/**\n * @typedef {import('./query')} Query\n */\n\n/**\n * Keeps track of all running queries.\n */\nclass QueryManager {\n  /**\n   * Creates a new QueryManager.\n   */\n  constructor () {\n    this.queries = new Set()\n    this.running = false\n  }\n\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n  queryStarted (query) {\n    this.queries.add(query)\n  }\n\n  /**\n   * Called when a query completes.\n   *\n   * @param {Query} query\n   */\n  queryCompleted (query) {\n    this.queries.delete(query)\n  }\n\n  /**\n   * Starts the query manager.\n   */\n  start () {\n    this.running = true\n  }\n\n  /**\n   * Stops all queries.\n   */\n  stop () {\n    this.running = false\n    for (const query of this.queries) {\n      query.stop()\n    }\n    this.queries.clear()\n  }\n}\n\nmodule.exports = QueryManager\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node');\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  async function findNode(peerId, msg) {\n    log('start');\n    let closer;\n\n    if (uint8ArrayEquals(msg.key, dht.peerId.id)) {\n      closer = [{\n        id: dht.peerId,\n        multiaddrs: dht.libp2p.multiaddrs\n      }];\n    } else {\n      closer = await dht._betterPeersToQuery(msg, peerId);\n    }\n\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n\n    if (closer.length > 0) {\n      response.closerPeers = closer;\n    } else {\n      log('handle FindNode %s: could not find anything', peerId.toB58String());\n    }\n\n    return response;\n  }\n\n  return findNode;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-kad-dht/src/rpc/handlers/find-node.js"],"names":["equals","uint8ArrayEquals","require","Message","utils","module","exports","dht","log","logger","peerId","findNode","msg","closer","key","id","multiaddrs","libp2p","_betterPeersToQuery","response","type","Uint8Array","clusterLevel","length","closerPeers","toB58String"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,MAAM,EAAEC;AAAV,IAA+BC,OAAO,CAAC,oBAAD,CAA5C;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,eAAzB,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,iBAAeC,QAAf,CAAyBD,MAAzB,EAAiCE,GAAjC,EAAsC;AACpCJ,IAAAA,GAAG,CAAC,OAAD,CAAH;AAEA,QAAIK,MAAJ;;AACA,QAAIZ,gBAAgB,CAACW,GAAG,CAACE,GAAL,EAAUP,GAAG,CAACG,MAAJ,CAAWK,EAArB,CAApB,EAA8C;AAC5CF,MAAAA,MAAM,GAAG,CAAC;AACRE,QAAAA,EAAE,EAAER,GAAG,CAACG,MADA;AAERM,QAAAA,UAAU,EAAET,GAAG,CAACU,MAAJ,CAAWD;AAFf,OAAD,CAAT;AAID,KALD,MAKO;AACLH,MAAAA,MAAM,GAAG,MAAMN,GAAG,CAACW,mBAAJ,CAAwBN,GAAxB,EAA6BF,MAA7B,CAAf;AACD;;AAED,UAAMS,QAAQ,GAAG,IAAIhB,OAAJ,CAAYS,GAAG,CAACQ,IAAhB,EAAsB,IAAIC,UAAJ,CAAe,CAAf,CAAtB,EAAyCT,GAAG,CAACU,YAA7C,CAAjB;;AAEA,QAAIT,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrBJ,MAAAA,QAAQ,CAACK,WAAT,GAAuBX,MAAvB;AACD,KAFD,MAEO;AACLL,MAAAA,GAAG,CAAC,6CAAD,EAAgDE,MAAM,CAACe,WAAP,EAAhD,CAAH;AACD;;AAED,WAAON,QAAP;AACD;;AAED,SAAOR,QAAP;AACD,CAlCD","sourcesContent":["'use strict'\n\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:find-node')\n\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function findNode (peerId, msg) {\n    log('start')\n\n    let closer\n    if (uint8ArrayEquals(msg.key, dht.peerId.id)) {\n      closer = [{\n        id: dht.peerId,\n        multiaddrs: dht.libp2p.multiaddrs\n      }]\n    } else {\n      closer = await dht._betterPeersToQuery(msg, peerId)\n    }\n\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel)\n\n    if (closer.length > 0) {\n      response.closerPeers = closer\n    } else {\n      log('handle FindNode %s: could not find anything', peerId.toB58String())\n    }\n\n    return response\n  }\n\n  return findNode\n}\n"]},"metadata":{},"sourceType":"script"}
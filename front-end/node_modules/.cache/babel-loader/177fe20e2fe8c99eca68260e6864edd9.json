{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((\n      /** @type {any} */\n      link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n\n  return get;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/object/get.js"],"names":["CID","require","configure","toUrlSearchParams","fromString","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4BlB,GAAG,CAACmB,MAAJ,CAAWT,GAAX,CAA5B,GAA8CA,GAAI,EAD5B;AAE9BU,QAAAA,YAAY,EAAE,QAFgB;AAG9B,WAAGT;AAH2B,OAAD,CAHQ;AAQvCU,MAAAA,OAAO,EAAEV,OAAO,CAACU;AARsB,KAAvB,CAAlB;AAUA,UAAMC,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAJ,EAAnB;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAEnB,oBAAoB,CAACiB,IAAI,CAACE,IAAN,EAAY,WAAZ,CADrB;AAELC,MAAAA,KAAK,EAAE,CAACH,IAAI,CAACG,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;AAAC;AAAmBC,MAAAA,IAApB,MAA8B;AAC1DC,QAAAA,IAAI,EAAED,IAAI,CAACC,IAD+C;AAE1DC,QAAAA,IAAI,EAAE7B,GAAG,CAAC8B,KAAJ,CAAUH,IAAI,CAACE,IAAf,CAFoD;AAG1DE,QAAAA,KAAK,EAAEJ,IAAI,CAACK;AAH8C,OAA9B,CAAvB;AAFF,KAAP;AAQD;;AACD,SAAOvB,GAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}
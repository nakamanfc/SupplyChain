{"ast":null,"code":"'use strict';\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar rawCodec = require('multiformats/codecs/raw');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb__namespace,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n\n      if (options.rawLeaves) {\n        opts.codec = rawCodec__namespace;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new ipfsUnixfs.UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        });\n        buffer = dagPb__namespace.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\n\nmodule.exports = bufferImporter;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-unixfs-importer/cjs/src/dag-builder/file/buffer-importer.js"],"names":["ipfsUnixfs","require","persist","dagPb","rawCodec","_interopNamespace","e","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","dagPb__namespace","rawCodec__namespace","bufferImporter","file","block","options","buffer","content","progress","length","path","unixfs","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","UnixFS","type","leafType","data","mtime","mode","encode","Data","marshal","Links","cid","size","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar rawCodec = require('multiformats/codecs/raw');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb__namespace,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = rawCodec__namespace;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new ipfsUnixfs.UnixFS({\n          type: options.leafType,\n          data: buffer,\n          mtime: file.mtime,\n          mode: file.mode\n        });\n        buffer = dagPb__namespace.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\n\nmodule.exports = bufferImporter;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\mew-supplychain\\\\front-end\\\\src\\\\Page\\\\User.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport Contract from 'web3-eth-contract';\nimport MewToken from '../abi/MewToken.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  ethereum\n} = window;\nconst web3 = new Web3(Web3.givenProvider || \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\");\nconst token = new web3.eth.Contract(MewToken, '0xFb7628067f0821938fE6d388Cd3cAF71dD88636B');\ntoken.methods.balanceOf('0x5Bb46Ecc36DB1B4Af38eDa24e0D4633026D8AaD5').call().then(console.log);\n\nfunction User() {\n  _s();\n\n  const [account, setAccount] = useState('0x00');\n  const [wallet, setWallet] = useState('false');\n  const [toAccount, setToAccount] = useState('0x00');\n  const [x, xx] = useState('x');\n  const [name, setName] = useState('kim');\n  const [balance, setBanlance] = useState(0);\n\n  const callApi = () => {\n    fetch(\"http://localhost:5000/staff\").then(res => res.text()).then(res => xx(res));\n  };\n\n  function post() {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        StaffName: name,\n        StaffAddress: account\n      })\n    };\n    fetch(\"http://localhost:5000/staff\", requestOptions);\n    console.log(name, account);\n  }\n\n  const isMetaMaskInstalled = () => {\n    if (ethereum && ethereum.isMetaMask) setWallet('True');\n  };\n\n  async function requestWallet() {\n    await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function loadBlockchainData() {\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts);\n  }\n\n  function send() {\n    web3.eth.sendTransaction({\n      from: '0x5Bb46Ecc36DB1B4Af38eDa24e0D4633026D8AaD5',\n      to: '0xEe175A703e605aDE10707f76F061d0D13cc58c8F',\n      value: '1000000000000000'\n    }).then(console.log);\n  }\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  useEffect(() => {\n    requestWallet();\n    isMetaMaskInstalled();\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: wallet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: x\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: post,\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(User, \"N+iK8vm2kjoQi57hDQ+HPHMS9AA=\");\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/src/Page/User.js"],"names":["React","useState","useEffect","Web3","Contract","MewToken","ethereum","window","web3","givenProvider","token","eth","methods","balanceOf","call","then","console","log","User","account","setAccount","wallet","setWallet","toAccount","setToAccount","x","xx","name","setName","balance","setBanlance","callApi","fetch","res","text","post","requestOptions","method","headers","body","JSON","stringify","StaffName","StaffAddress","isMetaMaskInstalled","isMetaMask","requestWallet","request","loadBlockchainData","accounts","getAccounts","send","sendTransaction","from","to","value","handleChange","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Web3 from 'web3';\r\nimport Contract from 'web3-eth-contract'\r\nimport MewToken from '../abi/MewToken.json'\r\n\r\nconst { ethereum } = window;\r\n\r\nconst web3 = new Web3(Web3.givenProvider || \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\")\r\nconst token = new web3.eth.Contract(MewToken,'0xFb7628067f0821938fE6d388Cd3cAF71dD88636B')\r\ntoken.methods.balanceOf('0x5Bb46Ecc36DB1B4Af38eDa24e0D4633026D8AaD5').call().then(console.log)\r\n\r\nfunction User() {\r\n    const [account, setAccount] = useState('0x00')\r\n    const [wallet, setWallet] = useState('false')\r\n    const [toAccount, setToAccount] = useState('0x00')\r\n    const [x,xx] = useState('x')\r\n    const [name, setName]=useState('kim')\r\n    const [balance, setBanlance] = useState(0)\r\n\r\n    const callApi = () =>{\r\n        fetch(\"http://localhost:5000/staff\").then(res => res.text()).then(res => xx(res))\r\n    }\r\n\r\n    function post(){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({StaffName: name,StaffAddress:account})\r\n        };\r\n        fetch(\"http://localhost:5000/staff\", requestOptions)\r\n        console.log(name, account)\r\n    }\r\n\r\n\r\n    const isMetaMaskInstalled = () => {\r\n\r\n        if(ethereum && ethereum.isMetaMask)setWallet('True');\r\n    };\r\n\r\n    async function requestWallet() {\r\n        await ethereum.request({ method: 'eth_requestAccounts' });\r\n    }\r\n\r\n    async function loadBlockchainData() {\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts)\r\n    }\r\n\r\n    function send(){\r\n        web3.eth.sendTransaction({\r\n            from: '0x5Bb46Ecc36DB1B4Af38eDa24e0D4633026D8AaD5',\r\n            to: '0xEe175A703e605aDE10707f76F061d0D13cc58c8F',\r\n            value: '1000000000000000'\r\n        }).then(console.log)\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setName(event.target.value);\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        requestWallet()\r\n        isMetaMaskInstalled()\r\n        loadBlockchainData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                \r\n            </div>\r\n            <div>\r\n                {account}\r\n            </div>\r\n            <div>\r\n                {wallet}\r\n            </div>\r\n            <div>\r\n                {x}\r\n            </div>\r\n            <div>\r\n                {name}\r\n            </div>\r\n            <input onChange={handleChange}></input>\r\n            {/* <button onClick={callApi}>get</button> */}\r\n            <button onClick={post}>send</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict'; // @ts-ignore no types\n\nconst toUri = require('multiaddr-to-uri');\n\nconst debug = require('debug');\n\nconst shuffle = require('array-shuffle');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst preload = require('./runtime/preload-nodejs');\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\n\n\nconst hashlru = require('hashlru');\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n});\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\n\nconst createPreloader = (options = {}) => {\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n  options.cache = options.cache || 1000;\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n\n    const api = () => {};\n\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    });\n  }\n\n  let stopped = true;\n  /** @type {AbortController[]} */\n\n  let requests = [];\n  const apiUris = options.addresses.map(toUri); // Avoid preloading the same CID over and over again\n\n  const cache = hashlru(options.cache);\n  /**\n   * @type {import('./types').Preload}\n   */\n\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`);\n      }\n\n      const path = cid.toString();\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return;\n      } // make sure we don't preload this again any time soon\n\n\n      cache.set(path, true);\n      const fallbackApiUris = shuffle(apiUris);\n      let success = false;\n      const now = Date.now();\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`);\n        /** @type {AbortController} */\n\n        let controller;\n\n        try {\n          controller = new AbortController();\n          requests = requests.concat(controller);\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, {\n            signal: controller.signal\n          });\n          success = true;\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err);\n        } finally {\n          requests = requests.filter(r => r !== controller);\n        }\n\n        if (success) break;\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`);\n    } catch (err) {\n      log.error(err);\n    }\n  };\n  /**\n   * @returns {void}\n   */\n\n\n  api.start = () => {\n    stopped = false;\n  };\n  /**\n   * @returns {void}\n   */\n\n\n  api.stop = () => {\n    stopped = true;\n    log(`aborting ${requests.length} pending preload request(s)`);\n    requests.forEach(r => r.abort());\n    requests = [];\n  };\n\n  return api;\n};\n\nmodule.exports = createPreloader;","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/preload.js"],"names":["toUri","require","debug","shuffle","AbortController","preload","hashlru","log","Object","assign","error","createPreloader","options","enabled","Boolean","addresses","cache","length","api","start","stop","stopped","requests","apiUris","map","cid","Error","path","toString","has","set","fallbackApiUris","success","now","Date","uri","controller","concat","encodeURIComponent","signal","err","type","filter","r","forEach","abort","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// @ts-ignore no types\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst shuffle = require('array-shuffle')\nconst { AbortController } = require('native-abort-controller')\nconst preload = require('./runtime/preload-nodejs')\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\nconst hashlru = require('hashlru')\n\nconst log = Object.assign(\n  debug('ipfs:preload'),\n  { error: debug('ipfs:preload:error') }\n)\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nconst createPreloader = (options = {}) => {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map(toUri)\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n\nmodule.exports = createPreloader\n"]},"metadata":{},"sourceType":"script"}
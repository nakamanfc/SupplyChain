{"ast":null,"code":"'use strict';\n\nconst {\n  murmur3128\n} = require('@multiformats/murmur3');\n\nmodule.exports = {\n  hamtHashCode: murmur3128.code,\n  hamtBucketBits: 8,\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  async hamtHashFn(buf) {\n    return (await murmur3128.encode(buf)). // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    slice(0, 8) // Invert buffer because that's how Go impl does it\n    .reverse();\n  }\n\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/files/utils/hamt-constants.js"],"names":["murmur3128","require","module","exports","hamtHashCode","code","hamtBucketBits","hamtHashFn","buf","encode","slice","reverse"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAEJ,UAAU,CAACK,IADV;AAEfC,EAAAA,cAAc,EAAE,CAFD;;AAGf;AACF;AACA;AACE,QAAMC,UAAN,CAAkBC,GAAlB,EAAuB;AACrB,WAAO,CAAC,MAAMR,UAAU,CAACS,MAAX,CAAkBD,GAAlB,CAAP,GACL;AACA;AACA;AACCE,IAAAA,KAJI,CAIE,CAJF,EAIK,CAJL,EAKL;AALK,KAMJC,OANI,EAAP;AAOD;;AAdc,CAAjB","sourcesContent":["'use strict'\n\nconst { murmur3128 } = require('@multiformats/murmur3')\n\nmodule.exports = {\n  hamtHashCode: murmur3128.code,\n  hamtBucketBits: 8,\n  /**\n   * @param {Uint8Array} buf\n   */\n  async hamtHashFn (buf) {\n    return (await murmur3128.encode(buf))\n      // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n      // implementation only uses the first 64, so we must do the same\n      // for parity..\n      .slice(0, 8)\n      // Invert buffer because that's how Go impl does it\n      .reverse()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
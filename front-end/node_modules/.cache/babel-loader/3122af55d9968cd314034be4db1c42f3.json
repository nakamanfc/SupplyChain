{"ast":null,"code":"'use strict';\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  repo,\n  preload\n}) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"put\"]}\n   */\n  async function put(obj, options = {}) {\n    const release = await repo.gcLock.readLock();\n\n    try {\n      const buf = dagPb.encode(obj);\n      const hash = await sha256.digest(buf);\n      const cid = CID.createV0(hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        });\n      }\n\n      return cid;\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-core/src/components/object/put.js"],"names":["dagPb","require","CID","sha256","withTimeoutOption","module","exports","repo","preload","put","obj","options","release","gcLock","readLock","buf","encode","hash","digest","cid","createV0","blocks","signal","pin","pins","pinRecursively"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACtC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAtB;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAGf,KAAK,CAACgB,MAAN,CAAaN,GAAb,CAAZ;AACA,YAAMO,IAAI,GAAG,MAAMd,MAAM,CAACe,MAAP,CAAcH,GAAd,CAAnB;AACA,YAAMI,GAAG,GAAGjB,GAAG,CAACkB,QAAJ,CAAaH,IAAb,CAAZ;AAEA,YAAMV,IAAI,CAACc,MAAL,CAAYZ,GAAZ,CAAgBU,GAAhB,EAAqBJ,GAArB,EAA0B;AAC9BO,QAAAA,MAAM,EAAEX,OAAO,CAACW;AADc,OAA1B,CAAN;;AAIA,UAAIX,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACW,GAAD,CAAP;AACD;;AAED,UAAIR,OAAO,CAACY,GAAZ,EAAiB;AACf,cAAMhB,IAAI,CAACiB,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,EAA8B;AAClCG,UAAAA,MAAM,EAAEX,OAAO,CAACW;AADkB,SAA9B,CAAN;AAGD;;AAED,aAAOH,GAAP;AACD,KApBD,SAoBU;AACRP,MAAAA,OAAO;AACR;AACF;;AAED,SAAOR,iBAAiB,CAACK,GAAD,CAAxB;AACD,CAjCD","sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst { CID } = require('multiformats/cid')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPb.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV0(hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"script"}
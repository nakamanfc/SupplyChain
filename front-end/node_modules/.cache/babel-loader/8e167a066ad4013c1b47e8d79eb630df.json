{"ast":null,"code":"'use strict';\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst Message = require('../message');\n\nconst handlers = require('./handlers');\n\nconst utils = require('../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc');\n  const getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  async function handleMessage(peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type);\n\n    try {\n      await dht._add(peerId);\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err);\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`);\n      return;\n    }\n\n    return handler(peerId, msg);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n\n\n  async function onIncomingStream({\n    stream,\n    connection\n  }) {\n    const peerId = connection.remotePeer;\n\n    try {\n      await dht._add(peerId);\n    } catch (err) {\n      log.error(err);\n    }\n\n    const idB58Str = peerId.toB58String();\n    log('from: %s', idB58Str);\n    await pipe(stream.source, lp.decode(),\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    source => async function* () {\n      for await (const msg of source) {\n        // handle the message\n        const desMessage = Message.deserialize(msg.slice());\n        const res = await handleMessage(peerId, desMessage); // Not all handlers will return a response\n\n        if (res) {\n          yield res.serialize();\n        }\n      }\n    }(), lp.encode(), stream.sink);\n  }\n\n  return onIncomingStream;\n};","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/libp2p-kad-dht/src/rpc/index.js"],"names":["pipe","require","lp","Message","handlers","utils","module","exports","dht","log","logger","peerId","getMessageHandler","handleMessage","msg","handler","type","_add","err","error","onIncomingStream","stream","connection","remotePeer","idB58Str","toB58String","source","decode","desMessage","deserialize","slice","res","serialize","encode","sink"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,SAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAD,CAAlB;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,KAAzB,CAAZ;AACA,QAAMC,iBAAiB,GAAGR,QAAQ,CAACI,GAAD,CAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,iBAAeK,aAAf,CAA8BF,MAA9B,EAAsCG,GAAtC,EAA2C;AACzC;AACA,UAAMC,OAAO,GAAGH,iBAAiB,CAACE,GAAG,CAACE,IAAL,CAAjC;;AAEA,QAAI;AACF,YAAMR,GAAG,CAACS,IAAJ,CAASN,MAAT,CAAN;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZT,MAAAA,GAAG,CAACU,KAAJ,CAAU,oCAAV,EAAgDD,GAAhD;AACD;;AAED,QAAI,CAACH,OAAL,EAAc;AACZN,MAAAA,GAAG,CAACU,KAAJ,CAAW,sCAAqCL,GAAG,CAACE,IAAK,EAAzD;AACA;AACD;;AAED,WAAOD,OAAO,CAACJ,MAAD,EAASG,GAAT,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,iBAAeM,gBAAf,CAAiC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAjC,EAAyD;AACvD,UAAMX,MAAM,GAAGW,UAAU,CAACC,UAA1B;;AAEA,QAAI;AACF,YAAMf,GAAG,CAACS,IAAJ,CAASN,MAAT,CAAN;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZT,MAAAA,GAAG,CAACU,KAAJ,CAAUD,GAAV;AACD;;AAED,UAAMM,QAAQ,GAAGb,MAAM,CAACc,WAAP,EAAjB;AACAhB,IAAAA,GAAG,CAAC,UAAD,EAAae,QAAb,CAAH;AAEA,UAAMxB,IAAI,CACRqB,MAAM,CAACK,MADC,EAERxB,EAAE,CAACyB,MAAH,EAFQ;AAGR;AACN;AACA;AACMD,IAAAA,MAAM,IAAK,mBAAoB;AAC7B,iBAAW,MAAMZ,GAAjB,IAAwBY,MAAxB,EAAgC;AAC9B;AACA,cAAME,UAAU,GAAGzB,OAAO,CAAC0B,WAAR,CAAoBf,GAAG,CAACgB,KAAJ,EAApB,CAAnB;AACA,cAAMC,GAAG,GAAG,MAAMlB,aAAa,CAACF,MAAD,EAASiB,UAAT,CAA/B,CAH8B,CAK9B;;AACA,YAAIG,GAAJ,EAAS;AACP,gBAAMA,GAAG,CAACC,SAAJ,EAAN;AACD;AACF;AACF,KAXS,EANF,EAkBR9B,EAAE,CAAC+B,MAAH,EAlBQ,EAmBRZ,MAAM,CAACa,IAnBC,CAAV;AAqBD;;AAED,SAAOd,gBAAP;AACD,CAvED","sourcesContent":["'use strict'\n\nconst { pipe } = require('it-pipe')\nconst lp = require('it-length-prefixed')\n\nconst Message = require('../message')\nconst handlers = require('./handlers')\nconst utils = require('../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc')\n  const getMessageHandler = handlers(dht)\n\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function handleMessage (peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type)\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err)\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    return handler(peerId, msg)\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n  async function onIncomingStream ({ stream, connection }) {\n    const peerId = connection.remotePeer\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error(err)\n    }\n\n    const idB58Str = peerId.toB58String()\n    log('from: %s', idB58Str)\n\n    await pipe(\n      stream.source,\n      lp.decode(),\n      /**\n       * @param {AsyncIterable<Uint8Array>} source\n       */\n      source => (async function * () {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg.slice())\n          const res = await handleMessage(peerId, desMessage)\n\n          // Not all handlers will return a response\n          if (res) {\n            yield res.serialize()\n          }\n        }\n      })(),\n      lp.encode(),\n      stream.sink\n    )\n  }\n\n  return onIncomingStream\n}\n"]},"metadata":{},"sourceType":"script"}
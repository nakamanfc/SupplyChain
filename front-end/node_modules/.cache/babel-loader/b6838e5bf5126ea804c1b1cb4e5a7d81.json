{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  FinalPeer\n} = require('./response-types');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((\n          /** @type {string} **/\n          a) => new Multiaddr(a))\n        };\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return findPeer;\n});","map":{"version":3,"sources":["C:/Users/user/mew-supplychain/front-end/node_modules/ipfs-http-client/src/dht/find-peer.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","res","post","timeout","signal","searchParams","arg","headers","data","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAgBH,OAAO,CAAC,kBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,QAAf,CAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADwB;AAEzCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAAC;AAC9Ba,QAAAA,GAAG,EAAEP,MADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHU;AAOzCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPwB,KAAzB,CAAlB;;AAUA,eAAW,MAAMC,IAAjB,IAAyBP,GAAG,CAACQ,MAAJ,EAAzB,EAAuC;AACrC,UAAID,IAAI,CAACE,IAAL,KAAchB,SAAd,IAA2Bc,IAAI,CAACG,SAApC,EAA+C;AAC7C,cAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA;AAAN,YAAgBL,IAAI,CAACG,SAAL,CAAe,CAAf,CAAtB;AACA,eAAO;AACLG,UAAAA,EAAE,EAAEF,EADC;AAELG,UAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;AAAC;AAAuBC,UAAAA,CAAxB,KAA8B,IAAI3B,SAAJ,CAAc2B,CAAd,CAAhD;AAFF,SAAP;AAID;AACF;;AAED,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AAED,SAAOpB,QAAP;AACD,CA7ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"]},"metadata":{},"sourceType":"script"}